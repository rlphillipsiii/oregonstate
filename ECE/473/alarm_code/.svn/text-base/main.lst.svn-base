
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800100  00003110  000031a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000536  00800266  00800266  0000330a  2**0
                  ALLOC
  3 .stab         00008cdc  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002cb8  00000000  00000000  0000bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_10>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_33>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e1       	ldi	r30, 0x10	; 16
      a0:	f1 e3       	ldi	r31, 0x31	; 49
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	17 e0       	ldi	r17, 0x07	; 7
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 39       	cpi	r26, 0x9C	; 156
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <main>
      c6:	0c 94 86 18 	jmp	0x310c	; 0x310c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_ui_timer>:
 * controls the frequency at which the buttons are
 * checked for its pressed state.
 ******************************************************/
void init_ui_timer()
{
	TIMSK |= (1 << OCIE1B) | (1 << TOIE2);
      ce:	87 b7       	in	r24, 0x37	; 55
      d0:	88 64       	ori	r24, 0x48	; 72
      d2:	87 bf       	out	0x37, r24	; 55
	
	TCCR1A = 0x00;
      d4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS11);
      d6:	82 e0       	ldi	r24, 0x02	; 2
      d8:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
      da:	10 92 7a 00 	sts	0x007A, r1

	OCR1A = 10;
      de:	8a e0       	ldi	r24, 0x0A	; 10
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	9b bd       	out	0x2b, r25	; 43
      e4:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 250;
      e6:	8a ef       	ldi	r24, 0xFA	; 250
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	99 bd       	out	0x29, r25	; 41
      ec:	88 bd       	out	0x28, r24	; 40
}
      ee:	08 95       	ret

000000f0 <init_volume_control>:

void init_volume_control()
{
	TCCR3A = (1 << WGM30) | (1 << COM3A1);
      f0:	81 e8       	ldi	r24, 0x81	; 129
      f2:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1 << WGM32) | (1 << CS31);
      f6:	8a e0       	ldi	r24, 0x0A	; 10
      f8:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = 0x00;
      fc:	10 92 8c 00 	sts	0x008C, r1

	VOLUME = 50;
     100:	82 e3       	ldi	r24, 0x32	; 50
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 87 00 	sts	0x0087, r25
     108:	80 93 86 00 	sts	0x0086, r24
	//VOLUME = 0;
}
     10c:	08 95       	ret

0000010e <update_lcd_array>:

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     10e:	22 23       	and	r18, r18
     110:	59 f0       	breq	.+22     	; 0x128 <update_lcd_array+0x1a>
     112:	a6 2f       	mov	r26, r22
     114:	b7 2f       	mov	r27, r23

	VOLUME = 50;
	//VOLUME = 0;
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
     116:	fc 01       	movw	r30, r24
     118:	e4 0f       	add	r30, r20
     11a:	f1 1d       	adc	r31, r1
{
	uint8_t i;
	for (i = 0; i < length; i++)
     11c:	80 e0       	ldi	r24, 0x00	; 0
		line[i+offset] = msg[i];
     11e:	9d 91       	ld	r25, X+
     120:	91 93       	st	Z+, r25
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	82 17       	cp	r24, r18
     126:	d8 f3       	brcs	.-10     	; 0x11e <update_lcd_array+0x10>
     128:	08 95       	ret

0000012a <update_clock>:
		line[i+offset] = msg[i];
}

void update_clock(volatile struct encoder_state *state)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	ec 01       	movw	r28, r24
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     130:	88 81       	ld	r24, Y
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	91 f0       	breq	.+36     	; 0x15a <update_clock+0x30>
		return;

	if (state->left_dir == FORWARD)
     136:	88 81       	ld	r24, Y
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	a9 f0       	breq	.+42     	; 0x166 <update_clock+0x3c>
		change_hour(1);

	if (state->right_dir == FORWARD)
     13c:	89 81       	ldd	r24, Y+1	; 0x01
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	b9 f0       	breq	.+46     	; 0x170 <update_clock+0x46>
		change_minute(1);

	if (state->left_dir == REVERSE)
     142:	88 81       	ld	r24, Y
     144:	88 23       	and	r24, r24
     146:	c9 f0       	breq	.+50     	; 0x17a <update_clock+0x50>
		change_hour(-1);

	if (state->right_dir == REVERSE)
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	88 23       	and	r24, r24
     14c:	19 f4       	brne	.+6      	; 0x154 <update_clock+0x2a>
		change_minute(-1);
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	0e 94 64 09 	call	0x12c8	; 0x12c8 <change_minute>
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret
		line[i+offset] = msg[i];
}

void update_clock(volatile struct encoder_state *state)
{
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	82 30       	cpi	r24, 0x02	; 2
     15e:	d1 f3       	breq	.-12     	; 0x154 <update_clock+0x2a>
		return;

	if (state->left_dir == FORWARD)
     160:	88 81       	ld	r24, Y
     162:	81 30       	cpi	r24, 0x01	; 1
     164:	59 f7       	brne	.-42     	; 0x13c <update_clock+0x12>
		change_hour(1);
     166:	0e 94 41 09 	call	0x1282	; 0x1282 <change_hour>

	if (state->right_dir == FORWARD)
     16a:	89 81       	ldd	r24, Y+1	; 0x01
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	49 f7       	brne	.-46     	; 0x142 <update_clock+0x18>
		change_minute(1);
     170:	0e 94 64 09 	call	0x12c8	; 0x12c8 <change_minute>

	if (state->left_dir == REVERSE)
     174:	88 81       	ld	r24, Y
     176:	88 23       	and	r24, r24
     178:	39 f7       	brne	.-50     	; 0x148 <update_clock+0x1e>
		change_hour(-1);
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	0e 94 41 09 	call	0x1282	; 0x1282 <change_hour>
     180:	e3 cf       	rjmp	.-58     	; 0x148 <update_clock+0x1e>

00000182 <update_alarm>:
	if (state->right_dir == REVERSE)
		change_minute(-1);
}

void update_alarm(volatile struct encoder_state *state)
{
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	ec 01       	movw	r28, r24
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     188:	88 81       	ld	r24, Y
     18a:	82 30       	cpi	r24, 0x02	; 2
     18c:	91 f0       	breq	.+36     	; 0x1b2 <update_alarm+0x30>
		return;

	if (state->left_dir == FORWARD)
     18e:	88 81       	ld	r24, Y
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	a9 f0       	breq	.+42     	; 0x1be <update_alarm+0x3c>
		change_alarm_hour(1);

	if (state->right_dir == FORWARD)
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	b9 f0       	breq	.+46     	; 0x1c8 <update_alarm+0x46>
		change_alarm_minute(1);

	if (state->left_dir == REVERSE)
     19a:	88 81       	ld	r24, Y
     19c:	88 23       	and	r24, r24
     19e:	c9 f0       	breq	.+50     	; 0x1d2 <update_alarm+0x50>
		change_alarm_hour(-1);

	if (state->right_dir == REVERSE)
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	88 23       	and	r24, r24
     1a4:	19 f4       	brne	.+6      	; 0x1ac <update_alarm+0x2a>
		change_alarm_minute(-1);
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	0e 94 b8 09 	call	0x1370	; 0x1370 <change_alarm_minute>
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret
		change_minute(-1);
}

void update_alarm(volatile struct encoder_state *state)
{
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	d1 f3       	breq	.-12     	; 0x1ac <update_alarm+0x2a>
		return;

	if (state->left_dir == FORWARD)
     1b8:	88 81       	ld	r24, Y
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	59 f7       	brne	.-42     	; 0x194 <update_alarm+0x12>
		change_alarm_hour(1);
     1be:	0e 94 87 09 	call	0x130e	; 0x130e <change_alarm_hour>

	if (state->right_dir == FORWARD)
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	49 f7       	brne	.-46     	; 0x19a <update_alarm+0x18>
		change_alarm_minute(1);
     1c8:	0e 94 b8 09 	call	0x1370	; 0x1370 <change_alarm_minute>

	if (state->left_dir == REVERSE)
     1cc:	88 81       	ld	r24, Y
     1ce:	88 23       	and	r24, r24
     1d0:	39 f7       	brne	.-50     	; 0x1a0 <update_alarm+0x1e>
		change_alarm_hour(-1);
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	0e 94 87 09 	call	0x130e	; 0x130e <change_alarm_hour>
     1d8:	e3 cf       	rjmp	.-58     	; 0x1a0 <update_alarm+0x1e>

000001da <inc_volume>:
	if (state->right_dir == REVERSE)
		change_alarm_minute(-1);
}

void inc_volume() {
	if (VOLUME == 100)
     1da:	80 91 86 00 	lds	r24, 0x0086
     1de:	90 91 87 00 	lds	r25, 0x0087
     1e2:	84 36       	cpi	r24, 0x64	; 100
     1e4:	91 05       	cpc	r25, r1
     1e6:	49 f0       	breq	.+18     	; 0x1fa <inc_volume+0x20>
		return;

	VOLUME += 5;
     1e8:	80 91 86 00 	lds	r24, 0x0086
     1ec:	90 91 87 00 	lds	r25, 0x0087
     1f0:	05 96       	adiw	r24, 0x05	; 5
     1f2:	90 93 87 00 	sts	0x0087, r25
     1f6:	80 93 86 00 	sts	0x0086, r24
     1fa:	08 95       	ret

000001fc <dec_volume>:
}

void dec_volume() {
	if (VOLUME == 0)
     1fc:	80 91 86 00 	lds	r24, 0x0086
     200:	90 91 87 00 	lds	r25, 0x0087
     204:	00 97       	sbiw	r24, 0x00	; 0
     206:	49 f0       	breq	.+18     	; 0x21a <dec_volume+0x1e>
		return;

	VOLUME -= 5;
     208:	80 91 86 00 	lds	r24, 0x0086
     20c:	90 91 87 00 	lds	r25, 0x0087
     210:	05 97       	sbiw	r24, 0x05	; 5
     212:	90 93 87 00 	sts	0x0087, r25
     216:	80 93 86 00 	sts	0x0086, r24
     21a:	08 95       	ret

0000021c <update_volume>:
}

void update_volume(volatile struct encoder_state *state)
{
     21c:	fc 01       	movw	r30, r24
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     21e:	80 81       	ld	r24, Z
     220:	82 30       	cpi	r24, 0x02	; 2
     222:	b9 f1       	breq	.+110    	; 0x292 <update_volume+0x76>
		return;

	if (state->left_dir == FORWARD || state->right_dir == FORWARD)
     224:	80 81       	ld	r24, Z
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	01 f1       	breq	.+64     	; 0x26a <update_volume+0x4e>
     22a:	81 81       	ldd	r24, Z+1	; 0x01
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	e9 f0       	breq	.+58     	; 0x26a <update_volume+0x4e>
		inc_volume();
	
	if (state->left_dir == REVERSE || state->right_dir == REVERSE)
     230:	80 81       	ld	r24, Z
     232:	88 23       	and	r24, r24
     234:	81 f4       	brne	.+32     	; 0x256 <update_volume+0x3a>

	VOLUME += 5;
}

void dec_volume() {
	if (VOLUME == 0)
     236:	80 91 86 00 	lds	r24, 0x0086
     23a:	90 91 87 00 	lds	r25, 0x0087
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	49 f0       	breq	.+18     	; 0x254 <update_volume+0x38>
		return;

	VOLUME -= 5;
     242:	80 91 86 00 	lds	r24, 0x0086
     246:	90 91 87 00 	lds	r25, 0x0087
     24a:	05 97       	sbiw	r24, 0x05	; 5
     24c:	90 93 87 00 	sts	0x0087, r25
     250:	80 93 86 00 	sts	0x0086, r24
     254:	08 95       	ret
		return;

	if (state->left_dir == FORWARD || state->right_dir == FORWARD)
		inc_volume();
	
	if (state->left_dir == REVERSE || state->right_dir == REVERSE)
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	88 23       	and	r24, r24
     25a:	e1 f7       	brne	.-8      	; 0x254 <update_volume+0x38>

	VOLUME += 5;
}

void dec_volume() {
	if (VOLUME == 0)
     25c:	80 91 86 00 	lds	r24, 0x0086
     260:	90 91 87 00 	lds	r25, 0x0087
     264:	00 97       	sbiw	r24, 0x00	; 0
     266:	69 f7       	brne	.-38     	; 0x242 <update_volume+0x26>
     268:	f5 cf       	rjmp	.-22     	; 0x254 <update_volume+0x38>
	if (state->right_dir == REVERSE)
		change_alarm_minute(-1);
}

void inc_volume() {
	if (VOLUME == 100)
     26a:	80 91 86 00 	lds	r24, 0x0086
     26e:	90 91 87 00 	lds	r25, 0x0087
     272:	84 36       	cpi	r24, 0x64	; 100
     274:	91 05       	cpc	r25, r1
     276:	e1 f2       	breq	.-72     	; 0x230 <update_volume+0x14>
		return;

	VOLUME += 5;
     278:	80 91 86 00 	lds	r24, 0x0086
     27c:	90 91 87 00 	lds	r25, 0x0087
     280:	05 96       	adiw	r24, 0x05	; 5
     282:	90 93 87 00 	sts	0x0087, r25
     286:	80 93 86 00 	sts	0x0086, r24
		return;

	if (state->left_dir == FORWARD || state->right_dir == FORWARD)
		inc_volume();
	
	if (state->left_dir == REVERSE || state->right_dir == REVERSE)
     28a:	80 81       	ld	r24, Z
     28c:	88 23       	and	r24, r24
     28e:	99 f2       	breq	.-90     	; 0x236 <update_volume+0x1a>
     290:	e2 cf       	rjmp	.-60     	; 0x256 <update_volume+0x3a>
	VOLUME -= 5;
}

void update_volume(volatile struct encoder_state *state)
{
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     292:	81 81       	ldd	r24, Z+1	; 0x01
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	31 f6       	brne	.-116    	; 0x224 <update_volume+0x8>
     298:	08 95       	ret

0000029a <update_radio_frequency>:
	if (state->left_dir == REVERSE || state->right_dir == REVERSE)
		dec_volume();
}

void update_radio_frequency(volatile struct encoder_state *state)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     2a0:	88 81       	ld	r24, Y
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	f1 f0       	breq	.+60     	; 0x2e2 <update_radio_frequency+0x48>
		return;

	if (state->left_dir == FORWARD)
     2a6:	88 81       	ld	r24, Y
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	09 f1       	breq	.+66     	; 0x2ee <update_radio_frequency+0x54>
		fm_alter_freq(1);
	
	if (state->left_dir == REVERSE)
     2ac:	88 81       	ld	r24, Y
     2ae:	88 23       	and	r24, r24
     2b0:	19 f1       	breq	.+70     	; 0x2f8 <update_radio_frequency+0x5e>
		fm_alter_freq(0);

	if (state->right_dir == FORWARD)
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	81 30       	cpi	r24, 0x01	; 1
     2b6:	29 f1       	breq	.+74     	; 0x302 <update_radio_frequency+0x68>
		inc_volume();

	if (state->right_dir == REVERSE)
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	88 23       	and	r24, r24
     2bc:	79 f4       	brne	.+30     	; 0x2dc <update_radio_frequency+0x42>

	VOLUME += 5;
}

void dec_volume() {
	if (VOLUME == 0)
     2be:	80 91 86 00 	lds	r24, 0x0086
     2c2:	90 91 87 00 	lds	r25, 0x0087
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	49 f0       	breq	.+18     	; 0x2dc <update_radio_frequency+0x42>
		return;

	VOLUME -= 5;
     2ca:	80 91 86 00 	lds	r24, 0x0086
     2ce:	90 91 87 00 	lds	r25, 0x0087
     2d2:	05 97       	sbiw	r24, 0x05	; 5
     2d4:	90 93 87 00 	sts	0x0087, r25
     2d8:	80 93 86 00 	sts	0x0086, r24
	if (state->right_dir == FORWARD)
		inc_volume();

	if (state->right_dir == REVERSE)
		dec_volume();
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret
		dec_volume();
}

void update_radio_frequency(volatile struct encoder_state *state)
{
	if (state->left_dir == STOPPED && state->right_dir == STOPPED)
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	82 30       	cpi	r24, 0x02	; 2
     2e6:	d1 f3       	breq	.-12     	; 0x2dc <update_radio_frequency+0x42>
		return;

	if (state->left_dir == FORWARD)
     2e8:	88 81       	ld	r24, Y
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	f9 f6       	brne	.-66     	; 0x2ac <update_radio_frequency+0x12>
		fm_alter_freq(1);
     2ee:	0e 94 ce 0c 	call	0x199c	; 0x199c <fm_alter_freq>
	
	if (state->left_dir == REVERSE)
     2f2:	88 81       	ld	r24, Y
     2f4:	88 23       	and	r24, r24
     2f6:	e9 f6       	brne	.-70     	; 0x2b2 <update_radio_frequency+0x18>
		fm_alter_freq(0);
     2f8:	0e 94 ce 0c 	call	0x199c	; 0x199c <fm_alter_freq>

	if (state->right_dir == FORWARD)
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	d9 f6       	brne	.-74     	; 0x2b8 <update_radio_frequency+0x1e>
	if (state->right_dir == REVERSE)
		change_alarm_minute(-1);
}

void inc_volume() {
	if (VOLUME == 100)
     302:	80 91 86 00 	lds	r24, 0x0086
     306:	90 91 87 00 	lds	r25, 0x0087
     30a:	84 36       	cpi	r24, 0x64	; 100
     30c:	91 05       	cpc	r25, r1
     30e:	a1 f2       	breq	.-88     	; 0x2b8 <update_radio_frequency+0x1e>
		return;

	VOLUME += 5;
     310:	80 91 86 00 	lds	r24, 0x0086
     314:	90 91 87 00 	lds	r25, 0x0087
     318:	05 96       	adiw	r24, 0x05	; 5
     31a:	90 93 87 00 	sts	0x0087, r25
     31e:	80 93 86 00 	sts	0x0086, r24
     322:	ca cf       	rjmp	.-108    	; 0x2b8 <update_radio_frequency+0x1e>

00000324 <set_lcd_alarm_state>:
		dec_volume();
}

void set_lcd_alarm_state(uint8_t state)
{
	switch(state) {
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	09 f4       	brne	.+2      	; 0x32a <set_lcd_alarm_state+0x6>
     328:	56 c0       	rjmp	.+172    	; 0x3d6 <set_lcd_alarm_state+0xb2>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	d0 f1       	brcs	.+116    	; 0x3a2 <set_lcd_alarm_state+0x7e>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	d1 f4       	brne	.+52     	; 0x366 <set_lcd_alarm_state+0x42>

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
		line[i+offset] = msg[i];
     332:	81 e4       	ldi	r24, 0x41	; 65
     334:	80 93 dd 06 	sts	0x06DD, r24
     338:	8c e4       	ldi	r24, 0x4C	; 76
     33a:	80 93 de 06 	sts	0x06DE, r24
     33e:	8d e4       	ldi	r24, 0x4D	; 77
     340:	80 93 df 06 	sts	0x06DF, r24
     344:	80 e2       	ldi	r24, 0x20	; 32
     346:	80 93 e0 06 	sts	0x06E0, r24
     34a:	94 e5       	ldi	r25, 0x54	; 84
     34c:	90 93 e1 06 	sts	0x06E1, r25
     350:	9f e4       	ldi	r25, 0x4F	; 79
     352:	90 93 e2 06 	sts	0x06E2, r25
     356:	9e e4       	ldi	r25, 0x4E	; 78
     358:	90 93 e3 06 	sts	0x06E3, r25
     35c:	95 e4       	ldi	r25, 0x45	; 69
     35e:	90 93 e4 06 	sts	0x06E4, r25
     362:	80 93 e5 06 	sts	0x06E5, r24
	case ALARM_DISABLED:
		update_lcd_array(lcd_top, "ALARM OFF", 0, 9);
		break;
	}

	if (mode != MODE_DEFAULT && mode != MODE_TUNE_RADIO)
     366:	80 91 05 07 	lds	r24, 0x0705
     36a:	88 23       	and	r24, r24
     36c:	c9 f0       	breq	.+50     	; 0x3a0 <set_lcd_alarm_state+0x7c>
     36e:	80 91 05 07 	lds	r24, 0x0705
     372:	86 30       	cpi	r24, 0x06	; 6
     374:	a9 f0       	breq	.+42     	; 0x3a0 <set_lcd_alarm_state+0x7c>
		update_lcd_array(lcd_bottom, MODE_STRING[mode], 0, MODE_MSG_LENGTH);
     376:	e0 91 05 07 	lds	r30, 0x0705
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	e6 5d       	subi	r30, 0xD6	; 214
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	01 90       	ld	r0, Z+
     386:	f0 81       	ld	r31, Z
     388:	e0 2d       	mov	r30, r0
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
		line[i+offset] = msg[i];
     38e:	21 91       	ld	r18, Z+
     390:	dc 01       	movw	r26, r24
     392:	a1 56       	subi	r26, 0x61	; 97
     394:	b9 4f       	sbci	r27, 0xF9	; 249
     396:	2c 93       	st	X, r18
     398:	01 96       	adiw	r24, 0x01	; 1
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     39a:	8a 30       	cpi	r24, 0x0A	; 10
     39c:	91 05       	cpc	r25, r1
     39e:	b9 f7       	brne	.-18     	; 0x38e <set_lcd_alarm_state+0x6a>
     3a0:	08 95       	ret
		line[i+offset] = msg[i];
     3a2:	81 e4       	ldi	r24, 0x41	; 65
     3a4:	80 93 dd 06 	sts	0x06DD, r24
     3a8:	9c e4       	ldi	r25, 0x4C	; 76
     3aa:	90 93 de 06 	sts	0x06DE, r25
     3ae:	80 93 df 06 	sts	0x06DF, r24
     3b2:	82 e5       	ldi	r24, 0x52	; 82
     3b4:	80 93 e0 06 	sts	0x06E0, r24
     3b8:	8d e4       	ldi	r24, 0x4D	; 77
     3ba:	80 93 e1 06 	sts	0x06E1, r24
     3be:	80 e2       	ldi	r24, 0x20	; 32
     3c0:	80 93 e2 06 	sts	0x06E2, r24
     3c4:	8f e4       	ldi	r24, 0x4F	; 79
     3c6:	80 93 e3 06 	sts	0x06E3, r24
     3ca:	86 e4       	ldi	r24, 0x46	; 70
     3cc:	80 93 e4 06 	sts	0x06E4, r24
     3d0:	80 93 e5 06 	sts	0x06E5, r24
     3d4:	c8 cf       	rjmp	.-112    	; 0x366 <set_lcd_alarm_state+0x42>
     3d6:	81 e4       	ldi	r24, 0x41	; 65
     3d8:	80 93 dd 06 	sts	0x06DD, r24
     3dc:	9c e4       	ldi	r25, 0x4C	; 76
     3de:	90 93 de 06 	sts	0x06DE, r25
     3e2:	9d e4       	ldi	r25, 0x4D	; 77
     3e4:	90 93 df 06 	sts	0x06DF, r25
     3e8:	90 e2       	ldi	r25, 0x20	; 32
     3ea:	90 93 e0 06 	sts	0x06E0, r25
     3ee:	92 e5       	ldi	r25, 0x52	; 82
     3f0:	90 93 e1 06 	sts	0x06E1, r25
     3f4:	80 93 e2 06 	sts	0x06E2, r24
     3f8:	84 e4       	ldi	r24, 0x44	; 68
     3fa:	80 93 e3 06 	sts	0x06E3, r24
     3fe:	89 e4       	ldi	r24, 0x49	; 73
     400:	80 93 e4 06 	sts	0x06E4, r24
     404:	8f e4       	ldi	r24, 0x4F	; 79
     406:	80 93 e5 06 	sts	0x06E5, r24
     40a:	ad cf       	rjmp	.-166    	; 0x366 <set_lcd_alarm_state+0x42>

0000040c <toggle_mode>:
		update_lcd_array(lcd_bottom, MODE_STRING[mode], 0, MODE_MSG_LENGTH);
}

void toggle_mode(uint8_t new)
{
	if (mode == new) 
     40c:	90 91 05 07 	lds	r25, 0x0705
     410:	98 17       	cp	r25, r24
     412:	19 f0       	breq	.+6      	; 0x41a <toggle_mode+0xe>
		mode = MODE_DEFAULT;
	else
		mode = new;
     414:	80 93 05 07 	sts	0x0705, r24
     418:	08 95       	ret
}

void toggle_mode(uint8_t new)
{
	if (mode == new) 
		mode = MODE_DEFAULT;
     41a:	10 92 05 07 	sts	0x0705, r1
     41e:	08 95       	ret

00000420 <change_alarm_state>:
		mode = new;
}

void change_alarm_state()
{
	switch (is_alarm_enabled()) {
     420:	0e 94 9e 0a 	call	0x153c	; 0x153c <is_alarm_enabled>
     424:	81 30       	cpi	r24, 0x01	; 1
     426:	69 f0       	breq	.+26     	; 0x442 <change_alarm_state+0x22>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	20 f4       	brcc	.+8      	; 0x434 <change_alarm_state+0x14>
	case ALARM_DISABLED:
		set_alarm_state(ALARM_ENABLED_TONE);
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <set_alarm_state>
		break;
     432:	08 95       	ret
		mode = new;
}

void change_alarm_state()
{
	switch (is_alarm_enabled()) {
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	09 f0       	breq	.+2      	; 0x43a <change_alarm_state+0x1a>
     438:	08 95       	ret
	case ALARM_DISABLED:
		set_alarm_state(ALARM_ENABLED_TONE);
		break;

	case ALARM_ENABLED_TONE:
		set_alarm_state(ALARM_ENABLED_RADIO);
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <set_alarm_state>
		break;
     440:	08 95       	ret

	case ALARM_ENABLED_RADIO:
		set_alarm_state(ALARM_DISABLED);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 9b 0a 	call	0x1536	; 0x1536 <set_alarm_state>
     448:	08 95       	ret

0000044a <change_mode>:
		break;
	}
}

void change_mode(char buttons)
{
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	18 2f       	mov	r17, r24
	/* BUTTON 1: set the time */
	if (ISSET(buttons, BUTTON1))
     452:	c8 2f       	mov	r28, r24
     454:	dd 27       	eor	r29, r29
     456:	c7 fd       	sbrc	r28, 7
     458:	d0 95       	com	r29
     45a:	c0 ff       	sbrs	r28, 0
     45c:	08 c0       	rjmp	.+16     	; 0x46e <change_mode+0x24>
		update_lcd_array(lcd_bottom, MODE_STRING[mode], 0, MODE_MSG_LENGTH);
}

void toggle_mode(uint8_t new)
{
	if (mode == new) 
     45e:	80 91 05 07 	lds	r24, 0x0705
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	09 f4       	brne	.+2      	; 0x468 <change_mode+0x1e>
     466:	59 c0       	rjmp	.+178    	; 0x51a <change_mode+0xd0>
		mode = MODE_DEFAULT;
	else
		mode = new;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 05 07 	sts	0x0705, r24
	/* BUTTON 1: set the time */
	if (ISSET(buttons, BUTTON1))
		toggle_mode(MODE_SET_TIME);

	/* BUTTON 2: set the alarm time */
	if (ISSET(buttons, BUTTON2))
     46e:	c1 ff       	sbrs	r28, 1
     470:	08 c0       	rjmp	.+16     	; 0x482 <change_mode+0x38>
		update_lcd_array(lcd_bottom, MODE_STRING[mode], 0, MODE_MSG_LENGTH);
}

void toggle_mode(uint8_t new)
{
	if (mode == new) 
     472:	80 91 05 07 	lds	r24, 0x0705
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	09 f4       	brne	.+2      	; 0x47c <change_mode+0x32>
     47a:	52 c0       	rjmp	.+164    	; 0x520 <change_mode+0xd6>
		mode = MODE_DEFAULT;
	else
		mode = new;
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	80 93 05 07 	sts	0x0705, r24
	/* BUTTON 2: set the alarm time */
	if (ISSET(buttons, BUTTON2))
		toggle_mode(MODE_SET_ALARM);

	/* BUTTON 3: enable/disable the alarm */
	if (ISSET(buttons, BUTTON3))
     482:	c2 fd       	sbrc	r28, 2
     484:	25 c0       	rjmp	.+74     	; 0x4d0 <change_mode+0x86>
		change_alarm_state();

	/* BUTTON 4: snooze for 1 minute */
	if (ISSET(buttons, BUTTON4)) {
     486:	c3 ff       	sbrs	r28, 3
     488:	04 c0       	rjmp	.+8      	; 0x492 <change_mode+0x48>
		if (play_alarm) {
     48a:	80 91 06 07 	lds	r24, 0x0706
     48e:	88 23       	and	r24, r24
     490:	61 f5       	brne	.+88     	; 0x4ea <change_mode+0xa0>
			snooze_alarm(1, 0);
		}
	}

	/* BUTTON 5: snooze for 10 minutes */
	if (ISSET(buttons, BUTTON5)) {
     492:	c4 ff       	sbrs	r28, 4
     494:	04 c0       	rjmp	.+8      	; 0x49e <change_mode+0x54>
		if (play_alarm) {
     496:	80 91 06 07 	lds	r24, 0x0706
     49a:	88 23       	and	r24, r24
     49c:	e1 f4       	brne	.+56     	; 0x4d6 <change_mode+0x8c>
			snooze_alarm(10, 0);
		}
	}

	/* BUTTON 6: silence alarm */
	if (ISSET(buttons, BUTTON6)) {
     49e:	c5 fd       	sbrc	r28, 5
     4a0:	0f c0       	rjmp	.+30     	; 0x4c0 <change_mode+0x76>
		mute = TRUE;
		reset_snooze();
	}

	/* BUTTON 7: tune radio mode */
	if (ISSET(buttons, BUTTON7)) 
     4a2:	c6 ff       	sbrs	r28, 6
     4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <change_mode+0x6a>
		update_lcd_array(lcd_bottom, MODE_STRING[mode], 0, MODE_MSG_LENGTH);
}

void toggle_mode(uint8_t new)
{
	if (mode == new) 
     4a6:	80 91 05 07 	lds	r24, 0x0705
     4aa:	86 30       	cpi	r24, 0x06	; 6
     4ac:	39 f1       	breq	.+78     	; 0x4fc <change_mode+0xb2>
		mode = MODE_DEFAULT;
	else
		mode = new;
     4ae:	86 e0       	ldi	r24, 0x06	; 6
     4b0:	80 93 05 07 	sts	0x0705, r24
	/* BUTTON 7: tune radio mode */
	if (ISSET(buttons, BUTTON7)) 
		toggle_mode(MODE_TUNE_RADIO);

	/* BUTTON 8: mute/unmute the radio */
	if (ISSET(buttons, BUTTON8)) {
     4b4:	17 fd       	sbrc	r17, 7
     4b6:	26 c0       	rjmp	.+76     	; 0x504 <change_mode+0xba>
		if (is_muted())
			unmute = TRUE;
		else
			mute = TRUE;
	}
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	08 95       	ret
		}
	}

	/* BUTTON 6: silence alarm */
	if (ISSET(buttons, BUTTON6)) {
		play_alarm = ALARM_DISABLED;
     4c0:	10 92 06 07 	sts	0x0706, r1

		mute = TRUE;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 c7 06 	sts	0x06C7, r24
		reset_snooze();
     4ca:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <reset_snooze>
     4ce:	e9 cf       	rjmp	.-46     	; 0x4a2 <change_mode+0x58>
	if (ISSET(buttons, BUTTON2))
		toggle_mode(MODE_SET_ALARM);

	/* BUTTON 3: enable/disable the alarm */
	if (ISSET(buttons, BUTTON3))
		change_alarm_state();
     4d0:	0e 94 10 02 	call	0x420	; 0x420 <change_alarm_state>
     4d4:	d8 cf       	rjmp	.-80     	; 0x486 <change_mode+0x3c>
	}

	/* BUTTON 5: snooze for 10 minutes */
	if (ISSET(buttons, BUTTON5)) {
		if (play_alarm) {
			play_alarm = ALARM_DISABLED;
     4d6:	10 92 06 07 	sts	0x0706, r1

			mute = TRUE;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 c7 06 	sts	0x06C7, r24
			snooze_alarm(10, 0);
     4e0:	8a e0       	ldi	r24, 0x0A	; 10
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <snooze_alarm>
     4e8:	da cf       	rjmp	.-76     	; 0x49e <change_mode+0x54>
		change_alarm_state();

	/* BUTTON 4: snooze for 1 minute */
	if (ISSET(buttons, BUTTON4)) {
		if (play_alarm) {
			play_alarm = ALARM_DISABLED;
     4ea:	10 92 06 07 	sts	0x0706, r1

			mute = TRUE;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 c7 06 	sts	0x06C7, r24
			snooze_alarm(1, 0);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <snooze_alarm>
     4fa:	cb cf       	rjmp	.-106    	; 0x492 <change_mode+0x48>
}

void toggle_mode(uint8_t new)
{
	if (mode == new) 
		mode = MODE_DEFAULT;
     4fc:	10 92 05 07 	sts	0x0705, r1
	/* BUTTON 7: tune radio mode */
	if (ISSET(buttons, BUTTON7)) 
		toggle_mode(MODE_TUNE_RADIO);

	/* BUTTON 8: mute/unmute the radio */
	if (ISSET(buttons, BUTTON8)) {
     500:	17 ff       	sbrs	r17, 7
     502:	da cf       	rjmp	.-76     	; 0x4b8 <change_mode+0x6e>
		if (is_muted())
     504:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <is_muted>
     508:	88 23       	and	r24, r24
     50a:	69 f4       	brne	.+26     	; 0x526 <change_mode+0xdc>
			unmute = TRUE;
		else
			mute = TRUE;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	80 93 c7 06 	sts	0x06C7, r24
	}
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	08 95       	ret
}

void toggle_mode(uint8_t new)
{
	if (mode == new) 
		mode = MODE_DEFAULT;
     51a:	10 92 05 07 	sts	0x0705, r1
     51e:	a7 cf       	rjmp	.-178    	; 0x46e <change_mode+0x24>
     520:	10 92 05 07 	sts	0x0705, r1
     524:	ae cf       	rjmp	.-164    	; 0x482 <change_mode+0x38>
		toggle_mode(MODE_TUNE_RADIO);

	/* BUTTON 8: mute/unmute the radio */
	if (ISSET(buttons, BUTTON8)) {
		if (is_muted())
			unmute = TRUE;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 d0 06 	sts	0x06D0, r24
     52c:	c5 cf       	rjmp	.-118    	; 0x4b8 <change_mode+0x6e>

0000052e <refresh_encoders>:
	}
}

void refresh_encoders()
{
	latch_encoders();
     52e:	0e 94 35 07 	call	0xe6a	; 0xe6a <latch_encoders>
	if (VOLUME == 0)
     532:	80 91 86 00 	lds	r24, 0x0086
     536:	90 91 87 00 	lds	r25, 0x0087
     53a:	00 97       	sbiw	r24, 0x00	; 0
     53c:	99 f4       	brne	.+38     	; 0x564 <refresh_encoders+0x36>
		get_direction(&encoders, update_graph(OFF)); // get the encoder direction
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	0e 94 30 07 	call	0xe60	; 0xe60 <update_graph>
     544:	68 2f       	mov	r22, r24
     546:	81 ed       	ldi	r24, 0xD1	; 209
     548:	96 e0       	ldi	r25, 0x06	; 6
     54a:	0e 94 66 07 	call	0xecc	; 0xecc <get_direction>
	else
		get_direction(&encoders, update_graph(GRAPH_NUMS[VOLUME/14+1])); // get the encoder direction

	switch(mode) {
     54e:	80 91 05 07 	lds	r24, 0x0705
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	f1 f0       	breq	.+60     	; 0x592 <refresh_encoders+0x64>
     556:	83 30       	cpi	r24, 0x03	; 3
     558:	08 f1       	brcs	.+66     	; 0x59c <refresh_encoders+0x6e>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	41 f1       	breq	.+80     	; 0x5ae <refresh_encoders+0x80>
     55e:	86 30       	cpi	r24, 0x06	; 6
     560:	59 f1       	breq	.+86     	; 0x5b8 <refresh_encoders+0x8a>
     562:	08 95       	ret
{
	latch_encoders();
	if (VOLUME == 0)
		get_direction(&encoders, update_graph(OFF)); // get the encoder direction
	else
		get_direction(&encoders, update_graph(GRAPH_NUMS[VOLUME/14+1])); // get the encoder direction
     564:	80 91 86 00 	lds	r24, 0x0086
     568:	90 91 87 00 	lds	r25, 0x0087
     56c:	6e e0       	ldi	r22, 0x0E	; 14
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
     574:	60 50       	subi	r22, 0x00	; 0
     576:	7f 4f       	sbci	r23, 0xFF	; 255
     578:	fb 01       	movw	r30, r22
     57a:	81 81       	ldd	r24, Z+1	; 0x01
     57c:	0e 94 30 07 	call	0xe60	; 0xe60 <update_graph>
     580:	68 2f       	mov	r22, r24
     582:	81 ed       	ldi	r24, 0xD1	; 209
     584:	96 e0       	ldi	r25, 0x06	; 6
     586:	0e 94 66 07 	call	0xecc	; 0xecc <get_direction>

	switch(mode) {
     58a:	80 91 05 07 	lds	r24, 0x0705
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	11 f7       	brne	.-60     	; 0x556 <refresh_encoders+0x28>
	case MODE_SET_TIME:
		update_clock(&encoders);			
		break;

	case MODE_SET_ALARM:
		update_alarm(&encoders);
     592:	81 ed       	ldi	r24, 0xD1	; 209
     594:	96 e0       	ldi	r25, 0x06	; 6
     596:	0e 94 c1 00 	call	0x182	; 0x182 <update_alarm>
		break;
     59a:	08 95       	ret
	if (VOLUME == 0)
		get_direction(&encoders, update_graph(OFF)); // get the encoder direction
	else
		get_direction(&encoders, update_graph(GRAPH_NUMS[VOLUME/14+1])); // get the encoder direction

	switch(mode) {
     59c:	88 23       	and	r24, r24
     59e:	39 f0       	breq	.+14     	; 0x5ae <refresh_encoders+0x80>
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	f9 f6       	brne	.-66     	; 0x562 <refresh_encoders+0x34>
	case MODE_SET_TIME:
		update_clock(&encoders);			
     5a4:	81 ed       	ldi	r24, 0xD1	; 209
     5a6:	96 e0       	ldi	r25, 0x06	; 6
     5a8:	0e 94 95 00 	call	0x12a	; 0x12a <update_clock>
		break;
     5ac:	08 95       	ret
		update_radio_frequency(&encoders);
		break;

	case MODE_ENABLE_ALARM:
	case MODE_DEFAULT:
		update_volume(&encoders);
     5ae:	81 ed       	ldi	r24, 0xD1	; 209
     5b0:	96 e0       	ldi	r25, 0x06	; 6
     5b2:	0e 94 0e 01 	call	0x21c	; 0x21c <update_volume>
     5b6:	08 95       	ret
	case MODE_SET_ALARM:
		update_alarm(&encoders);
		break;

	case MODE_TUNE_RADIO:
		update_radio_frequency(&encoders);
     5b8:	81 ed       	ldi	r24, 0xD1	; 209
     5ba:	96 e0       	ldi	r25, 0x06	; 6
     5bc:	0e 94 4d 01 	call	0x29a	; 0x29a <update_radio_frequency>
		break;
     5c0:	08 95       	ret

000005c2 <refresh_lcd_display>:
	}
}

void refresh_lcd_display()
{
	set_lcd_alarm_state(is_alarm_enabled());
     5c2:	0e 94 9e 0a 	call	0x153c	; 0x153c <is_alarm_enabled>
     5c6:	0e 94 92 01 	call	0x324	; 0x324 <set_lcd_alarm_state>
	if (lcd_index > LCD_LINE_LENGTH-1)
     5ca:	80 91 19 07 	lds	r24, 0x0719
     5ce:	88 32       	cpi	r24, 0x28	; 40
     5d0:	90 f0       	brcs	.+36     	; 0x5f6 <refresh_lcd_display+0x34>
		char2lcd(lcd_bottom[lcd_index-LCD_LINE_LENGTH]);
     5d2:	e0 91 19 07 	lds	r30, 0x0719
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	e9 58       	subi	r30, 0x89	; 137
     5da:	f9 4f       	sbci	r31, 0xF9	; 249
     5dc:	80 81       	ld	r24, Z
     5de:	0e 94 f5 07 	call	0xfea	; 0xfea <char2lcd>
	else
		char2lcd(lcd_top[lcd_index]);

	lcd_index++;
     5e2:	80 91 19 07 	lds	r24, 0x0719
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	80 93 19 07 	sts	0x0719, r24
	if (lcd_index == 2*LCD_LINE_LENGTH)
     5ec:	80 91 19 07 	lds	r24, 0x0719
     5f0:	80 35       	cpi	r24, 0x50	; 80
     5f2:	51 f0       	breq	.+20     	; 0x608 <refresh_lcd_display+0x46>
     5f4:	08 95       	ret
{
	set_lcd_alarm_state(is_alarm_enabled());
	if (lcd_index > LCD_LINE_LENGTH-1)
		char2lcd(lcd_bottom[lcd_index-LCD_LINE_LENGTH]);
	else
		char2lcd(lcd_top[lcd_index]);
     5f6:	e0 91 19 07 	lds	r30, 0x0719
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	e3 52       	subi	r30, 0x23	; 35
     5fe:	f9 4f       	sbci	r31, 0xF9	; 249
     600:	80 81       	ld	r24, Z
     602:	0e 94 f5 07 	call	0xfea	; 0xfea <char2lcd>
     606:	ed cf       	rjmp	.-38     	; 0x5e2 <refresh_lcd_display+0x20>

	lcd_index++;
	if (lcd_index == 2*LCD_LINE_LENGTH)
		lcd_index = 0;
     608:	10 92 19 07 	sts	0x0719, r1
     60c:	08 95       	ret

0000060e <refresh_led_display>:
}

void refresh_led_display()
{
     60e:	df 93       	push	r29
     610:	cf 93       	push	r28
     612:	0f 92       	push	r0
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
	seconds_state = get_seconds_state(mode);
     618:	80 91 05 07 	lds	r24, 0x0705
     61c:	0e 94 8f 0a 	call	0x151e	; 0x151e <get_seconds_state>
     620:	80 93 9d 06 	sts	0x069D, r24
	if (mode == MODE_SET_TIME && seconds_state) {
     624:	80 91 05 07 	lds	r24, 0x0705
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	09 f4       	brne	.+2      	; 0x62e <refresh_led_display+0x20>
     62c:	5d c0       	rjmp	.+186    	; 0x6e8 <refresh_led_display+0xda>
		disable_leds();
		return;
	} 

	switch (mode) {
     62e:	80 91 05 07 	lds	r24, 0x0705
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	09 f4       	brne	.+2      	; 0x638 <refresh_led_display+0x2a>
     636:	40 c0       	rjmp	.+128    	; 0x6b8 <refresh_led_display+0xaa>
     638:	86 30       	cpi	r24, 0x06	; 6
     63a:	31 f1       	breq	.+76     	; 0x688 <refresh_led_display+0x7a>
		set_zero_blanked(&output);
		update_colon(&output, COLON_OFF, is_alarm_enabled());
		break;
		
	default:
		number = get_time();
     63c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <get_time>
     640:	90 93 d7 06 	sts	0x06D7, r25
     644:	80 93 d6 06 	sts	0x06D6, r24
		
		set_decimal(&output, FALSE);
     648:	88 ec       	ldi	r24, 0xC8	; 200
     64a:	96 e0       	ldi	r25, 0x06	; 6
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <set_decimal>
		set_zero_filled(&output);
     652:	88 ec       	ldi	r24, 0xC8	; 200
     654:	96 e0       	ldi	r25, 0x06	; 6
     656:	0e 94 1b 06 	call	0xc36	; 0xc36 <set_zero_filled>
		update_colon(&output, seconds_state, is_alarm_enabled());
     65a:	60 91 9d 06 	lds	r22, 0x069D
     65e:	69 83       	std	Y+1, r22	; 0x01
     660:	0e 94 9e 0a 	call	0x153c	; 0x153c <is_alarm_enabled>
     664:	48 2f       	mov	r20, r24
     666:	88 ec       	ldi	r24, 0xC8	; 200
     668:	96 e0       	ldi	r25, 0x06	; 6
     66a:	69 81       	ldd	r22, Y+1	; 0x01
     66c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <update_colon>
	}

	update_segment(&output, number);
     670:	60 91 d6 06 	lds	r22, 0x06D6
     674:	70 91 d7 06 	lds	r23, 0x06D7
     678:	88 ec       	ldi	r24, 0xC8	; 200
     67a:	96 e0       	ldi	r25, 0x06	; 6
     67c:	0e 94 87 06 	call	0xd0e	; 0xd0e <update_segment>
}
     680:	0f 90       	pop	r0
     682:	cf 91       	pop	r28
     684:	df 91       	pop	r29
     686:	08 95       	ret
		set_zero_filled(&output);
		update_colon(&output, COLON_ON, is_alarm_enabled());
		break;

	case MODE_TUNE_RADIO:
		number = get_freq();
     688:	0e 94 c4 0c 	call	0x1988	; 0x1988 <get_freq>
     68c:	90 93 d7 06 	sts	0x06D7, r25
     690:	80 93 d6 06 	sts	0x06D6, r24
		
		set_decimal(&output, TRUE);
     694:	88 ec       	ldi	r24, 0xC8	; 200
     696:	96 e0       	ldi	r25, 0x06	; 6
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <set_decimal>
		set_zero_blanked(&output);
     69e:	88 ec       	ldi	r24, 0xC8	; 200
     6a0:	96 e0       	ldi	r25, 0x06	; 6
     6a2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <set_zero_blanked>
		update_colon(&output, COLON_OFF, is_alarm_enabled());
     6a6:	0e 94 9e 0a 	call	0x153c	; 0x153c <is_alarm_enabled>
     6aa:	48 2f       	mov	r20, r24
     6ac:	88 ec       	ldi	r24, 0xC8	; 200
     6ae:	96 e0       	ldi	r25, 0x06	; 6
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <update_colon>
		break;
     6b6:	dc cf       	rjmp	.-72     	; 0x670 <refresh_led_display+0x62>
		return;
	} 

	switch (mode) {
	case MODE_SET_ALARM:
		number = get_alarm();
     6b8:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_alarm>
     6bc:	90 93 d7 06 	sts	0x06D7, r25
     6c0:	80 93 d6 06 	sts	0x06D6, r24

		set_decimal(&output, FALSE);
     6c4:	88 ec       	ldi	r24, 0xC8	; 200
     6c6:	96 e0       	ldi	r25, 0x06	; 6
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	0e 94 0e 06 	call	0xc1c	; 0xc1c <set_decimal>
		set_zero_filled(&output);
     6ce:	88 ec       	ldi	r24, 0xC8	; 200
     6d0:	96 e0       	ldi	r25, 0x06	; 6
     6d2:	0e 94 1b 06 	call	0xc36	; 0xc36 <set_zero_filled>
		update_colon(&output, COLON_ON, is_alarm_enabled());
     6d6:	0e 94 9e 0a 	call	0x153c	; 0x153c <is_alarm_enabled>
     6da:	48 2f       	mov	r20, r24
     6dc:	88 ec       	ldi	r24, 0xC8	; 200
     6de:	96 e0       	ldi	r25, 0x06	; 6
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <update_colon>
		break;
     6e6:	c4 cf       	rjmp	.-120    	; 0x670 <refresh_led_display+0x62>
}

void refresh_led_display()
{
	seconds_state = get_seconds_state(mode);
	if (mode == MODE_SET_TIME && seconds_state) {
     6e8:	80 91 9d 06 	lds	r24, 0x069D
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <refresh_led_display+0xe4>
     6f0:	9e cf       	rjmp	.-196    	; 0x62e <refresh_led_display+0x20>
		disable_leds();
     6f2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <disable_leds>
		return;
     6f6:	c4 cf       	rjmp	.-120    	; 0x680 <refresh_led_display+0x72>

000006f8 <init_globals>:
	update_segment(&output, number);
}

void init_globals()
{
	memset((void *) lcd_top, 0x20, sizeof(lcd_top));
     6f8:	8d ed       	ldi	r24, 0xDD	; 221
     6fa:	96 e0       	ldi	r25, 0x06	; 6
     6fc:	60 e2       	ldi	r22, 0x20	; 32
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	48 e2       	ldi	r20, 0x28	; 40
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <memset>
	memset((void *) lcd_bottom, 0x20, sizeof(lcd_bottom));
     708:	8f e9       	ldi	r24, 0x9F	; 159
     70a:	96 e0       	ldi	r25, 0x06	; 6
     70c:	60 e2       	ldi	r22, 0x20	; 32
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	48 e2       	ldi	r20, 0x28	; 40
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <memset>

	lcd_top[15] = 'C';
     718:	83 e4       	ldi	r24, 0x43	; 67
     71a:	80 93 ec 06 	sts	0x06EC, r24
	lcd_bottom[15] = 'C';
     71e:	80 93 ae 06 	sts	0x06AE, r24

	lcd_index = 0;
     722:	10 92 19 07 	sts	0x0719, r1
	uart_bit = 0;
     726:	10 92 9e 06 	sts	0x069E, r1
	
	remote_num = 0;
     72a:	10 92 0a 07 	sts	0x070A, r1
	clock_count = 0;
     72e:	10 92 09 07 	sts	0x0709, r1
	lcd_count = 0;
     732:	10 92 07 07 	sts	0x0707, r1
	play_alarm = 0;
     736:	10 92 06 07 	sts	0x0706, r1
	software_pwm = 0;
     73a:	10 92 08 07 	sts	0x0708, r1

	mode = MODE_DEFAULT;
     73e:	10 92 05 07 	sts	0x0705, r1
}
     742:	08 95       	ret

00000744 <init_peripherals>:

void init_peripherals()
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
	/* init the clock */
	init_clock_timer();
     748:	0e 94 19 0a 	call	0x1432	; 0x1432 <init_clock_timer>
	set_time(21, 37);
     74c:	85 e1       	ldi	r24, 0x15	; 21
     74e:	65 e2       	ldi	r22, 0x25	; 37
     750:	0e 94 35 0a 	call	0x146a	; 0x146a <set_time>

	enable_leds();
     754:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enable_leds>
	enable_dimmer();
     758:	0e 94 cf 05 	call	0xb9e	; 0xb9e <enable_dimmer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	99 ef       	ldi	r25, 0xF9	; 249
     760:	a0 e0       	ldi	r26, 0x00	; 0
     762:	81 50       	subi	r24, 0x01	; 1
     764:	90 40       	sbci	r25, 0x00	; 0
     766:	a0 40       	sbci	r26, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <init_peripherals+0x1e>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <init_peripherals+0x28>
     76c:	00 00       	nop
 * controls the frequency at which the buttons are
 * checked for its pressed state.
 ******************************************************/
void init_ui_timer()
{
	TIMSK |= (1 << OCIE1B) | (1 << TOIE2);
     76e:	87 b7       	in	r24, 0x37	; 55
     770:	88 64       	ori	r24, 0x48	; 72
     772:	87 bf       	out	0x37, r24	; 55
	
	TCCR1A = 0x00;
     774:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS11);
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
     77a:	10 92 7a 00 	sts	0x007A, r1

	OCR1A = 10;
     77e:	8a e0       	ldi	r24, 0x0A	; 10
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	9b bd       	out	0x2b, r25	; 43
     784:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 250;
     786:	8a ef       	ldi	r24, 0xFA	; 250
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	99 bd       	out	0x29, r25	; 41
     78c:	88 bd       	out	0x28, r24	; 40
}

void init_volume_control()
{
	TCCR3A = (1 << WGM30) | (1 << COM3A1);
     78e:	81 e8       	ldi	r24, 0x81	; 129
     790:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1 << WGM32) | (1 << CS31);
     794:	8a e0       	ldi	r24, 0x0A	; 10
     796:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = 0x00;
     79a:	10 92 8c 00 	sts	0x008C, r1

	VOLUME = 50;
     79e:	82 e3       	ldi	r24, 0x32	; 50
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 87 00 	sts	0x0087, r25
     7a6:	80 93 86 00 	sts	0x0086, r24
	_delay_ms(20);

	init_ui_timer(); // init the timer to check for the button states
	init_volume_control();

	uart_init();
     7aa:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <uart_init>
	enable_rx_interrupts();
     7ae:	0e 94 67 0c 	call	0x18ce	; 0x18ce <enable_rx_interrupts>
	
	enable_graph(); // enable the bar graph
     7b2:	0e 94 2b 07 	call	0xe56	; 0xe56 <enable_graph>
	update_graph(OFF); // make sure the bar graph is off
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 30 07 	call	0xe60	; 0xe60 <update_graph>

	enable_lcd();
     7bc:	0e 94 42 08 	call	0x1084	; 0x1084 <enable_lcd>
	cursor_home();
     7c0:	0e 94 af 07 	call	0xf5e	; 0xf5e <cursor_home>
	clear_display();
     7c4:	0e 94 9a 07 	call	0xf34	; 0xf34 <clear_display>

	init_thermo_sensors();
     7c8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <init_thermo_sensors>

	set_lcd_alarm_state(ALARM_DISABLED);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 92 01 	call	0x324	; 0x324 <set_lcd_alarm_state>

	init_display_struct(&output); // init the struct the holds the display state
     7d2:	c8 ec       	ldi	r28, 0xC8	; 200
     7d4:	d6 e0       	ldi	r29, 0x06	; 6
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 ed 05 	call	0xbda	; 0xbda <init_display_struct>
	set_zero_filled(&output); // set the military time display
     7dc:	ce 01       	movw	r24, r28
     7de:	0e 94 1b 06 	call	0xc36	; 0xc36 <set_zero_filled>

	enable_encoders(); // enable the encoders
     7e2:	0e 94 95 07 	call	0xf2a	; 0xf2a <enable_encoders>
	init_encoder_struct(&encoders);// init the encoder data struct
     7e6:	81 ed       	ldi	r24, 0xD1	; 209
     7e8:	96 e0       	ldi	r25, 0x06	; 6
     7ea:	0e 94 3e 07 	call	0xe7c	; 0xe7c <init_encoder_struct>
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <toggle_pwm>:

void toggle_pwm()
{
	software_pwm++;
     7f4:	80 91 08 07 	lds	r24, 0x0708
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
     7fa:	80 93 08 07 	sts	0x0708, r24
	if (software_pwm == 3 && seconds_state) {
     7fe:	80 91 08 07 	lds	r24, 0x0708
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	09 f0       	breq	.+2      	; 0x808 <toggle_pwm+0x14>
     806:	08 95       	ret
     808:	80 91 9d 06 	lds	r24, 0x069D
     80c:	88 23       	and	r24, r24
     80e:	d9 f3       	breq	.-10     	; 0x806 <toggle_pwm+0x12>
		TOGGLEBIT(PORTE, PE4);
     810:	83 b1       	in	r24, 0x03	; 3
     812:	90 e1       	ldi	r25, 0x10	; 16
     814:	89 27       	eor	r24, r25
     816:	83 b9       	out	0x03, r24	; 3
		software_pwm = 0;
     818:	10 92 08 07 	sts	0x0708, r1
     81c:	08 95       	ret

0000081e <__vector_18>:
	}
}

ISR(USART0_RX_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	8f 93       	push	r24
	remote_num = UDR0;
     82a:	8c b1       	in	r24, 0x0c	; 12
     82c:	80 93 0a 07 	sts	0x070A, r24
}
     830:	8f 91       	pop	r24
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <__vector_10>:

ISR(TIMER2_OVF_vect)
{
     83c:	1f 92       	push	r1
     83e:	0f 92       	push	r0
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	0f 92       	push	r0
     844:	0b b6       	in	r0, 0x3b	; 59
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
	refresh_encoders();
     862:	0e 94 97 02 	call	0x52e	; 0x52e <refresh_encoders>
}
     866:	ff 91       	pop	r31
     868:	ef 91       	pop	r30
     86a:	bf 91       	pop	r27
     86c:	af 91       	pop	r26
     86e:	9f 91       	pop	r25
     870:	8f 91       	pop	r24
     872:	7f 91       	pop	r23
     874:	6f 91       	pop	r22
     876:	5f 91       	pop	r21
     878:	4f 91       	pop	r20
     87a:	3f 91       	pop	r19
     87c:	2f 91       	pop	r18
     87e:	0f 90       	pop	r0
     880:	0b be       	out	0x3b, r0	; 59
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63
     886:	0f 90       	pop	r0
     888:	1f 90       	pop	r1
     88a:	18 95       	reti

0000088c <start_alarm>:

void start_alarm()
{
	switch (play_alarm) {
     88c:	80 91 06 07 	lds	r24, 0x0706
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	49 f0       	breq	.+18     	; 0x8a6 <start_alarm+0x1a>
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	09 f0       	breq	.+2      	; 0x89a <start_alarm+0xe>
     898:	08 95       	ret
		unmute = TRUE;

		break;

	case ALARM_ENABLED_TONE:
		mute = TRUE;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 c7 06 	sts	0x06C7, r24
		
		toggle_pwm();
     8a0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <toggle_pwm>
     8a4:	08 95       	ret

void start_alarm()
{
	switch (play_alarm) {
	case ALARM_ENABLED_RADIO:
		unmute = TRUE;
     8a6:	80 93 d0 06 	sts	0x06D0, r24

		break;
     8aa:	08 95       	ret

000008ac <__vector_13>:
		break;
	}
}

ISR(TIMER1_COMPB_vect)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	0b b6       	in	r0, 0x3b	; 59
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
	TCNT1 = 0;
     8d2:	1d bc       	out	0x2d, r1	; 45
     8d4:	1c bc       	out	0x2c, r1	; 44
		
	start_alarm();
     8d6:	0e 94 46 04 	call	0x88c	; 0x88c <start_alarm>
	
	lcd_count++;
     8da:	80 91 07 07 	lds	r24, 0x0707
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	80 93 07 07 	sts	0x0707, r24
	if (lcd_count == 3) {
     8e4:	80 91 07 07 	lds	r24, 0x0707
     8e8:	83 30       	cpi	r24, 0x03	; 3
     8ea:	a9 f0       	breq	.+42     	; 0x916 <__vector_13+0x6a>
		lcd_count = 0;

		refresh_lcd_display();
	}

	refresh_led_display();
     8ec:	0e 94 07 03 	call	0x60e	; 0x60e <refresh_led_display>
}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0b be       	out	0x3b, r0	; 59
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti
		
	start_alarm();
	
	lcd_count++;
	if (lcd_count == 3) {
		lcd_count = 0;
     916:	10 92 07 07 	sts	0x0707, r1

		refresh_lcd_display();
     91a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <refresh_lcd_display>
     91e:	e6 cf       	rjmp	.-52     	; 0x8ec <__vector_13+0x40>

00000920 <__vector_16>:
 *
 * The timer is initialized by the init_clock_timer
 * routine
 ******************************************************/
ISR(TIMER0_OVF_vect)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	0b b6       	in	r0, 0x3b	; 59
     92a:	0f 92       	push	r0
     92c:	11 24       	eor	r1, r1
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
	clock_count++;
     946:	80 91 09 07 	lds	r24, 0x0709
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 09 07 	sts	0x0709, r24
	if (clock_count == 128) {
     950:	80 91 09 07 	lds	r24, 0x0709
     954:	80 38       	cpi	r24, 0x80	; 128
     956:	e1 f0       	breq	.+56     	; 0x990 <__vector_16+0x70>
			play_alarm = alm_state;

		clock_count = 0;
	}

	enable_buttons(); // enable the buttons and disable the display
     958:	0e 94 c0 06 	call	0xd80	; 0xd80 <enable_buttons>
	change_mode(poll_buttons(PINA)); // get the button state
     95c:	89 b3       	in	r24, 0x19	; 25
     95e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <poll_buttons>
     962:	0e 94 25 02 	call	0x44a	; 0x44a <change_mode>
	enable_leds(); // re-enable the leds
     966:	0e 94 c7 05 	call	0xb8e	; 0xb8e <enable_leds>
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	0f 90       	pop	r0
     984:	0b be       	out	0x3b, r0	; 59
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti
 ******************************************************/
ISR(TIMER0_OVF_vect)
{
	clock_count++;
	if (clock_count == 128) {
		tick_seconds();
     990:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <tick_seconds>

		uint8_t alm_state = is_alarm_time();
     994:	0e 94 a1 0a 	call	0x1542	; 0x1542 <is_alarm_time>
		if (alm_state)
     998:	88 23       	and	r24, r24
     99a:	11 f0       	breq	.+4      	; 0x9a0 <__vector_16+0x80>
			play_alarm = alm_state;
     99c:	80 93 06 07 	sts	0x0706, r24

		clock_count = 0;
     9a0:	10 92 09 07 	sts	0x0709, r1
     9a4:	d9 cf       	rjmp	.-78     	; 0x958 <__vector_16+0x38>

000009a6 <main>:
	change_mode(poll_buttons(PINA)); // get the button state
	enable_leds(); // re-enable the leds
}

int main()
{
     9a6:	8f 92       	push	r8
     9a8:	9f 92       	push	r9
     9aa:	af 92       	push	r10
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	6b 97       	sbiw	r28, 0x1b	; 27
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x02;
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xF0;   //set port bits 4-7 B as outputs
     9d2:	80 ef       	ldi	r24, 0xF0	; 240
     9d4:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;   //set port D all inputs 
     9d6:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xFF;
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	82 b9       	out	0x02, r24	; 2
	
	PORTD = 0xFF;   //set port D all pullups 
     9dc:	82 bb       	out	0x12, r24	; 18

	init_globals();
     9de:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init_globals>

	sei();
     9e2:	78 94       	sei
	enable_radio();
     9e4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <enable_radio>
	cli();
     9e8:	f8 94       	cli

	init_peripherals();
     9ea:	0e 94 a2 03 	call	0x744	; 0x744 <init_peripherals>

	update_brightness();
     9ee:	0e 94 db 05 	call	0xbb6	; 0xbb6 <update_brightness>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	99 ef       	ldi	r25, 0xF9	; 249
     9f6:	a0 e0       	ldi	r26, 0x00	; 0
     9f8:	81 50       	subi	r24, 0x01	; 1
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	a0 40       	sbci	r26, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <main+0x52>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <main+0x5c>
     a02:	00 00       	nop
	_delay_ms(20);

	sei(); 
     a04:	78 94       	sei
	prepare_local_read(1);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 ab 0b 	call	0x1756	; 0x1756 <prepare_local_read>
     a0c:	8e 01       	movw	r16, r28
     a0e:	0f 5f       	subi	r16, 0xFF	; 255
     a10:	1f 4f       	sbci	r17, 0xFF	; 255
     a12:	42 e1       	ldi	r20, 0x12	; 18
     a14:	e4 2e       	mov	r14, r20
     a16:	47 e0       	ldi	r20, 0x07	; 7
     a18:	f4 2e       	mov	r15, r20
     a1a:	3b e0       	ldi	r19, 0x0B	; 11
     a1c:	c3 2e       	mov	r12, r19
     a1e:	37 e0       	ldi	r19, 0x07	; 7
     a20:	d3 2e       	mov	r13, r19
     a22:	26 e0       	ldi	r18, 0x06	; 6
     a24:	a2 2e       	mov	r10, r18
     a26:	b1 2c       	mov	r11, r1
     a28:	ac 0e       	add	r10, r28
     a2a:	bd 1e       	adc	r11, r29
     a2c:	91 e1       	ldi	r25, 0x11	; 17
     a2e:	89 2e       	mov	r8, r25
     a30:	91 2c       	mov	r9, r1
     a32:	8c 0e       	add	r8, r28
     a34:	9d 1e       	adc	r9, r29
	char alarm_time[11];
	char signal_strength[11];
	
	struct temperature temp_data;
	while (1) {
		local_thermo_read(0);
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 bf 0b 	call	0x177e	; 0x177e <local_thermo_read>
     a3c:	af e9       	ldi	r26, 0x9F	; 159
     a3e:	bf e0       	ldi	r27, 0x0F	; 15
     a40:	11 97       	sbiw	r26, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <main+0x9a>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <main+0xa0>
     a46:	00 00       	nop
		_delay_ms(1);
		
		get_local_temp(&temp_data);
     a48:	c8 01       	movw	r24, r16
     a4a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <get_local_temp>
		
		itoa(temp_data.celsius, local_temp, 10);
     a4e:	8c 81       	ldd	r24, Y+4	; 0x04
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	62 e1       	ldi	r22, 0x12	; 18
     a54:	77 e0       	ldi	r23, 0x07	; 7
     a56:	4a e0       	ldi	r20, 0x0A	; 10
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <itoa>
		update_lcd_array(lcd_bottom, local_temp, 12, strlen(local_temp));
     a5e:	f7 01       	movw	r30, r14
     a60:	01 90       	ld	r0, Z+
     a62:	00 20       	and	r0, r0
     a64:	e9 f7       	brne	.-6      	; 0xa60 <main+0xba>
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	e2 51       	subi	r30, 0x12	; 18
     a6a:	f7 40       	sbci	r31, 0x07	; 7
     a6c:	3e 2f       	mov	r19, r30
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     a6e:	ee 23       	and	r30, r30
     a70:	69 f0       	breq	.+26     	; 0xa8c <main+0xe6>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
		line[i+offset] = msg[i];
     a76:	fc 01       	movw	r30, r24
     a78:	ee 5e       	subi	r30, 0xEE	; 238
     a7a:	f8 4f       	sbci	r31, 0xF8	; 248
     a7c:	20 81       	ld	r18, Z
     a7e:	fc 01       	movw	r30, r24
     a80:	e5 55       	subi	r30, 0x55	; 85
     a82:	f9 4f       	sbci	r31, 0xF9	; 249
     a84:	20 83       	st	Z, r18
     a86:	01 96       	adiw	r24, 0x01	; 1
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     a88:	83 17       	cp	r24, r19
     a8a:	a8 f3       	brcs	.-22     	; 0xa76 <main+0xd0>
		get_local_temp(&temp_data);
		
		itoa(temp_data.celsius, local_temp, 10);
		update_lcd_array(lcd_bottom, local_temp, 12, strlen(local_temp));
		
		itoa(remote_num, remote_temp, 10);
     a8c:	80 91 0a 07 	lds	r24, 0x070A
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	6b e0       	ldi	r22, 0x0B	; 11
     a94:	77 e0       	ldi	r23, 0x07	; 7
     a96:	4a e0       	ldi	r20, 0x0A	; 10
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <itoa>
		update_lcd_array(lcd_top, remote_temp, 12, strlen(remote_temp));
     a9e:	f6 01       	movw	r30, r12
     aa0:	01 90       	ld	r0, Z+
     aa2:	00 20       	and	r0, r0
     aa4:	e9 f7       	brne	.-6      	; 0xaa0 <main+0xfa>
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	eb 50       	subi	r30, 0x0B	; 11
     aaa:	f7 40       	sbci	r31, 0x07	; 7
     aac:	3e 2f       	mov	r19, r30
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     aae:	ee 23       	and	r30, r30
     ab0:	69 f0       	breq	.+26     	; 0xacc <main+0x126>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
		line[i+offset] = msg[i];
     ab6:	fc 01       	movw	r30, r24
     ab8:	e5 5f       	subi	r30, 0xF5	; 245
     aba:	f8 4f       	sbci	r31, 0xF8	; 248
     abc:	20 81       	ld	r18, Z
     abe:	fc 01       	movw	r30, r24
     ac0:	e7 51       	subi	r30, 0x17	; 23
     ac2:	f9 4f       	sbci	r31, 0xF9	; 249
     ac4:	20 83       	st	Z, r18
     ac6:	01 96       	adiw	r24, 0x01	; 1
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     ac8:	83 17       	cp	r24, r19
     aca:	a8 f3       	brcs	.-22     	; 0xab6 <main+0x110>
		update_lcd_array(lcd_bottom, local_temp, 12, strlen(local_temp));
		
		itoa(remote_num, remote_temp, 10);
		update_lcd_array(lcd_top, remote_temp, 12, strlen(remote_temp));

		if (mode == MODE_DEFAULT) {
     acc:	80 91 05 07 	lds	r24, 0x0705
     ad0:	88 23       	and	r24, r24
     ad2:	99 f0       	breq	.+38     	; 0xafa <main+0x154>
			get_alarm_string(alarm_time);
			update_lcd_array(lcd_bottom, alarm_time, 0, MODE_MSG_LENGTH);
		}

		if (mode == MODE_TUNE_RADIO) {
     ad4:	80 91 05 07 	lds	r24, 0x0705
     ad8:	86 30       	cpi	r24, 0x06	; 6
     ada:	11 f1       	breq	.+68     	; 0xb20 <main+0x17a>

			get_signal_strength(signal_strength);
			update_lcd_array(lcd_bottom, signal_strength, 0, MODE_MSG_LENGTH);
		}

		if (mute) {
     adc:	80 91 c7 06 	lds	r24, 0x06C7
     ae0:	88 23       	and	r24, r24
     ae2:	d1 f5       	brne	.+116    	; 0xb58 <main+0x1b2>

			_delay_ms(4);
			mute = FALSE;
		}

		if (unmute) {
     ae4:	80 91 d0 06 	lds	r24, 0x06D0
     ae8:	88 23       	and	r24, r24
     aea:	09 f0       	breq	.+2      	; 0xaee <main+0x148>
     aec:	45 c0       	rjmp	.+138    	; 0xb78 <main+0x1d2>

			_delay_ms(4);
			unmute = FALSE;
		}
		
		fm_tune_freq(0);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 8f 0c 	call	0x191e	; 0x191e <fm_tune_freq>
		update_brightness();
     af4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <update_brightness>
	}
     af8:	9e cf       	rjmp	.-196    	; 0xa36 <main+0x90>
		
		itoa(remote_num, remote_temp, 10);
		update_lcd_array(lcd_top, remote_temp, 12, strlen(remote_temp));

		if (mode == MODE_DEFAULT) {
			get_alarm_string(alarm_time);
     afa:	c5 01       	movw	r24, r10
     afc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <get_alarm_string>
     b00:	f5 01       	movw	r30, r10
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
		line[i+offset] = msg[i];
     b06:	21 91       	ld	r18, Z+
     b08:	dc 01       	movw	r26, r24
     b0a:	a1 56       	subi	r26, 0x61	; 97
     b0c:	b9 4f       	sbci	r27, 0xF9	; 249
     b0e:	2c 93       	st	X, r18
     b10:	01 96       	adiw	r24, 0x01	; 1
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     b12:	8a 30       	cpi	r24, 0x0A	; 10
     b14:	91 05       	cpc	r25, r1
     b16:	b9 f7       	brne	.-18     	; 0xb06 <main+0x160>
		if (mode == MODE_DEFAULT) {
			get_alarm_string(alarm_time);
			update_lcd_array(lcd_bottom, alarm_time, 0, MODE_MSG_LENGTH);
		}

		if (mode == MODE_TUNE_RADIO) {
     b18:	80 91 05 07 	lds	r24, 0x0705
     b1c:	86 30       	cpi	r24, 0x06	; 6
     b1e:	f1 f6       	brne	.-68     	; 0xadc <main+0x136>
			fm_rsq_status(0);
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <fm_rsq_status>
     b26:	8f e3       	ldi	r24, 0x3F	; 63
     b28:	9f e1       	ldi	r25, 0x1F	; 31
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <main+0x184>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0x18a>
     b30:	00 00       	nop
			_delay_ms(2);

			get_signal_strength(signal_strength);
     b32:	c4 01       	movw	r24, r8
     b34:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <get_signal_strength>
     b38:	f4 01       	movw	r30, r8
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
		line[i+offset] = msg[i];
     b3e:	21 91       	ld	r18, Z+
     b40:	dc 01       	movw	r26, r24
     b42:	a1 56       	subi	r26, 0x61	; 97
     b44:	b9 4f       	sbci	r27, 0xF9	; 249
     b46:	2c 93       	st	X, r18
     b48:	01 96       	adiw	r24, 0x01	; 1
}

void update_lcd_array(volatile char line[LCD_LINE_LENGTH], char *msg, uint8_t offset, uint8_t length)
{
	uint8_t i;
	for (i = 0; i < length; i++)
     b4a:	8a 30       	cpi	r24, 0x0A	; 10
     b4c:	91 05       	cpc	r25, r1
     b4e:	b9 f7       	brne	.-18     	; 0xb3e <main+0x198>

			get_signal_strength(signal_strength);
			update_lcd_array(lcd_bottom, signal_strength, 0, MODE_MSG_LENGTH);
		}

		if (mute) {
     b50:	80 91 c7 06 	lds	r24, 0x06C7
     b54:	88 23       	and	r24, r24
     b56:	31 f2       	breq	.-116    	; 0xae4 <main+0x13e>
			mute_radio(0);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <mute_radio>
     b5e:	af e7       	ldi	r26, 0x7F	; 127
     b60:	be e3       	ldi	r27, 0x3E	; 62
     b62:	11 97       	sbiw	r26, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <main+0x1bc>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <main+0x1c2>
     b68:	00 00       	nop

			_delay_ms(4);
			mute = FALSE;
     b6a:	10 92 c7 06 	sts	0x06C7, r1
		}

		if (unmute) {
     b6e:	80 91 d0 06 	lds	r24, 0x06D0
     b72:	88 23       	and	r24, r24
     b74:	09 f4       	brne	.+2      	; 0xb78 <main+0x1d2>
     b76:	bb cf       	rjmp	.-138    	; 0xaee <main+0x148>
			unmute_radio();
     b78:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <unmute_radio>
     b7c:	8f e7       	ldi	r24, 0x7F	; 127
     b7e:	9e e3       	ldi	r25, 0x3E	; 62
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <main+0x1da>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <main+0x1e0>
     b86:	00 00       	nop

			_delay_ms(4);
			unmute = FALSE;
     b88:	10 92 d0 06 	sts	0x06D0, r1
     b8c:	b0 cf       	rjmp	.-160    	; 0xaee <main+0x148>

00000b8e <enable_leds>:
							 SIX, SEVEN, EIGHT, NINE, OFF };

void enable_leds()
{
	// disable the tristate buffer without enabling a segment
	PORTB &= ~(1 << PB4);
     b8e:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1 << PB6) | (1 << PB5);
     b90:	88 b3       	in	r24, 0x18	; 24
     b92:	80 66       	ori	r24, 0x60	; 96
     b94:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; // make PORTA all outputs
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
     b9a:	8b bb       	out	0x1b, r24	; 27
}
     b9c:	08 95       	ret

00000b9e <enable_dimmer>:

void enable_dimmer()
{
	enable_adc();
     b9e:	0e 94 de 08 	call	0x11bc	; 0x11bc <enable_adc>

	TCCR2 = (1 << WGM20) | (1 << WGM21) |
     ba2:	8a e7       	ldi	r24, 0x7A	; 122
     ba4:	85 bd       	out	0x25, r24	; 37
		(1 << COM21) | (1 << COM20) | 
		(1 << CS21);

	OCR2 = get_adc_adjusted(poll_adc());
     ba6:	0e 94 1d 09 	call	0x123a	; 0x123a <poll_adc>
     baa:	0e 94 2d 09 	call	0x125a	; 0x125a <get_adc_adjusted>
     bae:	83 bd       	out	0x23, r24	; 35
	
	start_adc();
     bb0:	0e 94 1b 09 	call	0x1236	; 0x1236 <start_adc>
}
     bb4:	08 95       	ret

00000bb6 <update_brightness>:

void update_brightness()
{
	if (is_adc_running())
     bb6:	0e 94 25 09 	call	0x124a	; 0x124a <is_adc_running>
     bba:	81 11       	cpse	r24, r1
     bbc:	08 95       	ret
		return;

	SETBIT(ADCSRA, ADIF);
     bbe:	34 9a       	sbi	0x06, 4	; 6
	OCR2 = get_adc_adjusted(get_adc());
     bc0:	0e 94 29 09 	call	0x1252	; 0x1252 <get_adc>
     bc4:	0e 94 2d 09 	call	0x125a	; 0x125a <get_adc_adjusted>
     bc8:	83 bd       	out	0x23, r24	; 35

	start_adc();
     bca:	0e 94 1b 09 	call	0x1236	; 0x1236 <start_adc>
     bce:	08 95       	ret

00000bd0 <disable_leds>:
}

void disable_leds()
{
	PORTB &= ~(1 << PB4);
     bd0:	c4 98       	cbi	0x18, 4	; 24
    PORTB |= (1 << PB6) | (1 << PB5);
     bd2:	88 b3       	in	r24, 0x18	; 24
     bd4:	80 66       	ori	r24, 0x60	; 96
     bd6:	88 bb       	out	0x18, r24	; 24
}
     bd8:	08 95       	ret

00000bda <init_display_struct>:

void init_display_struct(volatile struct display *output)
{
     bda:	fc 01       	movw	r30, r24
	output->ones = 0;
     bdc:	10 82       	st	Z, r1
	output->tens = 0;
     bde:	11 82       	std	Z+1, r1	; 0x01
	output->hundreds = 0;
     be0:	12 82       	std	Z+2, r1	; 0x02
	output->thousands = 0;
     be2:	13 82       	std	Z+3, r1	; 0x03

	output->colon = COLON_ONLY;
     be4:	8c ef       	ldi	r24, 0xFC	; 252
     be6:	84 83       	std	Z+4, r24	; 0x04
	output->mode = ZERO_BLANK;
     be8:	15 82       	std	Z+5, r1	; 0x05
	output->decimal = FALSE;
     bea:	17 82       	std	Z+7, r1	; 0x07
	output->cycle = 0;
     bec:	16 82       	std	Z+6, r1	; 0x06
}
     bee:	08 95       	ret

00000bf0 <update_colon>:

void update_colon(volatile struct display *output, uint8_t off, uint8_t all)
{
	if (!off) {
     bf0:	66 23       	and	r22, r22
     bf2:	31 f4       	brne	.+12     	; 0xc00 <update_colon+0x10>
		if (all)
     bf4:	44 23       	and	r20, r20
     bf6:	51 f0       	breq	.+20     	; 0xc0c <update_colon+0x1c>
			output->colon = COLON_ALL;
     bf8:	28 ef       	ldi	r18, 0xF8	; 248
     bfa:	fc 01       	movw	r30, r24
     bfc:	24 83       	std	Z+4, r18	; 0x04
     bfe:	08 95       	ret
		else
			output->colon = COLON_ONLY;
	} else {
		if (all)
     c00:	44 23       	and	r20, r20
     c02:	41 f4       	brne	.+16     	; 0xc14 <update_colon+0x24>
			output->colon = DOT_ONLY;
		else
			output->colon = OFF;
     c04:	2f ef       	ldi	r18, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	24 83       	std	Z+4, r18	; 0x04
     c0a:	08 95       	ret
{
	if (!off) {
		if (all)
			output->colon = COLON_ALL;
		else
			output->colon = COLON_ONLY;
     c0c:	2c ef       	ldi	r18, 0xFC	; 252
     c0e:	fc 01       	movw	r30, r24
     c10:	24 83       	std	Z+4, r18	; 0x04
     c12:	08 95       	ret
	} else {
		if (all)
			output->colon = DOT_ONLY;
     c14:	2b ef       	ldi	r18, 0xFB	; 251
     c16:	fc 01       	movw	r30, r24
     c18:	24 83       	std	Z+4, r18	; 0x04
     c1a:	08 95       	ret

00000c1c <set_decimal>:
	}
}

void set_decimal(volatile struct display *output, uint8_t boolean)
{
	output->decimal = boolean;
     c1c:	fc 01       	movw	r30, r24
     c1e:	67 83       	std	Z+7, r22	; 0x07
}
     c20:	08 95       	ret

00000c22 <toggle_dot>:

void toggle_dot(volatile struct display *output)
{
     c22:	fc 01       	movw	r30, r24
	output->colon ^= 0x04;
     c24:	84 81       	ldd	r24, Z+4	; 0x04
     c26:	94 e0       	ldi	r25, 0x04	; 4
     c28:	89 27       	eor	r24, r25
     c2a:	84 83       	std	Z+4, r24	; 0x04
}
     c2c:	08 95       	ret

00000c2e <set_colon>:

void set_colon(volatile struct display *output)
{
	PORTA = output->colon;
     c2e:	fc 01       	movw	r30, r24
     c30:	84 81       	ldd	r24, Z+4	; 0x04
     c32:	8b bb       	out	0x1b, r24	; 27
}
     c34:	08 95       	ret

00000c36 <set_zero_filled>:

void set_zero_filled(volatile struct display *output)
{
	output->mode = ZERO_FILLED;
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	fc 01       	movw	r30, r24
     c3a:	25 83       	std	Z+5, r18	; 0x05
}
     c3c:	08 95       	ret

00000c3e <set_zero_blanked>:

void set_zero_blanked(volatile struct display *output)
{
	output->mode = ZERO_BLANK;
     c3e:	fc 01       	movw	r30, r24
     c40:	15 82       	std	Z+5, r1	; 0x05
}
     c42:	08 95       	ret

00000c44 <decode_number>:

void decode_number(volatile struct display *output, uint16_t number)
{
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	fc 01       	movw	r30, r24
     c4e:	9b 01       	movw	r18, r22
	output->ones = (number%10);
     c50:	ca e0       	ldi	r28, 0x0A	; 10
     c52:	d0 e0       	ldi	r29, 0x00	; 0
     c54:	cb 01       	movw	r24, r22
     c56:	be 01       	movw	r22, r28
     c58:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
     c5c:	80 83       	st	Z, r24
	output->tens = (number%100)/10;
     c5e:	04 e6       	ldi	r16, 0x64	; 100
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	c9 01       	movw	r24, r18
     c64:	b8 01       	movw	r22, r16
     c66:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
     c6a:	be 01       	movw	r22, r28
     c6c:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
     c70:	61 83       	std	Z+1, r22	; 0x01
	output->hundreds = (number%1000)/100;
     c72:	c9 01       	movw	r24, r18
     c74:	68 ee       	ldi	r22, 0xE8	; 232
     c76:	73 e0       	ldi	r23, 0x03	; 3
     c78:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
     c7c:	26 2f       	mov	r18, r22
     c7e:	b8 01       	movw	r22, r16
     c80:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
     c84:	62 83       	std	Z+2, r22	; 0x02
	output->thousands = number/1000;
     c86:	23 83       	std	Z+3, r18	; 0x03

	if (output->mode == ZERO_FILLED)
     c88:	85 81       	ldd	r24, Z+5	; 0x05
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	69 f0       	breq	.+26     	; 0xca8 <decode_number+0x64>
		return;

	if (output->thousands != 0)
     c8e:	83 81       	ldd	r24, Z+3	; 0x03
     c90:	88 23       	and	r24, r24
     c92:	51 f4       	brne	.+20     	; 0xca8 <decode_number+0x64>
		return;

	output->thousands = BLANK; // turn of digit 4 if thousands is 0
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	83 83       	std	Z+3, r24	; 0x03
	if (output->hundreds != 0)
     c98:	92 81       	ldd	r25, Z+2	; 0x02
     c9a:	99 23       	and	r25, r25
     c9c:	29 f4       	brne	.+10     	; 0xca8 <decode_number+0x64>
		return;

	output->hundreds = BLANK; // turn of digit 3 if hundreds is 0
     c9e:	82 83       	std	Z+2, r24	; 0x02
	if (output->tens != 0)
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
     ca2:	99 23       	and	r25, r25
     ca4:	09 f4       	brne	.+2      	; 0xca8 <decode_number+0x64>
		return;

	output->tens = BLANK; // turn of digit 2 if tens is 0
     ca6:	81 83       	std	Z+1, r24	; 0x01
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	08 95       	ret

00000cb2 <enable_segment>:

void enable_segment(uint8_t segment)
{
	switch (segment) {
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	c9 f0       	breq	.+50     	; 0xce8 <enable_segment+0x36>
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	28 f0       	brcs	.+10     	; 0xcc4 <enable_segment+0x12>
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	d1 f0       	breq	.+52     	; 0xcf2 <enable_segment+0x40>
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	71 f0       	breq	.+28     	; 0xcde <enable_segment+0x2c>
     cc2:	08 95       	ret
     cc4:	88 23       	and	r24, r24
     cc6:	39 f0       	breq	.+14     	; 0xcd6 <enable_segment+0x24>
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	d9 f7       	brne	.-10     	; 0xcc2 <enable_segment+0x10>
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
		break;

	case 1: // digit 2 enabled: PORTB = 0b?001????
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
     ccc:	88 b3       	in	r24, 0x18	; 24
     cce:	8f 79       	andi	r24, 0x9F	; 159
     cd0:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB4);
     cd2:	c4 9a       	sbi	0x18, 4	; 24
		break;
     cd4:	08 95       	ret

void enable_segment(uint8_t segment)
{
	switch (segment) {
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
     cd6:	88 b3       	in	r24, 0x18	; 24
     cd8:	8f 78       	andi	r24, 0x8F	; 143
     cda:	88 bb       	out	0x18, r24	; 24
		break;
     cdc:	08 95       	ret
		PORTB &= ~(1 << PB6);
		PORTB |= (1 << PB4) | (1 << PB5);
		break;

	case 4: // digit 4 enabled: PORTB = 0b?100????
		PORTB &= ~(1 << PB4) & ~(1 << PB5);		
     cde:	88 b3       	in	r24, 0x18	; 24
     ce0:	8f 7c       	andi	r24, 0xCF	; 207
     ce2:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB6);
     ce4:	c6 9a       	sbi	0x18, 6	; 24
     ce6:	08 95       	ret
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
		PORTB |= (1 << PB4);
		break;

	case 2: // colons enabled: PORTB = 0b?010????
		PORTB &= ~(1 << PB4) & ~(1 << PB6);
     ce8:	88 b3       	in	r24, 0x18	; 24
     cea:	8f 7a       	andi	r24, 0xAF	; 175
     cec:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB5);
     cee:	c5 9a       	sbi	0x18, 5	; 24
		break;
     cf0:	08 95       	ret

	case 3: // digit 3 enabled: PORTB = 0b?011????
		PORTB &= ~(1 << PB6);
     cf2:	c6 98       	cbi	0x18, 6	; 24
		PORTB |= (1 << PB4) | (1 << PB5);
     cf4:	88 b3       	in	r24, 0x18	; 24
     cf6:	80 63       	ori	r24, 0x30	; 48
     cf8:	88 bb       	out	0x18, r24	; 24
		break;
     cfa:	08 95       	ret

00000cfc <set_digit>:
	}
}

void set_digit(uint8_t digit, uint8_t decimal)
{
	char number = NUMBERS[digit];
     cfc:	e8 2f       	mov	r30, r24
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	e8 5c       	subi	r30, 0xC8	; 200
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	80 81       	ld	r24, Z

	if (decimal)
     d06:	61 11       	cpse	r22, r1
		number &= DECIMAL;
     d08:	8f 77       	andi	r24, 0x7F	; 127
	
	PORTA = number;
     d0a:	8b bb       	out	0x1b, r24	; 27
}
     d0c:	08 95       	ret

00000d0e <update_segment>:
 
void update_segment(volatile struct display *output, uint16_t number)
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
	decode_number(output, number); // get the 4 digits 
     d14:	0e 94 22 06 	call	0xc44	; 0xc44 <decode_number>
	char number = NUMBERS[digit];

	if (decimal)
		number &= DECIMAL;
	
	PORTA = number;
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	8b bb       	out	0x1b, r24	; 27
void update_segment(volatile struct display *output, uint16_t number)
{
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK, 0); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit
     d1c:	8e 81       	ldd	r24, Y+6	; 0x06
     d1e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <enable_segment>

	switch(output->cycle) { // display the digit based on the segment enabled
     d22:	8e 81       	ldd	r24, Y+6	; 0x06
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	39 f1       	breq	.+78     	; 0xd76 <update_segment+0x68>
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	70 f0       	brcs	.+28     	; 0xd48 <update_segment+0x3a>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	31 f1       	breq	.+76     	; 0xd7c <update_segment+0x6e>
     d30:	84 30       	cpi	r24, 0x04	; 4
     d32:	f9 f0       	breq	.+62     	; 0xd72 <update_segment+0x64>
	case 2: set_colon(output);                        break; // colons
	case 3: set_digit(output->hundreds, 0);           break; // hundreds digit
	case 4: set_digit(output->thousands, 0);          break; // thousands digit
	}

	output->cycle++; // go to the next segment
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	8e 83       	std	Y+6, r24	; 0x06
	if (output->cycle > 4)
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
     d3c:	85 30       	cpi	r24, 0x05	; 5
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <update_segment+0x34>
		output->cycle = 0; // go back to the beginning if at the last segment	
     d40:	1e 82       	std	Y+6, r1	; 0x06
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK, 0); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
     d48:	88 23       	and	r24, r24
     d4a:	61 f0       	breq	.+24     	; 0xd64 <update_segment+0x56>
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 f7       	brne	.-28     	; 0xd34 <update_segment+0x26>
	case 0: set_digit(output->ones, 0);               break; // ones digit
	case 1: set_digit(output->tens, output->decimal); break; // tens digit
     d50:	e9 81       	ldd	r30, Y+1	; 0x01
     d52:	9f 81       	ldd	r25, Y+7	; 0x07
	}
}

void set_digit(uint8_t digit, uint8_t decimal)
{
	char number = NUMBERS[digit];
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	e8 5c       	subi	r30, 0xC8	; 200
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	80 81       	ld	r24, Z

	if (decimal)
     d5c:	91 11       	cpse	r25, r1
		number &= DECIMAL;
     d5e:	8f 77       	andi	r24, 0x7F	; 127
	
	PORTA = number;
     d60:	8b bb       	out	0x1b, r24	; 27
	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones, 0);               break; // ones digit
	case 1: set_digit(output->tens, output->decimal); break; // tens digit
	case 2: set_colon(output);                        break; // colons
	case 3: set_digit(output->hundreds, 0);           break; // hundreds digit
	case 4: set_digit(output->thousands, 0);          break; // thousands digit
     d62:	e8 cf       	rjmp	.-48     	; 0xd34 <update_segment+0x26>

	set_digit(BLANK, 0); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones, 0);               break; // ones digit
     d64:	e8 81       	ld	r30, Y
	}
}

void set_digit(uint8_t digit, uint8_t decimal)
{
	char number = NUMBERS[digit];
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	e8 5c       	subi	r30, 0xC8	; 200
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	80 81       	ld	r24, Z

	if (decimal)
		number &= DECIMAL;
	
	PORTA = number;
     d6e:	8b bb       	out	0x1b, r24	; 27
     d70:	e1 cf       	rjmp	.-62     	; 0xd34 <update_segment+0x26>
	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones, 0);               break; // ones digit
	case 1: set_digit(output->tens, output->decimal); break; // tens digit
	case 2: set_colon(output);                        break; // colons
	case 3: set_digit(output->hundreds, 0);           break; // hundreds digit
	case 4: set_digit(output->thousands, 0);          break; // thousands digit
     d72:	eb 81       	ldd	r30, Y+3	; 0x03
     d74:	f8 cf       	rjmp	.-16     	; 0xd66 <update_segment+0x58>
	output->colon ^= 0x04;
}

void set_colon(volatile struct display *output)
{
	PORTA = output->colon;
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	8b bb       	out	0x1b, r24	; 27
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones, 0);               break; // ones digit
	case 1: set_digit(output->tens, output->decimal); break; // tens digit
	case 2: set_colon(output);                        break; // colons
     d7a:	dc cf       	rjmp	.-72     	; 0xd34 <update_segment+0x26>
	case 3: set_digit(output->hundreds, 0);           break; // hundreds digit
     d7c:	ea 81       	ldd	r30, Y+2	; 0x02
     d7e:	f3 cf       	rjmp	.-26     	; 0xd66 <update_segment+0x58>

00000d80 <enable_buttons>:
#define BYTE 8

void enable_buttons()
{
	// disable the segments without enabling the tristate buffer
	PORTB &= ~(1 << PB4);
     d80:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1 << PB6) | (1 << PB5);
     d82:	88 b3       	in	r24, 0x18	; 24
     d84:	80 66       	ori	r24, 0x60	; 96
     d86:	88 bb       	out	0x18, r24	; 24

	DDRA = 0; // change DDRA to accept input
     d88:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // enable internal pullups on PORTA
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d8e:	8a e1       	ldi	r24, 0x1A	; 26
     d90:	8a 95       	dec	r24
     d92:	f1 f7       	brne	.-4      	; 0xd90 <enable_buttons+0x10>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <enable_buttons+0x16>

	_delay_us(5);
	PORTB |= (1 << PB4) | (1 << PB5) | (1 << PB6); // enable the tristate buffer
     d96:	88 b3       	in	r24, 0x18	; 24
     d98:	80 67       	ori	r24, 0x70	; 112
     d9a:	88 bb       	out	0x18, r24	; 24
}
     d9c:	08 95       	ret

00000d9e <debounce_switch>:

uint8_t debounce_switch(uint16_t *state, uint8_t bit)
{
     d9e:	fc 01       	movw	r30, r24
    *state = (*state << 1) | (!bit_is_clear(PINA, bit)) | 0xE000;
     da0:	89 b3       	in	r24, 0x19	; 25
     da2:	20 81       	ld	r18, Z
     da4:	31 81       	ldd	r19, Z+1	; 0x01
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	30 6e       	ori	r19, 0xE0	; 224
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <debounce_switch+0x16>
     db0:	95 95       	asr	r25
     db2:	87 95       	ror	r24
     db4:	6a 95       	dec	r22
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <debounce_switch+0x12>
     db8:	81 70       	andi	r24, 0x01	; 1
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	28 2b       	or	r18, r24
     dbe:	39 2b       	or	r19, r25
     dc0:	31 83       	std	Z+1, r19	; 0x01
     dc2:	20 83       	st	Z, r18
	
    if (*state == 0xF000)
        return 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 ef       	ldi	r25, 0xF0	; 240
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	39 07       	cpc	r19, r25
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <debounce_switch+0x32>
     dce:	80 e0       	ldi	r24, 0x00	; 0

    return 0;
}
     dd0:	08 95       	ret

00000dd2 <poll_buttons>:

char poll_buttons(char reg)
{
	char buttons = 0;
     dd2:	e6 e6       	ldi	r30, 0x66	; 102
     dd4:	f2 e0       	ldi	r31, 0x02	; 2

    return 0;
}

char poll_buttons(char reg)
{
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
	char buttons = 0;
     dda:	80 e0       	ldi	r24, 0x00	; 0
	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
		if (debounce_switch(&state[i], i))
			buttons |= (1 << i);
     ddc:	a1 e0       	ldi	r26, 0x01	; 1
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <poll_buttons+0x1a>
     de2:	6f 5f       	subi	r22, 0xFF	; 255
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
	char buttons = 0;

	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
     de6:	68 30       	cpi	r22, 0x08	; 8
     de8:	71 05       	cpc	r23, r1
     dea:	21 f1       	breq	.+72     	; 0xe34 <poll_buttons+0x62>
	PORTB |= (1 << PB4) | (1 << PB5) | (1 << PB6); // enable the tristate buffer
}

uint8_t debounce_switch(uint16_t *state, uint8_t bit)
{
    *state = (*state << 1) | (!bit_is_clear(PINA, bit)) | 0xE000;
     dec:	49 b3       	in	r20, 0x19	; 25
     dee:	20 81       	ld	r18, Z
     df0:	31 81       	ldd	r19, Z+1	; 0x01
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	30 6e       	ori	r19, 0xE0	; 224
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	06 2e       	mov	r0, r22
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <poll_buttons+0x30>
     dfe:	55 95       	asr	r21
     e00:	47 95       	ror	r20
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <poll_buttons+0x2c>
     e06:	41 70       	andi	r20, 0x01	; 1
     e08:	50 70       	andi	r21, 0x00	; 0
     e0a:	24 2b       	or	r18, r20
     e0c:	35 2b       	or	r19, r21
     e0e:	21 93       	st	Z+, r18
     e10:	31 93       	st	Z+, r19
	
    if (*state == 0xF000)
     e12:	40 ef       	ldi	r20, 0xF0	; 240
     e14:	20 30       	cpi	r18, 0x00	; 0
     e16:	34 07       	cpc	r19, r20
     e18:	21 f7       	brne	.-56     	; 0xde2 <poll_buttons+0x10>
	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
		if (debounce_switch(&state[i], i))
			buttons |= (1 << i);
     e1a:	9d 01       	movw	r18, r26
     e1c:	06 2e       	mov	r0, r22
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <poll_buttons+0x52>
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <poll_buttons+0x4e>
     e28:	82 2b       	or	r24, r18
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
	char buttons = 0;

	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
     e2e:	68 30       	cpi	r22, 0x08	; 8
     e30:	71 05       	cpc	r23, r1
     e32:	e1 f6       	brne	.-72     	; 0xdec <poll_buttons+0x1a>
		if (debounce_switch(&state[i], i))
			buttons |= (1 << i);
	}

	return buttons;
}
     e34:	08 95       	ret

00000e36 <spi_init>:
#include <avr/io.h>
#include "macros.h"

void spi_init()
{
	DDRB |= 0x07;  //set output mode for SS, MOSI, SCLK
     e36:	87 b3       	in	r24, 0x17	; 23
     e38:	87 60       	ori	r24, 0x07	; 7
     e3a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR); //set master mode, clk low on idle, leading edge sample
     e3c:	80 e5       	ldi	r24, 0x50	; 80
     e3e:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);  //set choos
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	8e b9       	out	0x0e, r24	; 14
}
     e44:	08 95       	ret

00000e46 <spi_wait>:

void spi_wait()
{
	while (!ISSET(SPSR, SPIF));
     e46:	77 9b       	sbis	0x0e, 7	; 14
     e48:	fe cf       	rjmp	.-4      	; 0xe46 <spi_wait>
}
     e4a:	08 95       	ret

00000e4c <spi_send>:

char spi_send(char msg)
{
	SPDR = msg; //set SPDR to start the transmission
     e4c:	8f b9       	out	0x0f, r24	; 15

	while (!ISSET(SPSR, SPIF)); // wait until transmission is complete
     e4e:	77 9b       	sbis	0x0e, 7	; 14
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <spi_send+0x2>
	
	return SPDR; // return the byte that was received
     e52:	8f b1       	in	r24, 0x0f	; 15
}
     e54:	08 95       	ret

00000e56 <enable_graph>:
#define STROBE_BIT  PC0
#define STROBE_PORT PORTC

void enable_graph()
{
	DDRC |= 0x01; // set PD0 to an output
     e56:	a0 9a       	sbi	0x14, 0	; 20
	
	CLRBIT(STROBE_PORT, STROBE_BIT); // clear PD0
     e58:	a8 98       	cbi	0x15, 0	; 21
	spi_init(); // initialize the spi interface
     e5a:	0e 94 1b 07 	call	0xe36	; 0xe36 <spi_init>
}
     e5e:	08 95       	ret

00000e60 <update_graph>:

char update_graph(char value)
{
	char result = spi_send(value); // send the given value via spi
     e60:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	strobel(STROBE_PORT, STROBE_BIT); // set PD0 and then clear it
     e64:	a8 9a       	sbi	0x15, 0	; 21
     e66:	a8 98       	cbi	0x15, 0	; 21

	return result; // return the result read from spi
}
     e68:	08 95       	ret

00000e6a <latch_encoders>:
#define STROBE_BIT  PE6
#define STROBE_PORT PORTE

void latch_encoders()
{
	strobeh(STROBE_PORT, STROBE_BIT); // latch the encoder state
     e6a:	1e 98       	cbi	0x03, 6	; 3
     e6c:	1e 9a       	sbi	0x03, 6	; 3
}
     e6e:	08 95       	ret

00000e70 <poll_encoders>:

char poll_encoders()
{
	strobeh(STROBE_PORT, STROBE_BIT); // latch the encoder state
     e70:	1e 98       	cbi	0x03, 6	; 3
     e72:	1e 9a       	sbi	0x03, 6	; 3
	
	return spi_send(0x00); // send garbage in order to receive the state
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
}
     e7a:	08 95       	ret

00000e7c <init_encoder_struct>:

void init_encoder_struct(volatile struct encoder_state *state)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ec 01       	movw	r28, r24
	/* set the current encoder directions to stopped */
	state->left_dir = STOPPED;
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	88 83       	st	Y, r24
	state->right_dir = STOPPED;
     e86:	89 83       	std	Y+1, r24	; 0x01

	/* get the initial value of the encoders in the shift register */
	char encoders = poll_encoders();
     e88:	0e 94 38 07 	call	0xe70	; 0xe70 <poll_encoders>
	state->left_last = LEFT_ENCODER(encoders);
     e8c:	98 2f       	mov	r25, r24
     e8e:	93 70       	andi	r25, 0x03	; 3
     e90:	9a 83       	std	Y+2, r25	; 0x02
	state->right_last = RIGHT_ENCODER(encoders);
     e92:	99 27       	eor	r25, r25
     e94:	87 fd       	sbrc	r24, 7
     e96:	90 95       	com	r25
     e98:	8c 70       	andi	r24, 0x0C	; 12
     e9a:	90 70       	andi	r25, 0x00	; 0
     e9c:	95 95       	asr	r25
     e9e:	87 95       	ror	r24
     ea0:	95 95       	asr	r25
     ea2:	87 95       	ror	r24
     ea4:	8b 83       	std	Y+3, r24	; 0x03
}						 
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <determine_direction>:
				
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
     eac:	86 17       	cp	r24, r22
     eae:	21 f0       	breq	.+8      	; 0xeb8 <determine_direction+0xc>
		return STOPPED; // nothing has changed so it's stopped
	
	if (cur == 0x00 && last == 0x01)
     eb0:	88 23       	and	r24, r24
     eb2:	21 f4       	brne	.+8      	; 0xebc <determine_direction+0x10>
     eb4:	61 30       	cpi	r22, 0x01	; 1
     eb6:	41 f0       	breq	.+16     	; 0xec8 <determine_direction+0x1c>
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
		return FORWARD;

	return STOPPED;
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	08 95       	ret
		return STOPPED; // nothing has changed so it's stopped
	
	if (cur == 0x00 && last == 0x01)
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <determine_direction+0xc>
     ec0:	66 23       	and	r22, r22
     ec2:	d1 f7       	brne	.-12     	; 0xeb8 <determine_direction+0xc>
		return FORWARD;
     ec4:	81 e0       	ldi	r24, 0x01	; 1

	return STOPPED;
}
     ec6:	08 95       	ret
{
	if (cur == last)
		return STOPPED; // nothing has changed so it's stopped
	
	if (cur == 0x00 && last == 0x01)
		return REVERSE;
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	08 95       	ret

00000ecc <get_direction>:

	return STOPPED;
}

void get_direction(volatile struct encoder_state *state, uint8_t encoders)
{
     ecc:	fc 01       	movw	r30, r24
	/* determine the new direction based on the last and latest encoder state */
	state->left_dir = determine_direction(LEFT_ENCODER(encoders), state->left_last);
     ece:	86 2f       	mov	r24, r22
     ed0:	83 70       	andi	r24, 0x03	; 3
     ed2:	92 81       	ldd	r25, Z+2	; 0x02
	state->right_last = RIGHT_ENCODER(encoders);
}						 
				
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
     ed4:	89 17       	cp	r24, r25
     ed6:	21 f0       	breq	.+8      	; 0xee0 <get_direction+0x14>
		return STOPPED; // nothing has changed so it's stopped
	
	if (cur == 0x00 && last == 0x01)
     ed8:	88 23       	and	r24, r24
     eda:	e9 f4       	brne	.+58     	; 0xf16 <get_direction+0x4a>
     edc:	91 30       	cpi	r25, 0x01	; 1
     ede:	09 f1       	breq	.+66     	; 0xf22 <get_direction+0x56>
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
		return FORWARD;

	return STOPPED;
     ee0:	92 e0       	ldi	r25, 0x02	; 2
}

void get_direction(volatile struct encoder_state *state, uint8_t encoders)
{
	/* determine the new direction based on the last and latest encoder state */
	state->left_dir = determine_direction(LEFT_ENCODER(encoders), state->left_last);
     ee2:	90 83       	st	Z, r25
	state->right_dir = determine_direction(RIGHT_ENCODER(encoders), state->right_last);
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	6c 70       	andi	r22, 0x0C	; 12
     ee8:	70 70       	andi	r23, 0x00	; 0
     eea:	75 95       	asr	r23
     eec:	67 95       	ror	r22
     eee:	75 95       	asr	r23
     ef0:	67 95       	ror	r22
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
	state->right_last = RIGHT_ENCODER(encoders);
}						 
				
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
     ef4:	69 17       	cp	r22, r25
     ef6:	31 f0       	breq	.+12     	; 0xf04 <get_direction+0x38>
		return STOPPED; // nothing has changed so it's stopped
	
	if (cur == 0x00 && last == 0x01)
     ef8:	66 23       	and	r22, r22
     efa:	49 f0       	breq	.+18     	; 0xf0e <get_direction+0x42>
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
     efc:	61 30       	cpi	r22, 0x01	; 1
     efe:	11 f4       	brne	.+4      	; 0xf04 <get_direction+0x38>
     f00:	99 23       	and	r25, r25
     f02:	89 f0       	breq	.+34     	; 0xf26 <get_direction+0x5a>
		return FORWARD;

	return STOPPED;
     f04:	92 e0       	ldi	r25, 0x02	; 2

void get_direction(volatile struct encoder_state *state, uint8_t encoders)
{
	/* determine the new direction based on the last and latest encoder state */
	state->left_dir = determine_direction(LEFT_ENCODER(encoders), state->left_last);
	state->right_dir = determine_direction(RIGHT_ENCODER(encoders), state->right_last);
     f06:	91 83       	std	Z+1, r25	; 0x01

	/* log the last encoder state */
	state->left_last = LEFT_ENCODER(encoders);
     f08:	82 83       	std	Z+2, r24	; 0x02
	state->right_last = RIGHT_ENCODER(encoders);
     f0a:	63 83       	std	Z+3, r22	; 0x03
}
     f0c:	08 95       	ret
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
		return STOPPED; // nothing has changed so it's stopped
	
	if (cur == 0x00 && last == 0x01)
     f0e:	91 30       	cpi	r25, 0x01	; 1
     f10:	c9 f7       	brne	.-14     	; 0xf04 <get_direction+0x38>
		return REVERSE;
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	f8 cf       	rjmp	.-16     	; 0xf06 <get_direction+0x3a>

	if (cur == 0x01 && last == 0x00)
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	19 f7       	brne	.-58     	; 0xee0 <get_direction+0x14>
     f1a:	99 23       	and	r25, r25
     f1c:	09 f7       	brne	.-62     	; 0xee0 <get_direction+0x14>
		return FORWARD;
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	e0 cf       	rjmp	.-64     	; 0xee2 <get_direction+0x16>
{
	if (cur == last)
		return STOPPED; // nothing has changed so it's stopped
	
	if (cur == 0x00 && last == 0x01)
		return REVERSE;
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	de cf       	rjmp	.-68     	; 0xee2 <get_direction+0x16>

	if (cur == 0x01 && last == 0x00)
		return FORWARD;
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	ee cf       	rjmp	.-36     	; 0xf06 <get_direction+0x3a>

00000f2a <enable_encoders>:
	state->right_last = RIGHT_ENCODER(encoders);
}

void enable_encoders()
{
	DDRE |= 0x40; // set PE6 to an output
     f2a:	16 9a       	sbi	0x02, 6	; 2
	
	SETBIT(STROBE_PORT, STROBE_BIT); // set PE6
     f2c:	1e 9a       	sbi	0x03, 6	; 3
	spi_init(); // initialize the spi interface
     f2e:	0e 94 1b 07 	call	0xe36	; 0xe36 <spi_init>
}
     f32:	08 95       	ret

00000f34 <clear_display>:

#define NUM_LCD_CHARS 16 //number of chars that the LCD has in a line

void clear_display()
{
	spi_send(0x00);
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0x01);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

	strobel(PORTF, PF3);
     f40:	e2 e6       	ldi	r30, 0x62	; 98
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	88 60       	ori	r24, 0x08	; 8
     f48:	80 83       	st	Z, r24
     f4a:	80 81       	ld	r24, Z
     f4c:	87 7f       	andi	r24, 0xF7	; 247
     f4e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f50:	8f e3       	ldi	r24, 0x3F	; 63
     f52:	9f e1       	ldi	r25, 0x1F	; 31
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <clear_display+0x20>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <clear_display+0x26>
     f5a:	00 00       	nop
	_delay_ms(2);   //obligatory waiting for slow LCD (1.64mS)
}         
     f5c:	08 95       	ret

00000f5e <cursor_home>:

void cursor_home()
{
	spi_send(0x00);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0x02);
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

	strobel(PORTF, PF3);
     f6a:	e2 e6       	ldi	r30, 0x62	; 98
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	80 83       	st	Z, r24
     f74:	80 81       	ld	r24, Z
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	80 83       	st	Z, r24
     f7a:	8f e3       	ldi	r24, 0x3F	; 63
     f7c:	9f e1       	ldi	r25, 0x1F	; 31
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <cursor_home+0x20>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <cursor_home+0x26>
     f84:	00 00       	nop
	_delay_ms(2);   //obligatory waiting for slow LCD (1.64mS)
}         
     f86:	08 95       	ret

00000f88 <home_line2>:
  
void home_line2()
{
	spi_send(0x00);
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0xC0);
     f8e:	80 ec       	ldi	r24, 0xC0	; 192
     f90:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	
	strobel(PORTF, PF3);
     f94:	e2 e6       	ldi	r30, 0x62	; 98
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 60       	ori	r24, 0x08	; 8
     f9c:	80 83       	st	Z, r24
     f9e:	80 81       	ld	r24, Z
     fa0:	87 7f       	andi	r24, 0xF7	; 247
     fa2:	80 83       	st	Z, r24
     fa4:	8f e3       	ldi	r24, 0x3F	; 63
     fa6:	9f e1       	ldi	r25, 0x1F	; 31
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <home_line2+0x20>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <home_line2+0x26>
     fae:	00 00       	nop
	_delay_ms(2);   //obligatory waiting for slow LCD (1.64mS)
}                           
     fb0:	08 95       	ret

00000fb2 <fill_spaces>:
 
void fill_spaces()
{
     fb2:	1f 93       	push	r17
     fb4:	10 e1       	ldi	r17, 0x10	; 16
	uint8_t i;
	for (i = 0; i < NUM_LCD_CHARS; i++){
		spi_send(0x01);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
		spi_send(0x20);
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	  
		strobel(PORTF, PF3);
     fc2:	80 91 62 00 	lds	r24, 0x0062
     fc6:	88 60       	ori	r24, 0x08	; 8
     fc8:	80 93 62 00 	sts	0x0062, r24
     fcc:	80 91 62 00 	lds	r24, 0x0062
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd6:	8f e8       	ldi	r24, 0x8F	; 143
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <fill_spaces+0x28>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <fill_spaces+0x2e>
     fe0:	00 00       	nop
     fe2:	11 50       	subi	r17, 0x01	; 1
}                           
 
void fill_spaces()
{
	uint8_t i;
	for (i = 0; i < NUM_LCD_CHARS; i++){
     fe4:	41 f7       	brne	.-48     	; 0xfb6 <fill_spaces+0x4>
		spi_send(0x20);
	  
		strobel(PORTF, PF3);
		_delay_us(100);   //obligatory waiting for slow LCD (40uS)
	}
}  
     fe6:	1f 91       	pop	r17
     fe8:	08 95       	ret

00000fea <char2lcd>:
   
void char2lcd(char a_char)
{
     fea:	1f 93       	push	r17
     fec:	18 2f       	mov	r17, r24
	spi_send(0x01);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(a_char);
     ff4:	81 2f       	mov	r24, r17
     ff6:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	
	strobel(PORTF, PF3);
     ffa:	e2 e6       	ldi	r30, 0x62	; 98
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 60       	ori	r24, 0x08	; 8
    1002:	80 83       	st	Z, r24
    1004:	80 81       	ld	r24, Z
    1006:	87 7f       	andi	r24, 0xF7	; 247
    1008:	80 83       	st	Z, r24
	//_delay_us(100);   //obligatory waiting for slow LCD (40uS)
}
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <string2lcd>:
  
  
void string2lcd(char *lcd_str)
{
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
	uint8_t i;
	for (i = 0; i < strlen(lcd_str); i++) {
    101e:	ff 24       	eor	r15, r15
    1020:	1a c0       	rjmp	.+52     	; 0x1056 <string2lcd+0x48>
		spi_send(0x01);
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
		spi_send(lcd_str[i]);
    1028:	fe 01       	movw	r30, r28
    102a:	e0 0f       	add	r30, r16
    102c:	f1 1f       	adc	r31, r17
    102e:	80 81       	ld	r24, Z
    1030:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

		strobel(PORTF, PF3);
    1034:	80 91 62 00 	lds	r24, 0x0062
    1038:	88 60       	ori	r24, 0x08	; 8
    103a:	80 93 62 00 	sts	0x0062, r24
    103e:	80 91 62 00 	lds	r24, 0x0062
    1042:	87 7f       	andi	r24, 0xF7	; 247
    1044:	80 93 62 00 	sts	0x0062, r24
    1048:	8f e8       	ldi	r24, 0x8F	; 143
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <string2lcd+0x3e>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <string2lcd+0x44>
    1052:	00 00       	nop
  
  
void string2lcd(char *lcd_str)
{
	uint8_t i;
	for (i = 0; i < strlen(lcd_str); i++) {
    1054:	f3 94       	inc	r15
    1056:	0f 2d       	mov	r16, r15
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	6e 01       	movw	r12, r28
    105c:	ac 2f       	mov	r26, r28
    105e:	bd 2d       	mov	r27, r13
    1060:	fd 01       	movw	r30, r26
    1062:	01 90       	ld	r0, Z+
    1064:	00 20       	and	r0, r0
    1066:	e9 f7       	brne	.-6      	; 0x1062 <string2lcd+0x54>
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	ea 1b       	sub	r30, r26
    106c:	fb 0b       	sbc	r31, r27
    106e:	0e 17       	cp	r16, r30
    1070:	1f 07       	cpc	r17, r31
    1072:	b8 f2       	brcs	.-82     	; 0x1022 <string2lcd+0x14>
		spi_send(lcd_str[i]);

		strobel(PORTF, PF3);
		_delay_us(100);   //obligatory waiting for slow LCD (40uS)
	}                  
} 
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	08 95       	ret

00001084 <enable_lcd>:

void enable_lcd()
{
    1084:	1f 93       	push	r17
	uint8_t i;

	DDRF |= (1 << PF3);
    1086:	80 91 61 00 	lds	r24, 0x0061
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	80 93 61 00 	sts	0x0061, r24
	PORTF |= (1 << PF3);
    1090:	80 91 62 00 	lds	r24, 0x0062
    1094:	88 60       	ori	r24, 0x08	; 8
    1096:	80 93 62 00 	sts	0x0062, r24
	spi_init();
    109a:	0e 94 1b 07 	call	0xe36	; 0xe36 <spi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    109e:	8f e5       	ldi	r24, 0x5F	; 95
    10a0:	9a ee       	ldi	r25, 0xEA	; 234
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <enable_lcd+0x1e>
    10a6:	00 c0       	rjmp	.+0      	; 0x10a8 <enable_lcd+0x24>
    10a8:	00 00       	nop
    10aa:	13 e0       	ldi	r17, 0x03	; 3

	_delay_ms(15);   
	for (i = 0; i < 3; i++) { //do funky initalize sequence 3 times
		spi_send(0x00);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
		spi_send(0x30);
    10b2:	80 e3       	ldi	r24, 0x30	; 48
    10b4:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

		strobel(PORTF, PF3);
    10b8:	80 91 62 00 	lds	r24, 0x0062
    10bc:	88 60       	ori	r24, 0x08	; 8
    10be:	80 93 62 00 	sts	0x0062, r24
    10c2:	80 91 62 00 	lds	r24, 0x0062
    10c6:	87 7f       	andi	r24, 0xF7	; 247
    10c8:	80 93 62 00 	sts	0x0062, r24
    10cc:	8f e5       	ldi	r24, 0x5F	; 95
    10ce:	9d e6       	ldi	r25, 0x6D	; 109
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <enable_lcd+0x4c>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <enable_lcd+0x52>
    10d6:	00 00       	nop
    10d8:	11 50       	subi	r17, 0x01	; 1
	DDRF |= (1 << PF3);
	PORTF |= (1 << PF3);
	spi_init();

	_delay_ms(15);   
	for (i = 0; i < 3; i++) { //do funky initalize sequence 3 times
    10da:	41 f7       	brne	.-48     	; 0x10ac <enable_lcd+0x28>

		strobel(PORTF, PF3);
		_delay_ms(7);
	}

	spi_send(0x00);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0x38);
    10e2:	88 e3       	ldi	r24, 0x38	; 56
    10e4:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

	strobel(PORTF, PF3);
    10e8:	80 91 62 00 	lds	r24, 0x0062
    10ec:	88 60       	ori	r24, 0x08	; 8
    10ee:	80 93 62 00 	sts	0x0062, r24
    10f2:	80 91 62 00 	lds	r24, 0x0062
    10f6:	87 7f       	andi	r24, 0xF7	; 247
    10f8:	80 93 62 00 	sts	0x0062, r24
    10fc:	8f e1       	ldi	r24, 0x1F	; 31
    10fe:	9e e4       	ldi	r25, 0x4E	; 78
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <__stack+0x1>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <__stack+0x7>
    1106:	00 00       	nop
	_delay_ms(5);   

	spi_send(0x00);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0x08);
    110e:	88 e0       	ldi	r24, 0x08	; 8
    1110:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

	strobel(PORTF, PF3);
    1114:	80 91 62 00 	lds	r24, 0x0062
    1118:	88 60       	ori	r24, 0x08	; 8
    111a:	80 93 62 00 	sts	0x0062, r24
    111e:	80 91 62 00 	lds	r24, 0x0062
    1122:	87 7f       	andi	r24, 0xF7	; 247
    1124:	80 93 62 00 	sts	0x0062, r24
    1128:	8f e1       	ldi	r24, 0x1F	; 31
    112a:	9e e4       	ldi	r25, 0x4E	; 78
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <__stack+0x2d>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <__stack+0x33>
    1132:	00 00       	nop
	_delay_ms(5);

	spi_send(0x00);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0x01);
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

	strobel(PORTF, PF3);
    1140:	80 91 62 00 	lds	r24, 0x0062
    1144:	88 60       	ori	r24, 0x08	; 8
    1146:	80 93 62 00 	sts	0x0062, r24
    114a:	80 91 62 00 	lds	r24, 0x0062
    114e:	87 7f       	andi	r24, 0xF7	; 247
    1150:	80 93 62 00 	sts	0x0062, r24
    1154:	8f e1       	ldi	r24, 0x1F	; 31
    1156:	9e e4       	ldi	r25, 0x4E	; 78
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <__stack+0x59>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <__stack+0x5f>
    115e:	00 00       	nop
	_delay_ms(5);   

	spi_send(0x00);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0x06);
    1166:	86 e0       	ldi	r24, 0x06	; 6
    1168:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>

	strobel(PORTF, PF3);
    116c:	80 91 62 00 	lds	r24, 0x0062
    1170:	88 60       	ori	r24, 0x08	; 8
    1172:	80 93 62 00 	sts	0x0062, r24
    1176:	80 91 62 00 	lds	r24, 0x0062
    117a:	87 7f       	andi	r24, 0xF7	; 247
    117c:	80 93 62 00 	sts	0x0062, r24
    1180:	8f e1       	ldi	r24, 0x1F	; 31
    1182:	9e e4       	ldi	r25, 0x4E	; 78
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <__stack+0x85>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <__stack+0x8b>
    118a:	00 00       	nop
	_delay_ms(5);

	spi_send(0x00);
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	spi_send(0x0C);
    1192:	8c e0       	ldi	r24, 0x0C	; 12
    1194:	0e 94 26 07 	call	0xe4c	; 0xe4c <spi_send>
	
	strobel(PORTF, PF3);
    1198:	80 91 62 00 	lds	r24, 0x0062
    119c:	88 60       	ori	r24, 0x08	; 8
    119e:	80 93 62 00 	sts	0x0062, r24
    11a2:	80 91 62 00 	lds	r24, 0x0062
    11a6:	87 7f       	andi	r24, 0xF7	; 247
    11a8:	80 93 62 00 	sts	0x0062, r24
    11ac:	8f e1       	ldi	r24, 0x1F	; 31
    11ae:	9e e4       	ldi	r25, 0x4E	; 78
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <__stack+0xb1>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <__stack+0xb7>
    11b6:	00 00       	nop
	_delay_ms(5);
} 
    11b8:	1f 91       	pop	r17
    11ba:	08 95       	ret

000011bc <enable_adc>:
		lookup[i] = (uint8_t) round((-49.0f/195.0f)*i+(3560.0f/13.0f));
		//lookup[i] = (uint8_t) round(.7f*i+290);
}

void enable_adc()
{
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
	CLRBIT(DDRF, PF7);
    11c4:	80 91 61 00 	lds	r24, 0x0061
    11c8:	8f 77       	andi	r24, 0x7F	; 127
    11ca:	80 93 61 00 	sts	0x0061, r24
	CLRBIT(PORTF, PF7);
    11ce:	80 91 62 00 	lds	r24, 0x0062
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	80 93 62 00 	sts	0x0062, r24

	ADMUX  = (1 << REFS0) | (PF7 & ADC_MUX_MASK);    //single-ended port F bit 7, right adjusted for 10 bits
    11d8:	87 e4       	ldi	r24, 0x47	; 71
    11da:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);    //ADC enabled, don't start yet, single shot mode	
    11dc:	87 e8       	ldi	r24, 0x87	; 135
    11de:	86 b9       	out	0x06, r24	; 6
    11e0:	06 e7       	ldi	r16, 0x76	; 118
    11e2:	12 e0       	ldi	r17, 0x02	; 2
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	89 e8       	ldi	r24, 0x89	; 137
    11ea:	93 e4       	ldi	r25, 0x43	; 67
static uint8_t lookup[SIZE];

static void init_lookup_table()
{
	uint16_t i;
	for (i = 0; i < SIZE; i++)
    11ec:	c0 e0       	ldi	r28, 0x00	; 0
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
    11f0:	13 c0       	rjmp	.+38     	; 0x1218 <enable_adc+0x5c>
    11f2:	be 01       	movw	r22, r28
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 4f 12 	call	0x249e	; 0x249e <__floatunsisf>
    11fc:	2b e0       	ldi	r18, 0x0B	; 11
    11fe:	38 ea       	ldi	r19, 0xA8	; 168
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5e eb       	ldi	r21, 0xBE	; 190
    1204:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__mulsf3>
		lookup[i] = (uint8_t) round((-49.0f/195.0f)*i+(3560.0f/13.0f));
		//lookup[i] = (uint8_t) round(.7f*i+290);
}

void enable_adc()
    1208:	2f e4       	ldi	r18, 0x4F	; 79
    120a:	3c ee       	ldi	r19, 0xEC	; 236
    120c:	48 e8       	ldi	r20, 0x88	; 136
    120e:	53 e4       	ldi	r21, 0x43	; 67
    1210:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    1214:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <round>

static void init_lookup_table()
{
	uint16_t i;
	for (i = 0; i < SIZE; i++)
		lookup[i] = (uint8_t) round((-49.0f/195.0f)*i+(3560.0f/13.0f));
    1218:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixunssfsi>
    121c:	f8 01       	movw	r30, r16
    121e:	61 93       	st	Z+, r22
    1220:	8f 01       	movw	r16, r30
static uint8_t lookup[SIZE];

static void init_lookup_table()
{
	uint16_t i;
	for (i = 0; i < SIZE; i++)
    1222:	21 96       	adiw	r28, 0x01	; 1
    1224:	f4 e0       	ldi	r31, 0x04	; 4
    1226:	ca 31       	cpi	r28, 0x1A	; 26
    1228:	df 07       	cpc	r29, r31
    122a:	19 f7       	brne	.-58     	; 0x11f2 <enable_adc+0x36>

	ADMUX  = (1 << REFS0) | (PF7 & ADC_MUX_MASK);    //single-ended port F bit 7, right adjusted for 10 bits
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);    //ADC enabled, don't start yet, single shot mode	

	init_lookup_table();
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <start_adc>:

void start_adc()
{
	SETBIT(ADCSRA, ADSC);
    1236:	36 9a       	sbi	0x06, 6	; 6
}
    1238:	08 95       	ret

0000123a <poll_adc>:
	init_lookup_table();
}

void start_adc()
{
	SETBIT(ADCSRA, ADSC);
    123a:	36 9a       	sbi	0x06, 6	; 6

uint16_t poll_adc()
{
	start_adc();

	while (!ISSET(ADCSRA, ADIF));
    123c:	34 9b       	sbis	0x06, 4	; 6
    123e:	fe cf       	rjmp	.-4      	; 0x123c <poll_adc+0x2>
	SETBIT(ADCSRA, ADIF);
    1240:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
    1242:	24 b1       	in	r18, 0x04	; 4
    1244:	35 b1       	in	r19, 0x05	; 5
}
    1246:	c9 01       	movw	r24, r18
    1248:	08 95       	ret

0000124a <is_adc_running>:

uint8_t is_adc_running()
{
	if (!ISSET(ADCSRA, ADIF))
		return 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	34 99       	sbic	0x06, 4	; 6
    124e:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
    1250:	08 95       	ret

00001252 <get_adc>:

uint16_t get_adc()
{
	return ADC;
    1252:	24 b1       	in	r18, 0x04	; 4
    1254:	35 b1       	in	r19, 0x05	; 5
}
    1256:	c9 01       	movw	r24, r18
    1258:	08 95       	ret

0000125a <get_adc_adjusted>:

uint8_t get_adc_adjusted(uint16_t raw)
{
   if (raw > 1000)
    125a:	23 e0       	ldi	r18, 0x03	; 3
    125c:	89 3e       	cpi	r24, 0xE9	; 233
    125e:	92 07       	cpc	r25, r18
    1260:	60 f4       	brcc	.+24     	; 0x127a <get_adc_adjusted+0x20>
		return 20;
	
	if (raw < 76)
    1262:	8c 34       	cpi	r24, 0x4C	; 76
    1264:	91 05       	cpc	r25, r1
    1266:	38 f0       	brcs	.+14     	; 0x1276 <get_adc_adjusted+0x1c>
		return 255;

	if (lookup[raw] > 50)
    1268:	8a 58       	subi	r24, 0x8A	; 138
    126a:	9d 4f       	sbci	r25, 0xFD	; 253
    126c:	fc 01       	movw	r30, r24
    126e:	80 81       	ld	r24, Z
    1270:	83 33       	cpi	r24, 0x33	; 51
    1272:	28 f4       	brcc	.+10     	; 0x127e <get_adc_adjusted+0x24>
		return lookup[raw]-50;
	
	return lookup[raw];
}
    1274:	08 95       	ret
{
   if (raw > 1000)
		return 20;
	
	if (raw < 76)
		return 255;
    1276:	8f ef       	ldi	r24, 0xFF	; 255

	if (lookup[raw] > 50)
		return lookup[raw]-50;
	
	return lookup[raw];
}
    1278:	08 95       	ret
}

uint8_t get_adc_adjusted(uint16_t raw)
{
   if (raw > 1000)
		return 20;
    127a:	84 e1       	ldi	r24, 0x14	; 20
    127c:	08 95       	ret
	
	if (raw < 76)
		return 255;

	if (lookup[raw] > 50)
		return lookup[raw]-50;
    127e:	82 53       	subi	r24, 0x32	; 50
    1280:	08 95       	ret

00001282 <change_hour>:

static volatile uint8_t alarm_armed;

void change_hour(int8_t delta)
{
	seconds = 0;
    1282:	10 92 92 06 	sts	0x0692, r1

	if (hour+delta == 24)
    1286:	90 91 95 06 	lds	r25, 0x0695
    128a:	28 2f       	mov	r18, r24
    128c:	33 27       	eor	r19, r19
    128e:	27 fd       	sbrc	r18, 7
    1290:	30 95       	com	r19
    1292:	a9 01       	movw	r20, r18
    1294:	49 0f       	add	r20, r25
    1296:	51 1d       	adc	r21, r1
    1298:	48 31       	cpi	r20, 0x18	; 24
    129a:	51 05       	cpc	r21, r1
    129c:	71 f0       	breq	.+28     	; 0x12ba <change_hour+0x38>
		hour = 0;
	else if (hour+delta+1 == 0)
    129e:	90 91 95 06 	lds	r25, 0x0695
    12a2:	29 0f       	add	r18, r25
    12a4:	31 1d       	adc	r19, r1
    12a6:	9f ef       	ldi	r25, 0xFF	; 255
    12a8:	2f 3f       	cpi	r18, 0xFF	; 255
    12aa:	39 07       	cpc	r19, r25
    12ac:	49 f0       	breq	.+18     	; 0x12c0 <change_hour+0x3e>
		hour = 23;
	else
		hour += delta;
    12ae:	90 91 95 06 	lds	r25, 0x0695
    12b2:	98 0f       	add	r25, r24
    12b4:	90 93 95 06 	sts	0x0695, r25
    12b8:	08 95       	ret
void change_hour(int8_t delta)
{
	seconds = 0;

	if (hour+delta == 24)
		hour = 0;
    12ba:	10 92 95 06 	sts	0x0695, r1
    12be:	08 95       	ret
	else if (hour+delta+1 == 0)
		hour = 23;
    12c0:	87 e1       	ldi	r24, 0x17	; 23
    12c2:	80 93 95 06 	sts	0x0695, r24
    12c6:	08 95       	ret

000012c8 <change_minute>:
		hour += delta;
}

void change_minute(int8_t delta)
{
	seconds = 0;
    12c8:	10 92 92 06 	sts	0x0692, r1

	if (minutes+delta == 60)
    12cc:	90 91 94 06 	lds	r25, 0x0694
    12d0:	28 2f       	mov	r18, r24
    12d2:	33 27       	eor	r19, r19
    12d4:	27 fd       	sbrc	r18, 7
    12d6:	30 95       	com	r19
    12d8:	a9 01       	movw	r20, r18
    12da:	49 0f       	add	r20, r25
    12dc:	51 1d       	adc	r21, r1
    12de:	4c 33       	cpi	r20, 0x3C	; 60
    12e0:	51 05       	cpc	r21, r1
    12e2:	71 f0       	breq	.+28     	; 0x1300 <change_minute+0x38>
		minutes = 0;
	else if (minutes+delta+1 == 0)
    12e4:	90 91 94 06 	lds	r25, 0x0694
    12e8:	29 0f       	add	r18, r25
    12ea:	31 1d       	adc	r19, r1
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	2f 3f       	cpi	r18, 0xFF	; 255
    12f0:	39 07       	cpc	r19, r25
    12f2:	49 f0       	breq	.+18     	; 0x1306 <change_minute+0x3e>
		minutes = 59;
	else
		minutes += delta;
    12f4:	90 91 94 06 	lds	r25, 0x0694
    12f8:	98 0f       	add	r25, r24
    12fa:	90 93 94 06 	sts	0x0694, r25
    12fe:	08 95       	ret
void change_minute(int8_t delta)
{
	seconds = 0;

	if (minutes+delta == 60)
		minutes = 0;
    1300:	10 92 94 06 	sts	0x0694, r1
    1304:	08 95       	ret
	else if (minutes+delta+1 == 0)
		minutes = 59;
    1306:	8b e3       	ldi	r24, 0x3B	; 59
    1308:	80 93 94 06 	sts	0x0694, r24
    130c:	08 95       	ret

0000130e <change_alarm_hour>:
		minutes += delta;
}

void change_alarm_hour(int8_t delta)
{
	a_seconds = 0;
    130e:	10 92 99 06 	sts	0x0699, r1
	s_seconds = 0;
    1312:	10 92 93 06 	sts	0x0693, r1

	if (a_hour+delta == 24)
    1316:	90 91 97 06 	lds	r25, 0x0697
    131a:	28 2f       	mov	r18, r24
    131c:	33 27       	eor	r19, r19
    131e:	27 fd       	sbrc	r18, 7
    1320:	30 95       	com	r19
    1322:	a9 01       	movw	r20, r18
    1324:	49 0f       	add	r20, r25
    1326:	51 1d       	adc	r21, r1
    1328:	48 31       	cpi	r20, 0x18	; 24
    132a:	51 05       	cpc	r21, r1
    132c:	91 f0       	breq	.+36     	; 0x1352 <change_alarm_hour+0x44>
		a_hour = 0;
	else if (a_hour+delta+1 == 0)
    132e:	90 91 97 06 	lds	r25, 0x0697
    1332:	29 0f       	add	r18, r25
    1334:	31 1d       	adc	r19, r1
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	2f 3f       	cpi	r18, 0xFF	; 255
    133a:	39 07       	cpc	r19, r25
    133c:	89 f0       	breq	.+34     	; 0x1360 <change_alarm_hour+0x52>
		a_hour = 23;
	else
		a_hour += delta;
    133e:	90 91 97 06 	lds	r25, 0x0697
    1342:	98 0f       	add	r25, r24
    1344:	90 93 97 06 	sts	0x0697, r25

	s_hour = a_hour;
    1348:	80 91 97 06 	lds	r24, 0x0697
    134c:	80 93 90 06 	sts	0x0690, r24
}
    1350:	08 95       	ret
{
	a_seconds = 0;
	s_seconds = 0;

	if (a_hour+delta == 24)
		a_hour = 0;
    1352:	10 92 97 06 	sts	0x0697, r1
	else if (a_hour+delta+1 == 0)
		a_hour = 23;
	else
		a_hour += delta;

	s_hour = a_hour;
    1356:	80 91 97 06 	lds	r24, 0x0697
    135a:	80 93 90 06 	sts	0x0690, r24
}
    135e:	08 95       	ret
	s_seconds = 0;

	if (a_hour+delta == 24)
		a_hour = 0;
	else if (a_hour+delta+1 == 0)
		a_hour = 23;
    1360:	87 e1       	ldi	r24, 0x17	; 23
    1362:	80 93 97 06 	sts	0x0697, r24
	else
		a_hour += delta;

	s_hour = a_hour;
    1366:	80 91 97 06 	lds	r24, 0x0697
    136a:	80 93 90 06 	sts	0x0690, r24
}
    136e:	08 95       	ret

00001370 <change_alarm_minute>:

void change_alarm_minute(int8_t delta)
{
	a_seconds = 0;
    1370:	10 92 99 06 	sts	0x0699, r1
	s_seconds = 0;
    1374:	10 92 93 06 	sts	0x0693, r1
	
	if (a_minutes+delta == 60)
    1378:	90 91 98 06 	lds	r25, 0x0698
    137c:	28 2f       	mov	r18, r24
    137e:	33 27       	eor	r19, r19
    1380:	27 fd       	sbrc	r18, 7
    1382:	30 95       	com	r19
    1384:	a9 01       	movw	r20, r18
    1386:	49 0f       	add	r20, r25
    1388:	51 1d       	adc	r21, r1
    138a:	4c 33       	cpi	r20, 0x3C	; 60
    138c:	51 05       	cpc	r21, r1
    138e:	91 f0       	breq	.+36     	; 0x13b4 <change_alarm_minute+0x44>
		a_minutes = 0;
	else if (a_minutes+delta+1 == 0)
    1390:	90 91 98 06 	lds	r25, 0x0698
    1394:	29 0f       	add	r18, r25
    1396:	31 1d       	adc	r19, r1
    1398:	9f ef       	ldi	r25, 0xFF	; 255
    139a:	2f 3f       	cpi	r18, 0xFF	; 255
    139c:	39 07       	cpc	r19, r25
    139e:	89 f0       	breq	.+34     	; 0x13c2 <change_alarm_minute+0x52>
		a_minutes = 59;
	else
		a_minutes += delta;
    13a0:	90 91 98 06 	lds	r25, 0x0698
    13a4:	98 0f       	add	r25, r24
    13a6:	90 93 98 06 	sts	0x0698, r25

	s_minutes = a_minutes;
    13aa:	80 91 98 06 	lds	r24, 0x0698
    13ae:	80 93 91 06 	sts	0x0691, r24
}
    13b2:	08 95       	ret
{
	a_seconds = 0;
	s_seconds = 0;
	
	if (a_minutes+delta == 60)
		a_minutes = 0;
    13b4:	10 92 98 06 	sts	0x0698, r1
	else if (a_minutes+delta+1 == 0)
		a_minutes = 59;
	else
		a_minutes += delta;

	s_minutes = a_minutes;
    13b8:	80 91 98 06 	lds	r24, 0x0698
    13bc:	80 93 91 06 	sts	0x0691, r24
}
    13c0:	08 95       	ret
	s_seconds = 0;
	
	if (a_minutes+delta == 60)
		a_minutes = 0;
	else if (a_minutes+delta+1 == 0)
		a_minutes = 59;
    13c2:	8b e3       	ldi	r24, 0x3B	; 59
    13c4:	80 93 98 06 	sts	0x0698, r24
	else
		a_minutes += delta;

	s_minutes = a_minutes;
    13c8:	80 91 98 06 	lds	r24, 0x0698
    13cc:	80 93 91 06 	sts	0x0691, r24
}
    13d0:	08 95       	ret

000013d2 <tick_seconds>:

void tick_seconds()
{
	seconds++;
    13d2:	80 91 92 06 	lds	r24, 0x0692
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 92 06 	sts	0x0692, r24
	if (seconds == 60) {
    13dc:	80 91 92 06 	lds	r24, 0x0692
    13e0:	8c 33       	cpi	r24, 0x3C	; 60
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <tick_seconds+0x14>
    13e4:	08 95       	ret
		seconds = 0;
    13e6:	10 92 92 06 	sts	0x0692, r1
		
		minutes++;
    13ea:	80 91 94 06 	lds	r24, 0x0694
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	80 93 94 06 	sts	0x0694, r24
		if (minutes == 60) {
    13f4:	80 91 94 06 	lds	r24, 0x0694
    13f8:	8c 33       	cpi	r24, 0x3C	; 60
    13fa:	a1 f7       	brne	.-24     	; 0x13e4 <tick_seconds+0x12>
			minutes = 0;
    13fc:	10 92 94 06 	sts	0x0694, r1
			
			hour++;
    1400:	80 91 95 06 	lds	r24, 0x0695
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 95 06 	sts	0x0695, r24
			if (hour == 24)
    140a:	80 91 95 06 	lds	r24, 0x0695
    140e:	88 31       	cpi	r24, 0x18	; 24
    1410:	49 f7       	brne	.-46     	; 0x13e4 <tick_seconds+0x12>
				hour = 0;
    1412:	10 92 95 06 	sts	0x0695, r1
    1416:	08 95       	ret

00001418 <set_alarm>:
	}
}

void set_alarm(uint8_t hr, uint8_t min)
{
	a_hour = hr;
    1418:	80 93 97 06 	sts	0x0697, r24
	s_hour = hr;
    141c:	80 93 90 06 	sts	0x0690, r24
	
	a_minutes = min;
    1420:	60 93 98 06 	sts	0x0698, r22
	s_minutes = min;
    1424:	60 93 91 06 	sts	0x0691, r22
	
	a_seconds = 0;
    1428:	10 92 99 06 	sts	0x0699, r1
	s_seconds = 0;
    142c:	10 92 93 06 	sts	0x0693, r1
}
    1430:	08 95       	ret

00001432 <init_clock_timer>:

void init_clock_timer()
{
	hour = 0;
    1432:	10 92 95 06 	sts	0x0695, r1
	minutes = 0;
    1436:	10 92 94 06 	sts	0x0694, r1
	seconds = 0;
    143a:	10 92 92 06 	sts	0x0692, r1

	a_hour = 0;
    143e:	10 92 97 06 	sts	0x0697, r1
	a_minutes = 0;
    1442:	10 92 98 06 	sts	0x0698, r1
	a_seconds = 0;
    1446:	10 92 99 06 	sts	0x0699, r1

	s_hour = 0;
    144a:	10 92 90 06 	sts	0x0690, r1
	s_minutes = 0;
    144e:	10 92 91 06 	sts	0x0691, r1
	s_seconds = 0;
    1452:	10 92 93 06 	sts	0x0693, r1

	alarm_armed = FALSE;
    1456:	10 92 96 06 	sts	0x0696, r1

	ASSR = (1 << AS0);
    145a:	88 e0       	ldi	r24, 0x08	; 8
    145c:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE0);
    145e:	87 b7       	in	r24, 0x37	; 55
    1460:	81 60       	ori	r24, 0x01	; 1
    1462:	87 bf       	out	0x37, r24	; 55

	TCCR0 = (1 << CS00);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	83 bf       	out	0x33, r24	; 51
}
    1468:	08 95       	ret

0000146a <set_time>:

void set_time(uint8_t hr, uint8_t min)
{
	hour = hr;
    146a:	80 93 95 06 	sts	0x0695, r24
	minutes = min;
    146e:	60 93 94 06 	sts	0x0694, r22

	seconds = 0;
    1472:	10 92 92 06 	sts	0x0692, r1
}
    1476:	08 95       	ret

00001478 <snooze_alarm>:

void snooze_alarm(uint8_t mins, uint8_t sec)
{
	s_seconds += sec;
    1478:	90 91 93 06 	lds	r25, 0x0693
    147c:	69 0f       	add	r22, r25
    147e:	60 93 93 06 	sts	0x0693, r22
	if (s_seconds > 59) {
    1482:	90 91 93 06 	lds	r25, 0x0693
    1486:	9c 33       	cpi	r25, 0x3C	; 60
    1488:	50 f0       	brcs	.+20     	; 0x149e <snooze_alarm+0x26>
		s_seconds -= 60;
    148a:	90 91 93 06 	lds	r25, 0x0693
    148e:	9c 53       	subi	r25, 0x3C	; 60
    1490:	90 93 93 06 	sts	0x0693, r25
		s_minutes++;
    1494:	90 91 91 06 	lds	r25, 0x0691
    1498:	9f 5f       	subi	r25, 0xFF	; 255
    149a:	90 93 91 06 	sts	0x0691, r25
	}

	s_minutes += mins;
    149e:	90 91 91 06 	lds	r25, 0x0691
    14a2:	98 0f       	add	r25, r24
    14a4:	90 93 91 06 	sts	0x0691, r25
	if (s_minutes > 59) {
    14a8:	80 91 91 06 	lds	r24, 0x0691
    14ac:	8c 33       	cpi	r24, 0x3C	; 60
    14ae:	70 f0       	brcs	.+28     	; 0x14cc <snooze_alarm+0x54>
		s_minutes -= 60;
    14b0:	80 91 91 06 	lds	r24, 0x0691
    14b4:	8c 53       	subi	r24, 0x3C	; 60
    14b6:	80 93 91 06 	sts	0x0691, r24

		s_hour++;
    14ba:	80 91 90 06 	lds	r24, 0x0690
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	80 93 90 06 	sts	0x0690, r24
		if (s_hour == 24)
    14c4:	80 91 90 06 	lds	r24, 0x0690
    14c8:	88 31       	cpi	r24, 0x18	; 24
    14ca:	09 f0       	breq	.+2      	; 0x14ce <snooze_alarm+0x56>
    14cc:	08 95       	ret
			s_hour = 0;
    14ce:	10 92 90 06 	sts	0x0690, r1
    14d2:	08 95       	ret

000014d4 <reset_snooze>:
	}
}

void reset_snooze()
{
	s_seconds = a_seconds;
    14d4:	80 91 99 06 	lds	r24, 0x0699
    14d8:	80 93 93 06 	sts	0x0693, r24
	s_minutes = a_minutes;
    14dc:	80 91 98 06 	lds	r24, 0x0698
    14e0:	80 93 91 06 	sts	0x0691, r24
	s_hour = a_hour;
    14e4:	80 91 97 06 	lds	r24, 0x0697
    14e8:	80 93 90 06 	sts	0x0690, r24
}
    14ec:	08 95       	ret

000014ee <get_time>:

uint16_t get_time()
{
	return hour*100+minutes;
    14ee:	20 91 95 06 	lds	r18, 0x0695
    14f2:	80 91 94 06 	lds	r24, 0x0694
    14f6:	94 e6       	ldi	r25, 0x64	; 100
    14f8:	29 9f       	mul	r18, r25
    14fa:	90 01       	movw	r18, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	28 0f       	add	r18, r24
    1500:	31 1d       	adc	r19, r1
}
    1502:	c9 01       	movw	r24, r18
    1504:	08 95       	ret

00001506 <get_alarm>:

uint16_t get_alarm()
{
	return a_hour*100+a_minutes;
    1506:	20 91 97 06 	lds	r18, 0x0697
    150a:	80 91 98 06 	lds	r24, 0x0698
    150e:	94 e6       	ldi	r25, 0x64	; 100
    1510:	29 9f       	mul	r18, r25
    1512:	90 01       	movw	r18, r0
    1514:	11 24       	eor	r1, r1
    1516:	28 0f       	add	r18, r24
    1518:	31 1d       	adc	r19, r1
}
    151a:	c9 01       	movw	r24, r18
    151c:	08 95       	ret

0000151e <get_seconds_state>:

uint8_t get_seconds_state(uint8_t mode)
{
	if (mode != MODE_DEFAULT && seconds < 2)
    151e:	88 23       	and	r24, r24
    1520:	21 f0       	breq	.+8      	; 0x152a <get_seconds_state+0xc>
    1522:	80 91 92 06 	lds	r24, 0x0692
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	20 f0       	brcs	.+8      	; 0x1532 <get_seconds_state+0x14>
		return 0;

	return seconds%2;
    152a:	80 91 92 06 	lds	r24, 0x0692
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	08 95       	ret
}

uint8_t get_seconds_state(uint8_t mode)
{
	if (mode != MODE_DEFAULT && seconds < 2)
		return 0;
    1532:	80 e0       	ldi	r24, 0x00	; 0

	return seconds%2;
}
    1534:	08 95       	ret

00001536 <set_alarm_state>:

void set_alarm_state(uint8_t state)
{
	alarm_armed = state;
    1536:	80 93 96 06 	sts	0x0696, r24
}
    153a:	08 95       	ret

0000153c <is_alarm_enabled>:

uint8_t is_alarm_enabled()
{
	return alarm_armed;
    153c:	80 91 96 06 	lds	r24, 0x0696
}
    1540:	08 95       	ret

00001542 <is_alarm_time>:

uint8_t is_alarm_time()
{
	if (seconds == s_seconds &&
    1542:	90 91 92 06 	lds	r25, 0x0692
    1546:	80 91 93 06 	lds	r24, 0x0693
    154a:	98 17       	cp	r25, r24
    154c:	11 f0       	breq	.+4      	; 0x1552 <is_alarm_time+0x10>
		minutes == s_minutes &&
		hour == s_hour)
		return alarm_armed;

	return FALSE;
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	08 95       	ret
}

uint8_t is_alarm_time()
{
	if (seconds == s_seconds &&
		minutes == s_minutes &&
    1552:	90 91 94 06 	lds	r25, 0x0694
    1556:	80 91 91 06 	lds	r24, 0x0691
	return alarm_armed;
}

uint8_t is_alarm_time()
{
	if (seconds == s_seconds &&
    155a:	98 17       	cp	r25, r24
    155c:	c1 f7       	brne	.-16     	; 0x154e <is_alarm_time+0xc>
		minutes == s_minutes &&
		hour == s_hour)
    155e:	90 91 95 06 	lds	r25, 0x0695
    1562:	80 91 90 06 	lds	r24, 0x0690
}

uint8_t is_alarm_time()
{
	if (seconds == s_seconds &&
		minutes == s_minutes &&
    1566:	98 17       	cp	r25, r24
    1568:	11 f0       	breq	.+4      	; 0x156e <is_alarm_time+0x2c>
		hour == s_hour)
		return alarm_armed;

	return FALSE;
    156a:	80 e0       	ldi	r24, 0x00	; 0
}
    156c:	08 95       	ret
uint8_t is_alarm_time()
{
	if (seconds == s_seconds &&
		minutes == s_minutes &&
		hour == s_hour)
		return alarm_armed;
    156e:	80 91 96 06 	lds	r24, 0x0696
    1572:	08 95       	ret

00001574 <get_alarm_string>:
	return FALSE;
}

void get_alarm_string(char buf[11])
{
	sprintf(buf, "%02d:%02d     ", s_hour, s_minutes);
    1574:	30 91 90 06 	lds	r19, 0x0690
    1578:	20 91 91 06 	lds	r18, 0x0691
    157c:	4d b7       	in	r20, 0x3d	; 61
    157e:	5e b7       	in	r21, 0x3e	; 62
    1580:	48 50       	subi	r20, 0x08	; 8
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	5e bf       	out	0x3e, r21	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	4d bf       	out	0x3d, r20	; 61
    158e:	ed b7       	in	r30, 0x3d	; 61
    1590:	fe b7       	in	r31, 0x3e	; 62
    1592:	31 96       	adiw	r30, 0x01	; 1
    1594:	ad b7       	in	r26, 0x3d	; 61
    1596:	be b7       	in	r27, 0x3e	; 62
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	9c 93       	st	X, r25
    159c:	8e 93       	st	-X, r24
    159e:	11 97       	sbiw	r26, 0x01	; 1
    15a0:	83 e4       	ldi	r24, 0x43	; 67
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	93 83       	std	Z+3, r25	; 0x03
    15a6:	82 83       	std	Z+2, r24	; 0x02
    15a8:	34 83       	std	Z+4, r19	; 0x04
    15aa:	15 82       	std	Z+5, r1	; 0x05
    15ac:	26 83       	std	Z+6, r18	; 0x06
    15ae:	17 82       	std	Z+7, r1	; 0x07
    15b0:	0e 94 24 15 	call	0x2a48	; 0x2a48 <sprintf>
    15b4:	4d b7       	in	r20, 0x3d	; 61
    15b6:	5e b7       	in	r21, 0x3e	; 62
    15b8:	48 5f       	subi	r20, 0xF8	; 248
    15ba:	5f 4f       	sbci	r21, 0xFF	; 255
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	5e bf       	out	0x3e, r21	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	4d bf       	out	0x3d, r20	; 61
}
    15c6:	08 95       	ret

000015c8 <__vector_33>:
//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect)
{
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	0b b6       	in	r0, 0x3b	; 59
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
	static uint8_t twi_buf_ptr;  //index into the buffer being used 

	switch (TWSR) {
    15e2:	80 91 71 00 	lds	r24, 0x0071
    15e6:	88 32       	cpi	r24, 0x28	; 40
    15e8:	e1 f1       	breq	.+120    	; 0x1662 <__vector_33+0x9a>
    15ea:	89 32       	cpi	r24, 0x29	; 41
    15ec:	c8 f0       	brcs	.+50     	; 0x1620 <__vector_33+0x58>
    15ee:	80 34       	cpi	r24, 0x40	; 64
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <__vector_33+0x2c>
    15f2:	4d c0       	rjmp	.+154    	; 0x168e <__vector_33+0xc6>
    15f4:	81 34       	cpi	r24, 0x41	; 65
    15f6:	78 f1       	brcs	.+94     	; 0x1656 <__vector_33+0x8e>
    15f8:	80 35       	cpi	r24, 0x50	; 80
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__vector_33+0x36>
    15fc:	60 c0       	rjmp	.+192    	; 0x16be <__vector_33+0xf6>
    15fe:	88 35       	cpi	r24, 0x58	; 88
    1600:	b1 f4       	brne	.+44     	; 0x162e <__vector_33+0x66>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
		if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
		else                               {TWCR = TWCR_RNACK;} //NACK last byte 
		break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
		twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1602:	80 91 9a 06 	lds	r24, 0x069A
    1606:	e0 91 1b 07 	lds	r30, 0x071B
    160a:	f0 91 1c 07 	lds	r31, 0x071C
    160e:	e8 0f       	add	r30, r24
    1610:	f1 1d       	adc	r31, r1
    1612:	80 91 73 00 	lds	r24, 0x0073
    1616:	80 83       	st	Z, r24
		TWCR = TWCR_STOP;                 //initiate a STOP
    1618:	84 e9       	ldi	r24, 0x94	; 148
    161a:	80 93 74 00 	sts	0x0074, r24
		break;      
    161e:	0e c0       	rjmp	.+28     	; 0x163c <__vector_33+0x74>
//****************************************************************************/
ISR(TWI_vect)
{
	static uint8_t twi_buf_ptr;  //index into the buffer being used 

	switch (TWSR) {
    1620:	80 31       	cpi	r24, 0x10	; 16
    1622:	09 f4       	brne	.+2      	; 0x1626 <__vector_33+0x5e>
    1624:	42 c0       	rjmp	.+132    	; 0x16aa <__vector_33+0xe2>
    1626:	88 31       	cpi	r24, 0x18	; 24
    1628:	e1 f0       	breq	.+56     	; 0x1662 <__vector_33+0x9a>
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	f1 f1       	breq	.+124    	; 0x16aa <__vector_33+0xe2>
		break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
		TWCR = TWCR_START;                //initiate RESTART 
		break;
    default:                            //Error occured, save TWSR
		twi_state = TWSR;
    162e:	80 91 71 00 	lds	r24, 0x0071
    1632:	80 93 1a 07 	sts	0x071A, r24
		TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1636:	84 e0       	ldi	r24, 0x04	; 4
    1638:	80 93 74 00 	sts	0x0074, r24
	}//switch
}//TWI_isr
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti
//****************************************************************************/
ISR(TWI_vect)
{
	static uint8_t twi_buf_ptr;  //index into the buffer being used 

	switch (TWSR) {
    1656:	88 33       	cpi	r24, 0x38	; 56
    1658:	51 f7       	brne	.-44     	; 0x162e <__vector_33+0x66>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
		twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
		TWCR = TWCR_STOP;                 //initiate a STOP
		break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
		TWCR = TWCR_START;                //initiate RESTART 
    165a:	85 ea       	ldi	r24, 0xA5	; 165
    165c:	80 93 74 00 	sts	0x0074, r24
		break;
    1660:	ed cf       	rjmp	.-38     	; 0x163c <__vector_33+0x74>
		twi_buf_ptr = 0;      //initalize buffer pointer 
		TWCR = TWCR_SEND;     //send SLA+RW
		break;
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
		if (twi_buf_ptr < twi_msg_size){  //send data till done
    1662:	80 91 9a 06 	lds	r24, 0x069A
    1666:	90 91 1e 07 	lds	r25, 0x071E
    166a:	89 17       	cp	r24, r25
    166c:	a8 f6       	brcc	.-86     	; 0x1618 <__vector_33+0x50>
			TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    166e:	e0 91 1b 07 	lds	r30, 0x071B
    1672:	f0 91 1c 07 	lds	r31, 0x071C
    1676:	e8 0f       	add	r30, r24
    1678:	f1 1d       	adc	r31, r1
    167a:	90 81       	ld	r25, Z
    167c:	90 93 73 00 	sts	0x0073, r25
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	80 93 9a 06 	sts	0x069A, r24
			TWCR = TWCR_SEND;               //send next byte 
    1686:	85 e8       	ldi	r24, 0x85	; 133
    1688:	80 93 74 00 	sts	0x0074, r24
    168c:	d7 cf       	rjmp	.-82     	; 0x163c <__vector_33+0x74>
//****************************************************************************/
ISR(TWI_vect)
{
	static uint8_t twi_buf_ptr;  //index into the buffer being used 

	switch (TWSR) {
    168e:	20 91 9a 06 	lds	r18, 0x069A
		else{TWCR = TWCR_STOP;}           //last byte sent, send STOP
		break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
		twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
		if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1692:	80 91 1e 07 	lds	r24, 0x071E
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	28 17       	cp	r18, r24
    169e:	39 07       	cpc	r19, r25
    16a0:	24 f5       	brge	.+72     	; 0x16ea <__vector_33+0x122>
    16a2:	85 ec       	ldi	r24, 0xC5	; 197
    16a4:	80 93 74 00 	sts	0x0074, r24
    16a8:	c9 cf       	rjmp	.-110    	; 0x163c <__vector_33+0x74>
	static uint8_t twi_buf_ptr;  //index into the buffer being used 

	switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
		TWDR = twi_bus_addr;  //load up the twi bus address
    16aa:	80 91 1d 07 	lds	r24, 0x071D
    16ae:	80 93 73 00 	sts	0x0073, r24
		twi_buf_ptr = 0;      //initalize buffer pointer 
    16b2:	10 92 9a 06 	sts	0x069A, r1
		TWCR = TWCR_SEND;     //send SLA+RW
    16b6:	85 e8       	ldi	r24, 0x85	; 133
    16b8:	80 93 74 00 	sts	0x0074, r24
		break;
    16bc:	bf cf       	rjmp	.-130    	; 0x163c <__vector_33+0x74>
			TWCR = TWCR_SEND;               //send next byte 
		}
		else{TWCR = TWCR_STOP;}           //last byte sent, send STOP
		break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
		twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    16be:	20 91 9a 06 	lds	r18, 0x069A
    16c2:	e0 91 1b 07 	lds	r30, 0x071B
    16c6:	f0 91 1c 07 	lds	r31, 0x071C
    16ca:	e2 0f       	add	r30, r18
    16cc:	f1 1d       	adc	r31, r1
    16ce:	80 91 73 00 	lds	r24, 0x0073
    16d2:	80 83       	st	Z, r24
    16d4:	2f 5f       	subi	r18, 0xFF	; 255
    16d6:	20 93 9a 06 	sts	0x069A, r18
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
		if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    16da:	80 91 1e 07 	lds	r24, 0x071E
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	28 17       	cp	r18, r24
    16e6:	39 07       	cpc	r19, r25
    16e8:	e4 f2       	brlt	.-72     	; 0x16a2 <__vector_33+0xda>
		else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    16ea:	85 e8       	ldi	r24, 0x85	; 133
    16ec:	80 93 74 00 	sts	0x0074, r24
    16f0:	a5 cf       	rjmp	.-182    	; 0x163c <__vector_33+0x74>

000016f2 <twi_busy>:
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void)
{
	return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    16f2:	80 91 74 00 	lds	r24, 0x0074
}
    16f6:	81 70       	andi	r24, 0x01	; 1
    16f8:	08 95       	ret

000016fa <twi_start_wr>:
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void)
{
	return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    16fa:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, volatile uint8_t *twi_data, uint8_t byte_cnt)
{
	while(twi_busy());                    //wait till TWI rdy for next xfer
    16fe:	90 fd       	sbrc	r25, 0
    1700:	fc cf       	rjmp	.-8      	; 0x16fa <twi_start_wr>
	twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1702:	8e 7f       	andi	r24, 0xFE	; 254
    1704:	80 93 1d 07 	sts	0x071D, r24
	twi_buf = twi_data;                   //load pointer to write buffer
    1708:	70 93 1c 07 	sts	0x071C, r23
    170c:	60 93 1b 07 	sts	0x071B, r22
	twi_msg_size = byte_cnt;              //load size of xfer 
    1710:	40 93 1e 07 	sts	0x071E, r20
	TWCR = TWCR_START;                    //initiate START
    1714:	85 ea       	ldi	r24, 0xA5	; 165
    1716:	80 93 74 00 	sts	0x0074, r24
}
    171a:	08 95       	ret

0000171c <twi_start_rd>:
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void)
{
	return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    171c:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, volatile uint8_t *twi_data, uint8_t byte_cnt)
{
	while(twi_busy());                   //wait till TWI rdy for next xfer
    1720:	90 fd       	sbrc	r25, 0
    1722:	fc cf       	rjmp	.-8      	; 0x171c <twi_start_rd>
	twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1724:	81 60       	ori	r24, 0x01	; 1
    1726:	80 93 1d 07 	sts	0x071D, r24
	twi_buf = twi_data;                  //load pointer to write buffer
    172a:	70 93 1c 07 	sts	0x071C, r23
    172e:	60 93 1b 07 	sts	0x071B, r22
	twi_msg_size = byte_cnt;             //load size of xfer 
    1732:	40 93 1e 07 	sts	0x071E, r20
	TWCR = TWCR_START;                   //initiate START
    1736:	85 ea       	ldi	r24, 0xA5	; 165
    1738:	80 93 74 00 	sts	0x0074, r24
}
    173c:	08 95       	ret

0000173e <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************
void init_twi()
{
	TWDR = 0xFF;     //release SDA, default contents
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	80 93 73 00 	sts	0x0073, r24

	TWSR = 0;
    1744:	10 92 71 00 	sts	0x0071, r1
	TWBR = TWI_TWBR; //defined in twi_master.h 
    1748:	8c e0       	ldi	r24, 0x0C	; 12
    174a:	80 93 70 00 	sts	0x0070, r24
}
    174e:	08 95       	ret

00001750 <init_thermo_sensors>:
volatile uint8_t lm73_wr_buf[2];
volatile uint8_t lm73_rd_buf[2];

void init_thermo_sensors()
{
	init_twi();
    1750:	0e 94 9f 0b 	call	0x173e	; 0x173e <init_twi>
}
    1754:	08 95       	ret

00001756 <prepare_local_read>:

void prepare_local_read(uint8_t wait)
{
    1756:	1f 93       	push	r17
    1758:	18 2f       	mov	r17, r24
	lm73_wr_buf[0] = LM73_PTR_TEMP;//load lm73_wr_buf[0] with temperature pointer address                                                      
    175a:	10 92 1f 07 	sts	0x071F, r1
    twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1); //start the TWI write process
    175e:	80 e9       	ldi	r24, 0x90	; 144
    1760:	6f e1       	ldi	r22, 0x1F	; 31
    1762:	77 e0       	ldi	r23, 0x07	; 7
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>

	if (wait)
    176a:	11 23       	and	r17, r17
    176c:	31 f0       	breq	.+12     	; 0x177a <prepare_local_read+0x24>
    176e:	8f e3       	ldi	r24, 0x3F	; 63
    1770:	9f e1       	ldi	r25, 0x1F	; 31
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <prepare_local_read+0x1c>
    1776:	00 c0       	rjmp	.+0      	; 0x1778 <prepare_local_read+0x22>
    1778:	00 00       	nop
		_delay_ms(2);
}
    177a:	1f 91       	pop	r17
    177c:	08 95       	ret

0000177e <local_thermo_read>:

void local_thermo_read(uint8_t wait)
{
    177e:	1f 93       	push	r17
    1780:	18 2f       	mov	r17, r24
	twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes)
    1782:	80 e9       	ldi	r24, 0x90	; 144
    1784:	61 e2       	ldi	r22, 0x21	; 33
    1786:	77 e0       	ldi	r23, 0x07	; 7
    1788:	42 e0       	ldi	r20, 0x02	; 2
    178a:	0e 94 8e 0b 	call	0x171c	; 0x171c <twi_start_rd>
	
	if (wait)
    178e:	11 23       	and	r17, r17
    1790:	31 f0       	breq	.+12     	; 0x179e <local_thermo_read+0x20>
    1792:	8f e3       	ldi	r24, 0x3F	; 63
    1794:	9f e1       	ldi	r25, 0x1F	; 31
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <local_thermo_read+0x18>
    179a:	00 c0       	rjmp	.+0      	; 0x179c <local_thermo_read+0x1e>
    179c:	00 00       	nop
		_delay_ms(2);
}
    179e:	1f 91       	pop	r17
    17a0:	08 95       	ret

000017a2 <decode_temp>:

#ifdef MEGA128
void decode_temp(struct temperature *temp)
{
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	ec 01       	movw	r28, r24
	uint16_t raw = temp->raw;
    17a8:	68 81       	ld	r22, Y
    17aa:	79 81       	ldd	r23, Y+1	; 0x01
	
	temp->positive = TRUE;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8c 83       	std	Y+4, r24	; 0x04
	if (raw & 0x8000) {
    17b0:	77 ff       	sbrs	r23, 7
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <decode_temp+0x1a>
		temp->positive = FALSE;
    17b4:	1c 82       	std	Y+4, r1	; 0x04
		
		raw = (~raw)+1;
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	
	uint16_t whole = raw >> 7;
    17bc:	66 0f       	add	r22, r22
    17be:	67 2f       	mov	r22, r23
    17c0:	66 1f       	adc	r22, r22
    17c2:	77 0b       	sbc	r23, r23
    17c4:	71 95       	neg	r23

	temp->celsius = (uint8_t) whole;
    17c6:	6b 83       	std	Y+3, r22	; 0x03
	temp->fahrenheit = (uint8_t) temp->celsius*1.8+32;
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	88 27       	eor	r24, r24
    17cc:	77 fd       	sbrc	r23, 7
    17ce:	80 95       	com	r24
    17d0:	98 2f       	mov	r25, r24
    17d2:	0e 94 9d 11 	call	0x233a	; 0x233a <__floatsisf>
    17d6:	26 e6       	ldi	r18, 0x66	; 102
    17d8:	36 e6       	ldi	r19, 0x66	; 102
    17da:	46 ee       	ldi	r20, 0xE6	; 230
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__mulsf3>
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	52 e4       	ldi	r21, 0x42	; 66
    17ea:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    17ee:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixunssfsi>
    17f2:	6a 83       	std	Y+2, r22	; 0x02
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <get_local_temp>:
#endif

void get_local_temp(struct temperature *temp)
{
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	ec 01       	movw	r28, r24
	temp->raw = (lm73_rd_buf[0] << 8) | lm73_rd_buf[1];
    1800:	20 91 21 07 	lds	r18, 0x0721
    1804:	60 91 22 07 	lds	r22, 0x0722
    1808:	92 2f       	mov	r25, r18
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	68 2b       	or	r22, r24
    1810:	79 2b       	or	r23, r25
    1812:	79 83       	std	Y+1, r23	; 0x01
    1814:	68 83       	st	Y, r22
#ifdef MEGA128
void decode_temp(struct temperature *temp)
{
	uint16_t raw = temp->raw;
	
	temp->positive = TRUE;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	8c 83       	std	Y+4, r24	; 0x04
	if (raw & 0x8000) {
    181a:	77 ff       	sbrs	r23, 7
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <get_local_temp+0x2c>
		temp->positive = FALSE;
    181e:	1c 82       	std	Y+4, r1	; 0x04
		
		raw = (~raw)+1;
    1820:	70 95       	com	r23
    1822:	61 95       	neg	r22
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	
	uint16_t whole = raw >> 7;
    1826:	66 0f       	add	r22, r22
    1828:	67 2f       	mov	r22, r23
    182a:	66 1f       	adc	r22, r22
    182c:	77 0b       	sbc	r23, r23
    182e:	71 95       	neg	r23

	temp->celsius = (uint8_t) whole;
    1830:	6b 83       	std	Y+3, r22	; 0x03
	temp->fahrenheit = (uint8_t) temp->celsius*1.8+32;
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	88 27       	eor	r24, r24
    1836:	77 fd       	sbrc	r23, 7
    1838:	80 95       	com	r24
    183a:	98 2f       	mov	r25, r24
    183c:	0e 94 9d 11 	call	0x233a	; 0x233a <__floatsisf>
    1840:	26 e6       	ldi	r18, 0x66	; 102
    1842:	36 e6       	ldi	r19, 0x66	; 102
    1844:	46 ee       	ldi	r20, 0xE6	; 230
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__mulsf3>
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	52 e4       	ldi	r21, 0x42	; 66
    1854:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    1858:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixunssfsi>
    185c:	6a 83       	std	Y+2, r22	; 0x02
	temp->raw = (lm73_rd_buf[0] << 8) | lm73_rd_buf[1];
	
#ifdef MEGA128
	decode_temp(temp);
#endif
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <uart_putc>:
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) 
{
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1864:	5d 9b       	sbis	0x0b, 5	; 11
    1866:	fe cf       	rjmp	.-4      	; 0x1864 <uart_putc>
    UDR0 = data;    // Send data byte
    1868:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    186a:	5d 9b       	sbis	0x0b, 5	; 11
    186c:	fe cf       	rjmp	.-4      	; 0x186a <uart_putc+0x6>
}
    186e:	08 95       	ret

00001870 <uart_puts>:
//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) 
{
    1870:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1872:	80 81       	ld	r24, Z
    1874:	88 23       	and	r24, r24
    1876:	49 f0       	breq	.+18     	; 0x188a <uart_puts+0x1a>

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) 
    1878:	31 96       	adiw	r30, 0x01	; 1
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) 
{
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    187a:	5d 9b       	sbis	0x0b, 5	; 11
    187c:	fe cf       	rjmp	.-4      	; 0x187a <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    187e:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1880:	5d 9b       	sbis	0x0b, 5	; 11
    1882:	fe cf       	rjmp	.-4      	; 0x1880 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) 
{
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    1884:	81 91       	ld	r24, Z+
    1886:	88 23       	and	r24, r24
    1888:	c1 f7       	brne	.-16     	; 0x187a <uart_puts+0xa>
    188a:	08 95       	ret

0000188c <uart_puts_p>:
//
void uart_putc(char data) 
{
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    UDR0 = data;    // Send data byte
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    188c:	9c 01       	movw	r18, r24
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) 
{
    while(pgm_read_byte(str) != 0x00) // Loop through string, sending each character
    188e:	fc 01       	movw	r30, r24
    1890:	44 91       	lpm	r20, Z+
    1892:	44 23       	and	r20, r20
    1894:	69 f0       	breq	.+26     	; 0x18b0 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	f9 01       	movw	r30, r18
    189a:	24 91       	lpm	r18, Z+
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) 
{
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    189c:	5d 9b       	sbis	0x0b, 5	; 11
    189e:	fe cf       	rjmp	.-4      	; 0x189c <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    18a0:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    18a2:	5d 9b       	sbis	0x0b, 5	; 11
    18a4:	fe cf       	rjmp	.-4      	; 0x18a2 <uart_puts_p+0x16>
    18a6:	9c 01       	movw	r18, r24
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) 
{
    while(pgm_read_byte(str) != 0x00) // Loop through string, sending each character
    18a8:	fc 01       	movw	r30, r24
    18aa:	44 91       	lpm	r20, Z+
    18ac:	44 23       	and	r20, r20
    18ae:	99 f7       	brne	.-26     	; 0x1896 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
}
    18b0:	08 95       	ret

000018b2 <uart_init>:

void uart_init()
{
	//rx and tx enable, receive interrupt enabled, 8 bit characters
	//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
    18b2:	8a b1       	in	r24, 0x0a	; 10
    18b4:	88 61       	ori	r24, 0x18	; 24
    18b6:	8a b9       	out	0x0a, r24	; 10

	//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
	//async operation, no parity,  one stop bit, 8-bit characters
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    18b8:	e5 e9       	ldi	r30, 0x95	; 149
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	86 60       	ori	r24, 0x06	; 6
    18c0:	80 83       	st	Z, r24
	UBRR0H = (BAUDVALUE >> 8); //load upper byte of the baud rate into UBRR 
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	80 93 90 00 	sts	0x0090, r24
	UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    18c8:	80 e4       	ldi	r24, 0x40	; 64
    18ca:	89 b9       	out	0x09, r24	; 9
}
    18cc:	08 95       	ret

000018ce <enable_rx_interrupts>:

void enable_rx_interrupts()
{
	UCSR0B |= (1 << RXCIE0);
    18ce:	57 9a       	sbi	0x0a, 7	; 10
}
    18d0:	08 95       	ret

000018d2 <uart_getc>:
//******************************************************************
//                             uart_getc
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
	uint16_t timer = 0;
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0

	while (!(UCSR0A & (1<<RXC0))) {
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <uart_getc+0x10>
		timer++;
    18d8:	01 96       	adiw	r24, 0x01	; 1
		if(timer >= 16000)
    18da:	2e e3       	ldi	r18, 0x3E	; 62
    18dc:	80 38       	cpi	r24, 0x80	; 128
    18de:	92 07       	cpc	r25, r18
    18e0:	21 f0       	breq	.+8      	; 0x18ea <uart_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
	uint16_t timer = 0;

	while (!(UCSR0A & (1<<RXC0))) {
    18e2:	5f 9b       	sbis	0x0b, 7	; 11
    18e4:	f9 cf       	rjmp	.-14     	; 0x18d8 <uart_getc+0x6>
		//return the data into a global variable
		//give uart_getc the address of the variable
		//return a -1 if no data comes back.
	} // Wait for byte to arrive
	
	return(UDR0); //return the received data
    18e6:	8c b1       	in	r24, 0x0c	; 12
    18e8:	08 95       	ret
	uint16_t timer = 0;

	while (!(UCSR0A & (1<<RXC0))) {
		timer++;
		if(timer >= 16000)
			return(0);
    18ea:	80 e0       	ldi	r24, 0x00	; 0
		//give uart_getc the address of the variable
		//return a -1 if no data comes back.
	} // Wait for byte to arrive
	
	return(UDR0); //return the received data
}
    18ec:	08 95       	ret

000018ee <get_int_status>:
//                            get_int_status()
//
uint8_t get_int_status()
{
	//send get_int_status command
    si4734_wr_buf[0] = 0x14;
    18ee:	84 e1       	ldi	r24, 0x14	; 20
    18f0:	80 93 75 07 	sts	0x0775, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    18f4:	82 e2       	ldi	r24, 0x22	; 34
    18f6:	65 e7       	ldi	r22, 0x75	; 117
    18f8:	77 e0       	ldi	r23, 0x07	; 7
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1900:	8f e1       	ldi	r24, 0x1F	; 31
    1902:	9e e4       	ldi	r25, 0x4E	; 78
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <get_int_status+0x16>
    1908:	00 c0       	rjmp	.+0      	; 0x190a <get_int_status+0x1c>
    190a:	00 00       	nop

	_delay_ms(5);
	//get the interrupt status 
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1);
    190c:	82 e2       	ldi	r24, 0x22	; 34
    190e:	6d e8       	ldi	r22, 0x8D	; 141
    1910:	77 e0       	ldi	r23, 0x07	; 7
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 8e 0b 	call	0x171c	; 0x171c <twi_start_rd>
    return(si4734_rd_buf[0]);
}
    1918:	80 91 8d 07 	lds	r24, 0x078D
    191c:	08 95       	ret

0000191e <fm_tune_freq>:
//********************************************************************************
//                            fm_tune_freq()
//
//takes current_fm_freq and sends it to the radio chip
void fm_tune_freq(uint8_t wait)
{
    191e:	1f 93       	push	r17
    1920:	18 2f       	mov	r17, r24
	if (current_fm_freq == last_fm_freq)
    1922:	20 91 89 07 	lds	r18, 0x0789
    1926:	30 91 8a 07 	lds	r19, 0x078A
    192a:	40 91 73 07 	lds	r20, 0x0773
    192e:	50 91 74 07 	lds	r21, 0x0774
    1932:	24 17       	cp	r18, r20
    1934:	35 07       	cpc	r19, r21
    1936:	d9 f0       	breq	.+54     	; 0x196e <fm_tune_freq+0x50>
		return;
	
	si4734_wr_buf[0] = 0x20;  //fm tune command
    1938:	80 e2       	ldi	r24, 0x20	; 32
    193a:	80 93 75 07 	sts	0x0775, r24
	si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    193e:	10 92 76 07 	sts	0x0776, r1
	si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    1942:	30 93 77 07 	sts	0x0777, r19
	si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    1946:	20 93 78 07 	sts	0x0778, r18
	si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    194a:	10 92 79 07 	sts	0x0779, r1

	//send fm tune command
	twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    194e:	82 e2       	ldi	r24, 0x22	; 34
    1950:	65 e7       	ldi	r22, 0x75	; 117
    1952:	77 e0       	ldi	r23, 0x07	; 7
    1954:	45 e0       	ldi	r20, 0x05	; 5
    1956:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
	last_fm_freq = current_fm_freq;
    195a:	20 91 89 07 	lds	r18, 0x0789
    195e:	30 91 8a 07 	lds	r19, 0x078A
    1962:	30 93 74 07 	sts	0x0774, r19
    1966:	20 93 73 07 	sts	0x0773, r18

	if (wait)
    196a:	11 23       	and	r17, r17
    196c:	11 f4       	brne	.+4      	; 0x1972 <fm_tune_freq+0x54>
		_delay_ms(80);
}
    196e:	1f 91       	pop	r17
    1970:	08 95       	ret
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	97 ee       	ldi	r25, 0xE7	; 231
    1976:	a3 e0       	ldi	r26, 0x03	; 3
    1978:	81 50       	subi	r24, 0x01	; 1
    197a:	90 40       	sbci	r25, 0x00	; 0
    197c:	a0 40       	sbci	r26, 0x00	; 0
    197e:	e1 f7       	brne	.-8      	; 0x1978 <fm_tune_freq+0x5a>
    1980:	00 c0       	rjmp	.+0      	; 0x1982 <fm_tune_freq+0x64>
    1982:	00 00       	nop
    1984:	1f 91       	pop	r17
    1986:	08 95       	ret

00001988 <get_freq>:

uint16_t get_freq()
{
	return current_fm_freq/10;
    1988:	80 91 89 07 	lds	r24, 0x0789
    198c:	90 91 8a 07 	lds	r25, 0x078A
    1990:	6a e0       	ldi	r22, 0x0A	; 10
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
}
    1998:	cb 01       	movw	r24, r22
    199a:	08 95       	ret

0000199c <fm_alter_freq>:

void fm_alter_freq(uint8_t inc)
{
	if (inc) {
    199c:	88 23       	and	r24, r24
    199e:	71 f0       	breq	.+28     	; 0x19bc <fm_alter_freq+0x20>
		current_fm_freq += 20;
    19a0:	80 91 89 07 	lds	r24, 0x0789
    19a4:	90 91 8a 07 	lds	r25, 0x078A
    19a8:	44 96       	adiw	r24, 0x14	; 20
    19aa:	90 93 8a 07 	sts	0x078A, r25
    19ae:	80 93 89 07 	sts	0x0789, r24
		if (current_fm_freq == 10810)
    19b2:	2a e2       	ldi	r18, 0x2A	; 42
    19b4:	8a 33       	cpi	r24, 0x3A	; 58
    19b6:	92 07       	cpc	r25, r18
    19b8:	a9 f0       	breq	.+42     	; 0x19e4 <fm_alter_freq+0x48>
    19ba:	08 95       	ret
			current_fm_freq = MIN_FM_FREQ;
	} else {
		current_fm_freq -= 20;
    19bc:	80 91 89 07 	lds	r24, 0x0789
    19c0:	90 91 8a 07 	lds	r25, 0x078A
    19c4:	44 97       	sbiw	r24, 0x14	; 20
    19c6:	90 93 8a 07 	sts	0x078A, r25
    19ca:	80 93 89 07 	sts	0x0789, r24
		if (current_fm_freq == 8790)
    19ce:	22 e2       	ldi	r18, 0x22	; 34
    19d0:	86 35       	cpi	r24, 0x56	; 86
    19d2:	92 07       	cpc	r25, r18
    19d4:	91 f7       	brne	.-28     	; 0x19ba <fm_alter_freq+0x1e>
			current_fm_freq = MAX_FM_FREQ;
    19d6:	86 e2       	ldi	r24, 0x26	; 38
    19d8:	9a e2       	ldi	r25, 0x2A	; 42
    19da:	90 93 8a 07 	sts	0x078A, r25
    19de:	80 93 89 07 	sts	0x0789, r24
    19e2:	08 95       	ret
void fm_alter_freq(uint8_t inc)
{
	if (inc) {
		current_fm_freq += 20;
		if (current_fm_freq == 10810)
			current_fm_freq = MIN_FM_FREQ;
    19e4:	8a e6       	ldi	r24, 0x6A	; 106
    19e6:	92 e2       	ldi	r25, 0x22	; 34
    19e8:	90 93 8a 07 	sts	0x078A, r25
    19ec:	80 93 89 07 	sts	0x0789, r24
    19f0:	08 95       	ret

000019f2 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//
void am_tune_freq()
{
	si4734_wr_buf[0] = 0x40;  //am tune command
    19f2:	80 e4       	ldi	r24, 0x40	; 64
    19f4:	80 93 75 07 	sts	0x0775, r24
	si4734_wr_buf[1] = 0x00;  //no FAST tune
    19f8:	10 92 76 07 	sts	0x0776, r1
	si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    19fc:	80 91 87 07 	lds	r24, 0x0787
    1a00:	90 91 88 07 	lds	r25, 0x0788
    1a04:	90 93 77 07 	sts	0x0777, r25
	si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    1a08:	80 93 78 07 	sts	0x0778, r24
	si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1a0c:	10 92 79 07 	sts	0x0779, r1
	si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    1a10:	10 92 7a 07 	sts	0x077A, r1

	//send fm tune command
	twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1a14:	82 e2       	ldi	r24, 0x22	; 34
    1a16:	65 e7       	ldi	r22, 0x75	; 117
    1a18:	77 e0       	ldi	r23, 0x07	; 7
    1a1a:	46 e0       	ldi	r20, 0x06	; 6
    1a1c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	97 ee       	ldi	r25, 0xE7	; 231
    1a24:	a3 e0       	ldi	r26, 0x03	; 3
    1a26:	81 50       	subi	r24, 0x01	; 1
    1a28:	90 40       	sbci	r25, 0x00	; 0
    1a2a:	a0 40       	sbci	r26, 0x00	; 0
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <am_tune_freq+0x34>
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <am_tune_freq+0x3e>
    1a30:	00 00       	nop

    _delay_ms(80);
}
    1a32:	08 95       	ret

00001a34 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet
void sw_tune_freq()
{
	si4734_wr_buf[0] = 0x40;  //am tune command
    1a34:	80 e4       	ldi	r24, 0x40	; 64
    1a36:	80 93 75 07 	sts	0x0775, r24
	si4734_wr_buf[1] = 0x00;  //no FAST tune
    1a3a:	10 92 76 07 	sts	0x0776, r1
	si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    1a3e:	80 91 8b 07 	lds	r24, 0x078B
    1a42:	90 91 8c 07 	lds	r25, 0x078C
    1a46:	90 93 77 07 	sts	0x0777, r25
	si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    1a4a:	80 93 78 07 	sts	0x0778, r24
	si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1a4e:	10 92 79 07 	sts	0x0779, r1
	si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 7a 07 	sts	0x077A, r24

	//send am tune command
	twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1a58:	82 e2       	ldi	r24, 0x22	; 34
    1a5a:	65 e7       	ldi	r22, 0x75	; 117
    1a5c:	77 e0       	ldi	r23, 0x07	; 7
    1a5e:	46 e0       	ldi	r20, 0x06	; 6
    1a60:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	97 ee       	ldi	r25, 0xE7	; 231
    1a68:	a3 e0       	ldi	r26, 0x03	; 3
    1a6a:	81 50       	subi	r24, 0x01	; 1
    1a6c:	90 40       	sbci	r25, 0x00	; 0
    1a6e:	a0 40       	sbci	r26, 0x00	; 0
    1a70:	e1 f7       	brne	.-8      	; 0x1a6a <sw_tune_freq+0x36>
    1a72:	00 c0       	rjmp	.+0      	; 0x1a74 <sw_tune_freq+0x40>
    1a74:	00 00       	nop

    _delay_ms(80);
}
    1a76:	08 95       	ret

00001a78 <radio_pwr_dwn>:
//                            radio_pwr_dwn()
//
void radio_pwr_dwn()
{
	//send fm power down command
    si4734_wr_buf[0] = 0x11;
    1a78:	81 e1       	ldi	r24, 0x11	; 17
    1a7a:	80 93 75 07 	sts	0x0775, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1a7e:	82 e2       	ldi	r24, 0x22	; 34
    1a80:	65 e7       	ldi	r22, 0x75	; 117
    1a82:	77 e0       	ldi	r23, 0x07	; 7
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a8a:	87 ed       	ldi	r24, 0xD7	; 215
    1a8c:	94 e0       	ldi	r25, 0x04	; 4
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <radio_pwr_dwn+0x16>
    1a92:	00 c0       	rjmp	.+0      	; 0x1a94 <radio_pwr_dwn+0x1c>
    1a94:	00 00       	nop

	_delay_us(310);
}
    1a96:	08 95       	ret

00001a98 <fm_rsq_status>:

//********************************************************************************
//                            fm_rsq_status()
//
void fm_rsq_status(uint8_t wait)
{
    1a98:	1f 93       	push	r17
    1a9a:	18 2f       	mov	r17, r24
    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1a9c:	83 e2       	ldi	r24, 0x23	; 35
    1a9e:	80 93 75 07 	sts	0x0775, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	80 93 76 07 	sts	0x0776, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1aa8:	82 e2       	ldi	r24, 0x22	; 34
    1aaa:	65 e7       	ldi	r22, 0x75	; 117
    1aac:	77 e0       	ldi	r23, 0x07	; 7
    1aae:	42 e0       	ldi	r20, 0x02	; 2
    1ab0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>

	if (wait)
    1ab4:	11 23       	and	r17, r17
    1ab6:	31 f0       	breq	.+12     	; 0x1ac4 <fm_rsq_status+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ab8:	8f e1       	ldi	r24, 0x1F	; 31
    1aba:	9e e4       	ldi	r25, 0x4E	; 78
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <fm_rsq_status+0x24>
    1ac0:	00 c0       	rjmp	.+0      	; 0x1ac2 <fm_rsq_status+0x2a>
    1ac2:	00 00       	nop
		_delay_ms(5);

	//get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1ac4:	82 e2       	ldi	r24, 0x22	; 34
    1ac6:	6e e7       	ldi	r22, 0x7E	; 126
    1ac8:	77 e0       	ldi	r23, 0x07	; 7
    1aca:	48 e0       	ldi	r20, 0x08	; 8
    1acc:	0e 94 8e 0b 	call	0x171c	; 0x171c <twi_start_rd>
}
    1ad0:	1f 91       	pop	r17
    1ad2:	08 95       	ret

00001ad4 <get_signal_strength>:
	}

	for (; i < 250; i += 25, j++)
		signal[j] = ' ';
	*/
	sprintf(signal, "%03d/255   ", strength);
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <get_signal_strength+0x2>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <get_signal_strength+0x4>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <get_signal_strength+0x6>
    1ada:	ed b7       	in	r30, 0x3d	; 61
    1adc:	fe b7       	in	r31, 0x3e	; 62
    1ade:	31 96       	adiw	r30, 0x01	; 1
    1ae0:	ad b7       	in	r26, 0x3d	; 61
    1ae2:	be b7       	in	r27, 0x3e	; 62
    1ae4:	12 96       	adiw	r26, 0x02	; 2
    1ae6:	9c 93       	st	X, r25
    1ae8:	8e 93       	st	-X, r24
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	82 e5       	ldi	r24, 0x52	; 82
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	93 83       	std	Z+3, r25	; 0x03
    1af2:	82 83       	std	Z+2, r24	; 0x02
    1af4:	80 91 81 07 	lds	r24, 0x0781
    1af8:	84 83       	std	Z+4, r24	; 0x04
    1afa:	15 82       	std	Z+5, r1	; 0x05
    1afc:	0e 94 24 15 	call	0x2a48	; 0x2a48 <sprintf>
    1b00:	8d b7       	in	r24, 0x3d	; 61
    1b02:	9e b7       	in	r25, 0x3e	; 62
    1b04:	06 96       	adiw	r24, 0x06	; 6
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	9e bf       	out	0x3e, r25	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	8d bf       	out	0x3d, r24	; 61
}
    1b10:	08 95       	ret

00001b12 <fm_tune_status>:
//********************************************************************************
//                            fm_tune_status()
//
void fm_tune_status()
{
    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1b12:	82 e2       	ldi	r24, 0x22	; 34
    1b14:	80 93 75 07 	sts	0x0775, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	80 93 76 07 	sts	0x0776, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1b1e:	82 e2       	ldi	r24, 0x22	; 34
    1b20:	65 e7       	ldi	r22, 0x75	; 117
    1b22:	77 e0       	ldi	r23, 0x07	; 7
    1b24:	42 e0       	ldi	r20, 0x02	; 2
    1b26:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1b2a:	8f e1       	ldi	r24, 0x1F	; 31
    1b2c:	9e e4       	ldi	r25, 0x4E	; 78
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <fm_tune_status+0x1c>
    1b32:	00 c0       	rjmp	.+0      	; 0x1b34 <fm_tune_status+0x22>
    1b34:	00 00       	nop
    _delay_ms(5);

	//get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1b36:	82 e2       	ldi	r24, 0x22	; 34
    1b38:	6e e7       	ldi	r22, 0x7E	; 126
    1b3a:	77 e0       	ldi	r23, 0x07	; 7
    1b3c:	48 e0       	ldi	r20, 0x08	; 8
    1b3e:	0e 94 8e 0b 	call	0x171c	; 0x171c <twi_start_rd>
}
    1b42:	08 95       	ret

00001b44 <am_tune_status>:
//                            am_tune_status()
//
//TODO: could probably just have one tune_status() function
void am_tune_status()
{
    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    1b44:	82 e4       	ldi	r24, 0x42	; 66
    1b46:	80 93 75 07 	sts	0x0775, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	80 93 76 07 	sts	0x0776, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1b50:	82 e2       	ldi	r24, 0x22	; 34
    1b52:	65 e7       	ldi	r22, 0x75	; 117
    1b54:	77 e0       	ldi	r23, 0x07	; 7
    1b56:	42 e0       	ldi	r20, 0x02	; 2
    1b58:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1b5c:	8f e1       	ldi	r24, 0x1F	; 31
    1b5e:	9e e4       	ldi	r25, 0x4E	; 78
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <am_tune_status+0x1c>
    1b64:	00 c0       	rjmp	.+0      	; 0x1b66 <am_tune_status+0x22>
    1b66:	00 00       	nop
    _delay_ms(5);

	//get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1b68:	82 e2       	ldi	r24, 0x22	; 34
    1b6a:	6e e7       	ldi	r22, 0x7E	; 126
    1b6c:	77 e0       	ldi	r23, 0x07	; 7
    1b6e:	48 e0       	ldi	r20, 0x08	; 8
    1b70:	0e 94 8e 0b 	call	0x171c	; 0x171c <twi_start_rd>

}
    1b74:	08 95       	ret

00001b76 <am_rsq_status>:
//********************************************************************************
//                            am_rsq_status()
//
void am_rsq_status()
{
    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    1b76:	83 e4       	ldi	r24, 0x43	; 67
    1b78:	80 93 75 07 	sts	0x0775, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	80 93 76 07 	sts	0x0776, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1b82:	82 e2       	ldi	r24, 0x22	; 34
    1b84:	65 e7       	ldi	r22, 0x75	; 117
    1b86:	77 e0       	ldi	r23, 0x07	; 7
    1b88:	42 e0       	ldi	r20, 0x02	; 2
    1b8a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1b8e:	8f e1       	ldi	r24, 0x1F	; 31
    1b90:	9e e4       	ldi	r25, 0x4E	; 78
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <am_rsq_status+0x1c>
    1b96:	00 c0       	rjmp	.+0      	; 0x1b98 <am_rsq_status+0x22>
    1b98:	00 00       	nop
    _delay_ms(5);

	//get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1b9a:	82 e2       	ldi	r24, 0x22	; 34
    1b9c:	6e e7       	ldi	r22, 0x7E	; 126
    1b9e:	77 e0       	ldi	r23, 0x07	; 7
    1ba0:	48 e0       	ldi	r20, 0x08	; 8
    1ba2:	0e 94 8e 0b 	call	0x171c	; 0x171c <twi_start_rd>
}
    1ba6:	08 95       	ret

00001ba8 <set_property>:

//********************************************************************************
//                            set_property()
//
void set_property(uint16_t property, uint16_t property_value, uint8_t wait)
{
    1ba8:	1f 93       	push	r17
    1baa:	14 2f       	mov	r17, r20
    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1bac:	22 e1       	ldi	r18, 0x12	; 18
    1bae:	20 93 75 07 	sts	0x0775, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    1bb2:	10 92 76 07 	sts	0x0776, r1
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    1bb6:	90 93 77 07 	sts	0x0777, r25
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1bba:	80 93 78 07 	sts	0x0778, r24
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1bbe:	70 93 79 07 	sts	0x0779, r23
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1bc2:	60 93 7a 07 	sts	0x077A, r22
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1bc6:	82 e2       	ldi	r24, 0x22	; 34
    1bc8:	65 e7       	ldi	r22, 0x75	; 117
    1bca:	77 e0       	ldi	r23, 0x07	; 7
    1bcc:	46 e0       	ldi	r20, 0x06	; 6
    1bce:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>

	if (wait)
    1bd2:	11 23       	and	r17, r17
    1bd4:	31 f0       	breq	.+12     	; 0x1be2 <set_property+0x3a>
    1bd6:	8f e3       	ldi	r24, 0x3F	; 63
    1bd8:	9c e9       	ldi	r25, 0x9C	; 156
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <set_property+0x32>
    1bde:	00 c0       	rjmp	.+0      	; 0x1be0 <set_property+0x38>
    1be0:	00 00       	nop
		_delay_ms(10);  //set properties takes 10ms to complete
}//set_property()
    1be2:	1f 91       	pop	r17
    1be4:	08 95       	ret

00001be6 <sw_pwr_up>:
//                            sw_pwr_up()
//
void sw_pwr_up()
{
	//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = 0x01;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 75 07 	sts	0x0775, r24
    si4734_wr_buf[1] = 0x51;
    1bec:	81 e5       	ldi	r24, 0x51	; 81
    1bee:	80 93 76 07 	sts	0x0776, r24
    si4734_wr_buf[2] = 0x05;
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	80 93 77 07 	sts	0x0777, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1bf8:	82 e2       	ldi	r24, 0x22	; 34
    1bfa:	65 e7       	ldi	r22, 0x75	; 117
    1bfc:	77 e0       	ldi	r23, 0x07	; 7
    1bfe:	43 e0       	ldi	r20, 0x03	; 3
    1c00:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	9b ed       	ldi	r25, 0xDB	; 219
    1c08:	a5 e0       	ldi	r26, 0x05	; 5
    1c0a:	81 50       	subi	r24, 0x01	; 1
    1c0c:	90 40       	sbci	r25, 0x00	; 0
    1c0e:	a0 40       	sbci	r26, 0x00	; 0
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <sw_pwr_up+0x24>
    1c12:	00 c0       	rjmp	.+0      	; 0x1c14 <sw_pwr_up+0x2e>
    1c14:	00 00       	nop

	//get the interrupt status 
	_delay_ms(120);   

	//set property to disable soft muting for shortwave broadcasts
	set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000, 1); //cut off soft mute  
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	93 e3       	ldi	r25, 0x33	; 51
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <set_property>
	//select 4khz filter BW and engage power line filter
	set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER), 1); 
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	91 e3       	ldi	r25, 0x31	; 49
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	71 e0       	ldi	r23, 0x01	; 1
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <set_property>
	set_property(GPO_IEN, (1<<GPO_IEN_STCIEN_SHFT), 1);    
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <set_property>
}
    1c40:	08 95       	ret

00001c42 <am_pwr_up>:
//                            am_pwr_up()
//
void am_pwr_up()
{
	//send am power up command
	si4734_wr_buf[0] = 0x01;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 75 07 	sts	0x0775, r24
	si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    1c48:	81 e5       	ldi	r24, 0x51	; 81
    1c4a:	80 93 76 07 	sts	0x0776, r24
	si4734_wr_buf[2] = 0x05;
    1c4e:	85 e0       	ldi	r24, 0x05	; 5
    1c50:	80 93 77 07 	sts	0x0777, r24
	twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1c54:	82 e2       	ldi	r24, 0x22	; 34
    1c56:	65 e7       	ldi	r22, 0x75	; 117
    1c58:	77 e0       	ldi	r23, 0x07	; 7
    1c5a:	43 e0       	ldi	r20, 0x03	; 3
    1c5c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	9b ed       	ldi	r25, 0xDB	; 219
    1c64:	a5 e0       	ldi	r26, 0x05	; 5
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	90 40       	sbci	r25, 0x00	; 0
    1c6a:	a0 40       	sbci	r26, 0x00	; 0
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <am_pwr_up+0x24>
    1c6e:	00 c0       	rjmp	.+0      	; 0x1c70 <am_pwr_up+0x2e>
    1c70:	00 00       	nop

	_delay_ms(120);   

	set_property(GPO_IEN, (1<<GPO_IEN_STCIEN_SHFT), 1);    //enable Seek/Tune Complete interrupt
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <set_property>
}
    1c80:	08 95       	ret

00001c82 <fm_pwr_up>:
//                            fm_pwr_up()
//
void fm_pwr_up()
{
	//send fm power up command
	si4734_wr_buf[0] = 0x01;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	80 93 75 07 	sts	0x0775, r24
	si4734_wr_buf[1] = 0x50; //GPO2OEN and XOSCEN selected
    1c88:	80 e5       	ldi	r24, 0x50	; 80
    1c8a:	80 93 76 07 	sts	0x0776, r24
	si4734_wr_buf[2] = 0x05; //analog audio outputs
    1c8e:	85 e0       	ldi	r24, 0x05	; 5
    1c90:	80 93 77 07 	sts	0x0777, r24
	twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1c94:	82 e2       	ldi	r24, 0x22	; 34
    1c96:	65 e7       	ldi	r22, 0x75	; 117
    1c98:	77 e0       	ldi	r23, 0x07	; 7
    1c9a:	43 e0       	ldi	r20, 0x03	; 3
    1c9c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <twi_start_wr>
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	9b ed       	ldi	r25, 0xDB	; 219
    1ca4:	a5 e0       	ldi	r26, 0x05	; 5
    1ca6:	81 50       	subi	r24, 0x01	; 1
    1ca8:	90 40       	sbci	r25, 0x00	; 0
    1caa:	a0 40       	sbci	r26, 0x00	; 0
    1cac:	e1 f7       	brne	.-8      	; 0x1ca6 <fm_pwr_up+0x24>
    1cae:	00 c0       	rjmp	.+0      	; 0x1cb0 <fm_pwr_up+0x2e>
    1cb0:	00 00       	nop

	_delay_ms(120);   //startup delay as specified 
  
	set_property(GPO_IEN, (1<<GPO_IEN_STCIEN_SHFT), 1);    //enable Seek/Tune Complete interrupt
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <set_property>
}
    1cc0:	08 95       	ret

00001cc2 <reset_radio>:
		_delay_ms(10);  //set properties takes 10ms to complete
}//set_property()

void reset_radio()
{
	PORTE &= ~(1 << PE7); //int2 initially low to sense TWI mode
    1cc2:	1f 98       	cbi	0x03, 7	; 3
	DDRE  |= 0x80;
    1cc4:	17 9a       	sbi	0x02, 7	; 2

	PORTE |=  (1 << PE2); //hardware reset Si4734 
    1cc6:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cc8:	8f e1       	ldi	r24, 0x1F	; 31
    1cca:	93 e0       	ldi	r25, 0x03	; 3
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <reset_radio+0xa>
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <reset_radio+0x10>
    1cd2:	00 00       	nop
	_delay_us(200);     //hold for 200us, 100us by spec         
	PORTE &= ~(1 << PE2); //release reset 
    1cd4:	1a 98       	cbi	0x03, 2	; 3
    1cd6:	90 ea       	ldi	r25, 0xA0	; 160
    1cd8:	9a 95       	dec	r25
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <reset_radio+0x16>
	_delay_us(30);      //5us required because of my slow I2C translators I suspect

	DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
    1cdc:	17 98       	cbi	0x02, 7	; 2
}
    1cde:	08 95       	ret

00001ce0 <mute_radio>:

void mute_radio(uint8_t wait)
{
    1ce0:	48 2f       	mov	r20, r24
	muted = TRUE;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 86 07 	sts	0x0786, r24
	set_property(RX_HARD_MUTE, MUTE_LR, wait);
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e4       	ldi	r25, 0x40	; 64
    1cec:	63 e0       	ldi	r22, 0x03	; 3
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <set_property>
}
    1cf4:	08 95       	ret

00001cf6 <unmute_radio>:

void unmute_radio()
{
	muted = FALSE;
    1cf6:	10 92 86 07 	sts	0x0786, r1
	set_property(RX_HARD_MUTE, UNMUTE, 0);
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e4       	ldi	r25, 0x40	; 64
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <set_property>
}
    1d08:	08 95       	ret

00001d0a <is_muted>:

uint8_t is_muted()
{
	return muted;
}
    1d0a:	80 91 86 07 	lds	r24, 0x0786
    1d0e:	08 95       	ret

00001d10 <enable_radio>:

void enable_radio()
{
	current_fm_freq = 9910;
    1d10:	86 eb       	ldi	r24, 0xB6	; 182
    1d12:	96 e2       	ldi	r25, 0x26	; 38
    1d14:	90 93 8a 07 	sts	0x078A, r25
    1d18:	80 93 89 07 	sts	0x0789, r24
	last_fm_freq = 0;
    1d1c:	10 92 74 07 	sts	0x0774, r1
    1d20:	10 92 73 07 	sts	0x0773, r1

	reset_radio();
    1d24:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <reset_radio>
	init_twi();
    1d28:	0e 94 9f 0b 	call	0x173e	; 0x173e <init_twi>

	fm_pwr_up();
    1d2c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <fm_pwr_up>
	
	mute_radio(1);
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <mute_radio>
	fm_tune_freq(1);
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	0e 94 8f 0c 	call	0x191e	; 0x191e <fm_tune_freq>
}
    1d3c:	08 95       	ret

00001d3e <__fixunssfsi>:
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	7b 01       	movw	r14, r22
    1d48:	8c 01       	movw	r16, r24
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	5f e4       	ldi	r21, 0x4F	; 79
    1d52:	0e 94 6d 11 	call	0x22da	; 0x22da <__gesf2>
    1d56:	87 fd       	sbrc	r24, 7
    1d58:	11 c0       	rjmp	.+34     	; 0x1d7c <__fixunssfsi+0x3e>
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	b7 01       	movw	r22, r14
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	5f e4       	ldi	r21, 0x4F	; 79
    1d66:	0e 94 42 10 	call	0x2084	; 0x2084 <__subsf3>
    1d6a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fixsfsi>
    1d6e:	9b 01       	movw	r18, r22
    1d70:	ac 01       	movw	r20, r24
    1d72:	20 50       	subi	r18, 0x00	; 0
    1d74:	30 40       	sbci	r19, 0x00	; 0
    1d76:	40 40       	sbci	r20, 0x00	; 0
    1d78:	50 48       	sbci	r21, 0x80	; 128
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <__fixunssfsi+0x4a>
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	b7 01       	movw	r22, r14
    1d80:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fixsfsi>
    1d84:	9b 01       	movw	r18, r22
    1d86:	ac 01       	movw	r20, r24
    1d88:	b9 01       	movw	r22, r18
    1d8a:	ca 01       	movw	r24, r20
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	08 95       	ret

00001d96 <_fpadd_parts>:
    1d96:	a0 e0       	ldi	r26, 0x00	; 0
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e1 ed       	ldi	r30, 0xD1	; 209
    1d9c:	fe e0       	ldi	r31, 0x0E	; 14
    1d9e:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__prologue_saves__+0x8>
    1da2:	fc 01       	movw	r30, r24
    1da4:	ea 01       	movw	r28, r20
    1da6:	80 81       	ld	r24, Z
    1da8:	82 30       	cpi	r24, 0x02	; 2
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <_fpadd_parts+0x18>
    1dac:	38 c1       	rjmp	.+624    	; 0x201e <_fpadd_parts+0x288>
    1dae:	db 01       	movw	r26, r22
    1db0:	9c 91       	ld	r25, X
    1db2:	92 30       	cpi	r25, 0x02	; 2
    1db4:	08 f4       	brcc	.+2      	; 0x1db8 <_fpadd_parts+0x22>
    1db6:	30 c1       	rjmp	.+608    	; 0x2018 <_fpadd_parts+0x282>
    1db8:	84 30       	cpi	r24, 0x04	; 4
    1dba:	59 f4       	brne	.+22     	; 0x1dd2 <_fpadd_parts+0x3c>
    1dbc:	94 30       	cpi	r25, 0x04	; 4
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <_fpadd_parts+0x2c>
    1dc0:	2e c1       	rjmp	.+604    	; 0x201e <_fpadd_parts+0x288>
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	11 96       	adiw	r26, 0x01	; 1
    1dc6:	8c 91       	ld	r24, X
    1dc8:	11 97       	sbiw	r26, 0x01	; 1
    1dca:	98 17       	cp	r25, r24
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <_fpadd_parts+0x3a>
    1dce:	21 c1       	rjmp	.+578    	; 0x2012 <_fpadd_parts+0x27c>
    1dd0:	26 c1       	rjmp	.+588    	; 0x201e <_fpadd_parts+0x288>
    1dd2:	94 30       	cpi	r25, 0x04	; 4
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <_fpadd_parts+0x42>
    1dd6:	20 c1       	rjmp	.+576    	; 0x2018 <_fpadd_parts+0x282>
    1dd8:	92 30       	cpi	r25, 0x02	; 2
    1dda:	b1 f4       	brne	.+44     	; 0x1e08 <_fpadd_parts+0x72>
    1ddc:	82 30       	cpi	r24, 0x02	; 2
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <_fpadd_parts+0x4c>
    1de0:	1e c1       	rjmp	.+572    	; 0x201e <_fpadd_parts+0x288>
    1de2:	ca 01       	movw	r24, r20
    1de4:	af 01       	movw	r20, r30
    1de6:	28 e0       	ldi	r18, 0x08	; 8
    1de8:	da 01       	movw	r26, r20
    1dea:	0d 90       	ld	r0, X+
    1dec:	ad 01       	movw	r20, r26
    1dee:	dc 01       	movw	r26, r24
    1df0:	0d 92       	st	X+, r0
    1df2:	cd 01       	movw	r24, r26
    1df4:	21 50       	subi	r18, 0x01	; 1
    1df6:	c1 f7       	brne	.-16     	; 0x1de8 <_fpadd_parts+0x52>
    1df8:	db 01       	movw	r26, r22
    1dfa:	11 96       	adiw	r26, 0x01	; 1
    1dfc:	8c 91       	ld	r24, X
    1dfe:	11 97       	sbiw	r26, 0x01	; 1
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	89 23       	and	r24, r25
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	0a c1       	rjmp	.+532    	; 0x201c <_fpadd_parts+0x286>
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <_fpadd_parts+0x78>
    1e0c:	05 c1       	rjmp	.+522    	; 0x2018 <_fpadd_parts+0x282>
    1e0e:	c2 80       	ldd	r12, Z+2	; 0x02
    1e10:	d3 80       	ldd	r13, Z+3	; 0x03
    1e12:	db 01       	movw	r26, r22
    1e14:	12 96       	adiw	r26, 0x02	; 2
    1e16:	6d 90       	ld	r6, X+
    1e18:	7c 90       	ld	r7, X
    1e1a:	13 97       	sbiw	r26, 0x03	; 3
    1e1c:	24 81       	ldd	r18, Z+4	; 0x04
    1e1e:	35 81       	ldd	r19, Z+5	; 0x05
    1e20:	46 81       	ldd	r20, Z+6	; 0x06
    1e22:	57 81       	ldd	r21, Z+7	; 0x07
    1e24:	14 96       	adiw	r26, 0x04	; 4
    1e26:	ed 90       	ld	r14, X+
    1e28:	fd 90       	ld	r15, X+
    1e2a:	0d 91       	ld	r16, X+
    1e2c:	1c 91       	ld	r17, X
    1e2e:	17 97       	sbiw	r26, 0x07	; 7
    1e30:	c6 01       	movw	r24, r12
    1e32:	86 19       	sub	r24, r6
    1e34:	97 09       	sbc	r25, r7
    1e36:	5c 01       	movw	r10, r24
    1e38:	97 ff       	sbrs	r25, 7
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <_fpadd_parts+0xae>
    1e3c:	aa 24       	eor	r10, r10
    1e3e:	bb 24       	eor	r11, r11
    1e40:	a8 1a       	sub	r10, r24
    1e42:	b9 0a       	sbc	r11, r25
    1e44:	b0 e2       	ldi	r27, 0x20	; 32
    1e46:	ab 16       	cp	r10, r27
    1e48:	b1 04       	cpc	r11, r1
    1e4a:	0c f0       	brlt	.+2      	; 0x1e4e <_fpadd_parts+0xb8>
    1e4c:	61 c0       	rjmp	.+194    	; 0x1f10 <_fpadd_parts+0x17a>
    1e4e:	18 16       	cp	r1, r24
    1e50:	19 06       	cpc	r1, r25
    1e52:	6c f5       	brge	.+90     	; 0x1eae <_fpadd_parts+0x118>
    1e54:	37 01       	movw	r6, r14
    1e56:	48 01       	movw	r8, r16
    1e58:	0a 2c       	mov	r0, r10
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <_fpadd_parts+0xce>
    1e5c:	96 94       	lsr	r9
    1e5e:	87 94       	ror	r8
    1e60:	77 94       	ror	r7
    1e62:	67 94       	ror	r6
    1e64:	0a 94       	dec	r0
    1e66:	d2 f7       	brpl	.-12     	; 0x1e5c <_fpadd_parts+0xc6>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	0a 2c       	mov	r0, r10
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <_fpadd_parts+0xe6>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	aa 1f       	adc	r26, r26
    1e7a:	bb 1f       	adc	r27, r27
    1e7c:	0a 94       	dec	r0
    1e7e:	d2 f7       	brpl	.-12     	; 0x1e74 <_fpadd_parts+0xde>
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	a1 09       	sbc	r26, r1
    1e84:	b1 09       	sbc	r27, r1
    1e86:	8e 21       	and	r24, r14
    1e88:	9f 21       	and	r25, r15
    1e8a:	a0 23       	and	r26, r16
    1e8c:	b1 23       	and	r27, r17
    1e8e:	ee 24       	eor	r14, r14
    1e90:	ff 24       	eor	r15, r15
    1e92:	87 01       	movw	r16, r14
    1e94:	e3 94       	inc	r14
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	a1 05       	cpc	r26, r1
    1e9a:	b1 05       	cpc	r27, r1
    1e9c:	19 f4       	brne	.+6      	; 0x1ea4 <_fpadd_parts+0x10e>
    1e9e:	ee 24       	eor	r14, r14
    1ea0:	ff 24       	eor	r15, r15
    1ea2:	87 01       	movw	r16, r14
    1ea4:	e6 28       	or	r14, r6
    1ea6:	f7 28       	or	r15, r7
    1ea8:	08 29       	or	r16, r8
    1eaa:	19 29       	or	r17, r9
    1eac:	3c c0       	rjmp	.+120    	; 0x1f26 <_fpadd_parts+0x190>
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	d1 f1       	breq	.+116    	; 0x1f26 <_fpadd_parts+0x190>
    1eb2:	ca 0c       	add	r12, r10
    1eb4:	db 1c       	adc	r13, r11
    1eb6:	39 01       	movw	r6, r18
    1eb8:	4a 01       	movw	r8, r20
    1eba:	0a 2c       	mov	r0, r10
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <_fpadd_parts+0x130>
    1ebe:	96 94       	lsr	r9
    1ec0:	87 94       	ror	r8
    1ec2:	77 94       	ror	r7
    1ec4:	67 94       	ror	r6
    1ec6:	0a 94       	dec	r0
    1ec8:	d2 f7       	brpl	.-12     	; 0x1ebe <_fpadd_parts+0x128>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	0a 2c       	mov	r0, r10
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <_fpadd_parts+0x148>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	0a 94       	dec	r0
    1ee0:	d2 f7       	brpl	.-12     	; 0x1ed6 <_fpadd_parts+0x140>
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	a1 09       	sbc	r26, r1
    1ee6:	b1 09       	sbc	r27, r1
    1ee8:	82 23       	and	r24, r18
    1eea:	93 23       	and	r25, r19
    1eec:	a4 23       	and	r26, r20
    1eee:	b5 23       	and	r27, r21
    1ef0:	21 e0       	ldi	r18, 0x01	; 1
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	a1 05       	cpc	r26, r1
    1efc:	b1 05       	cpc	r27, r1
    1efe:	19 f4       	brne	.+6      	; 0x1f06 <_fpadd_parts+0x170>
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	a9 01       	movw	r20, r18
    1f06:	26 29       	or	r18, r6
    1f08:	37 29       	or	r19, r7
    1f0a:	48 29       	or	r20, r8
    1f0c:	59 29       	or	r21, r9
    1f0e:	0b c0       	rjmp	.+22     	; 0x1f26 <_fpadd_parts+0x190>
    1f10:	6c 14       	cp	r6, r12
    1f12:	7d 04       	cpc	r7, r13
    1f14:	24 f4       	brge	.+8      	; 0x1f1e <_fpadd_parts+0x188>
    1f16:	ee 24       	eor	r14, r14
    1f18:	ff 24       	eor	r15, r15
    1f1a:	87 01       	movw	r16, r14
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <_fpadd_parts+0x190>
    1f1e:	63 01       	movw	r12, r6
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	a9 01       	movw	r20, r18
    1f26:	81 81       	ldd	r24, Z+1	; 0x01
    1f28:	fb 01       	movw	r30, r22
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	89 17       	cp	r24, r25
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <_fpadd_parts+0x19c>
    1f30:	45 c0       	rjmp	.+138    	; 0x1fbc <_fpadd_parts+0x226>
    1f32:	88 23       	and	r24, r24
    1f34:	49 f0       	breq	.+18     	; 0x1f48 <_fpadd_parts+0x1b2>
    1f36:	d8 01       	movw	r26, r16
    1f38:	c7 01       	movw	r24, r14
    1f3a:	82 1b       	sub	r24, r18
    1f3c:	93 0b       	sbc	r25, r19
    1f3e:	a4 0b       	sbc	r26, r20
    1f40:	b5 0b       	sbc	r27, r21
    1f42:	9c 01       	movw	r18, r24
    1f44:	ad 01       	movw	r20, r26
    1f46:	04 c0       	rjmp	.+8      	; 0x1f50 <_fpadd_parts+0x1ba>
    1f48:	2e 19       	sub	r18, r14
    1f4a:	3f 09       	sbc	r19, r15
    1f4c:	40 0b       	sbc	r20, r16
    1f4e:	51 0b       	sbc	r21, r17
    1f50:	57 fd       	sbrc	r21, 7
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <_fpadd_parts+0x1c6>
    1f54:	19 82       	std	Y+1, r1	; 0x01
    1f56:	db 82       	std	Y+3, r13	; 0x03
    1f58:	ca 82       	std	Y+2, r12	; 0x02
    1f5a:	0b c0       	rjmp	.+22     	; 0x1f72 <_fpadd_parts+0x1dc>
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	db 82       	std	Y+3, r13	; 0x03
    1f62:	ca 82       	std	Y+2, r12	; 0x02
    1f64:	50 95       	com	r21
    1f66:	40 95       	com	r20
    1f68:	30 95       	com	r19
    1f6a:	21 95       	neg	r18
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f70:	5f 4f       	sbci	r21, 0xFF	; 255
    1f72:	2c 83       	std	Y+4, r18	; 0x04
    1f74:	3d 83       	std	Y+5, r19	; 0x05
    1f76:	4e 83       	std	Y+6, r20	; 0x06
    1f78:	5f 83       	std	Y+7, r21	; 0x07
    1f7a:	0d c0       	rjmp	.+26     	; 0x1f96 <_fpadd_parts+0x200>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	aa 1f       	adc	r26, r26
    1f82:	bb 1f       	adc	r27, r27
    1f84:	8c 83       	std	Y+4, r24	; 0x04
    1f86:	9d 83       	std	Y+5, r25	; 0x05
    1f88:	ae 83       	std	Y+6, r26	; 0x06
    1f8a:	bf 83       	std	Y+7, r27	; 0x07
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9b 83       	std	Y+3, r25	; 0x03
    1f94:	8a 83       	std	Y+2, r24	; 0x02
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9a:	ae 81       	ldd	r26, Y+6	; 0x06
    1f9c:	bf 81       	ldd	r27, Y+7	; 0x07
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	ad 01       	movw	r20, r26
    1fa2:	21 50       	subi	r18, 0x01	; 1
    1fa4:	30 40       	sbci	r19, 0x00	; 0
    1fa6:	40 40       	sbci	r20, 0x00	; 0
    1fa8:	50 40       	sbci	r21, 0x00	; 0
    1faa:	2f 3f       	cpi	r18, 0xFF	; 255
    1fac:	ef ef       	ldi	r30, 0xFF	; 255
    1fae:	3e 07       	cpc	r19, r30
    1fb0:	ef ef       	ldi	r30, 0xFF	; 255
    1fb2:	4e 07       	cpc	r20, r30
    1fb4:	ef e3       	ldi	r30, 0x3F	; 63
    1fb6:	5e 07       	cpc	r21, r30
    1fb8:	08 f3       	brcs	.-62     	; 0x1f7c <_fpadd_parts+0x1e6>
    1fba:	0b c0       	rjmp	.+22     	; 0x1fd2 <_fpadd_parts+0x23c>
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	db 82       	std	Y+3, r13	; 0x03
    1fc0:	ca 82       	std	Y+2, r12	; 0x02
    1fc2:	2e 0d       	add	r18, r14
    1fc4:	3f 1d       	adc	r19, r15
    1fc6:	40 1f       	adc	r20, r16
    1fc8:	51 1f       	adc	r21, r17
    1fca:	2c 83       	std	Y+4, r18	; 0x04
    1fcc:	3d 83       	std	Y+5, r19	; 0x05
    1fce:	4e 83       	std	Y+6, r20	; 0x06
    1fd0:	5f 83       	std	Y+7, r21	; 0x07
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	88 83       	st	Y, r24
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	4e 81       	ldd	r20, Y+6	; 0x06
    1fdc:	5f 81       	ldd	r21, Y+7	; 0x07
    1fde:	57 ff       	sbrs	r21, 7
    1fe0:	1d c0       	rjmp	.+58     	; 0x201c <_fpadd_parts+0x286>
    1fe2:	da 01       	movw	r26, r20
    1fe4:	c9 01       	movw	r24, r18
    1fe6:	81 70       	andi	r24, 0x01	; 1
    1fe8:	90 70       	andi	r25, 0x00	; 0
    1fea:	a0 70       	andi	r26, 0x00	; 0
    1fec:	b0 70       	andi	r27, 0x00	; 0
    1fee:	56 95       	lsr	r21
    1ff0:	47 95       	ror	r20
    1ff2:	37 95       	ror	r19
    1ff4:	27 95       	ror	r18
    1ff6:	82 2b       	or	r24, r18
    1ff8:	93 2b       	or	r25, r19
    1ffa:	a4 2b       	or	r26, r20
    1ffc:	b5 2b       	or	r27, r21
    1ffe:	8c 83       	std	Y+4, r24	; 0x04
    2000:	9d 83       	std	Y+5, r25	; 0x05
    2002:	ae 83       	std	Y+6, r26	; 0x06
    2004:	bf 83       	std	Y+7, r27	; 0x07
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	9b 83       	std	Y+3, r25	; 0x03
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	05 c0       	rjmp	.+10     	; 0x201c <_fpadd_parts+0x286>
    2012:	ee e5       	ldi	r30, 0x5E	; 94
    2014:	f1 e0       	ldi	r31, 0x01	; 1
    2016:	03 c0       	rjmp	.+6      	; 0x201e <_fpadd_parts+0x288>
    2018:	fb 01       	movw	r30, r22
    201a:	01 c0       	rjmp	.+2      	; 0x201e <_fpadd_parts+0x288>
    201c:	fe 01       	movw	r30, r28
    201e:	cf 01       	movw	r24, r30
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	ee e0       	ldi	r30, 0x0E	; 14
    2026:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__epilogue_restores__+0x8>

0000202a <__addsf3>:
    202a:	a0 e2       	ldi	r26, 0x20	; 32
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	eb e1       	ldi	r30, 0x1B	; 27
    2030:	f0 e1       	ldi	r31, 0x10	; 16
    2032:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
    2036:	69 83       	std	Y+1, r22	; 0x01
    2038:	7a 83       	std	Y+2, r23	; 0x02
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	2d 83       	std	Y+5, r18	; 0x05
    2040:	3e 83       	std	Y+6, r19	; 0x06
    2042:	4f 83       	std	Y+7, r20	; 0x07
    2044:	58 87       	std	Y+8, r21	; 0x08
    2046:	89 e0       	ldi	r24, 0x09	; 9
    2048:	e8 2e       	mov	r14, r24
    204a:	f1 2c       	mov	r15, r1
    204c:	ec 0e       	add	r14, r28
    204e:	fd 1e       	adc	r15, r29
    2050:	ce 01       	movw	r24, r28
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	b7 01       	movw	r22, r14
    2056:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    205a:	8e 01       	movw	r16, r28
    205c:	0f 5e       	subi	r16, 0xEF	; 239
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	ce 01       	movw	r24, r28
    2062:	05 96       	adiw	r24, 0x05	; 5
    2064:	b8 01       	movw	r22, r16
    2066:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    206a:	c7 01       	movw	r24, r14
    206c:	b8 01       	movw	r22, r16
    206e:	ae 01       	movw	r20, r28
    2070:	47 5e       	subi	r20, 0xE7	; 231
    2072:	5f 4f       	sbci	r21, 0xFF	; 255
    2074:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_fpadd_parts>
    2078:	0e 94 21 13 	call	0x2642	; 0x2642 <__pack_f>
    207c:	a0 96       	adiw	r28, 0x20	; 32
    207e:	e6 e0       	ldi	r30, 0x06	; 6
    2080:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

00002084 <__subsf3>:
    2084:	a0 e2       	ldi	r26, 0x20	; 32
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e8 e4       	ldi	r30, 0x48	; 72
    208a:	f0 e1       	ldi	r31, 0x10	; 16
    208c:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
    2090:	69 83       	std	Y+1, r22	; 0x01
    2092:	7a 83       	std	Y+2, r23	; 0x02
    2094:	8b 83       	std	Y+3, r24	; 0x03
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	2d 83       	std	Y+5, r18	; 0x05
    209a:	3e 83       	std	Y+6, r19	; 0x06
    209c:	4f 83       	std	Y+7, r20	; 0x07
    209e:	58 87       	std	Y+8, r21	; 0x08
    20a0:	8e 01       	movw	r16, r28
    20a2:	07 5f       	subi	r16, 0xF7	; 247
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	ce 01       	movw	r24, r28
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	b8 01       	movw	r22, r16
    20ac:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    20b0:	91 e1       	ldi	r25, 0x11	; 17
    20b2:	e9 2e       	mov	r14, r25
    20b4:	f1 2c       	mov	r15, r1
    20b6:	ec 0e       	add	r14, r28
    20b8:	fd 1e       	adc	r15, r29
    20ba:	ce 01       	movw	r24, r28
    20bc:	05 96       	adiw	r24, 0x05	; 5
    20be:	b7 01       	movw	r22, r14
    20c0:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    20c4:	8a 89       	ldd	r24, Y+18	; 0x12
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	89 27       	eor	r24, r25
    20ca:	8a 8b       	std	Y+18, r24	; 0x12
    20cc:	c8 01       	movw	r24, r16
    20ce:	b7 01       	movw	r22, r14
    20d0:	ae 01       	movw	r20, r28
    20d2:	47 5e       	subi	r20, 0xE7	; 231
    20d4:	5f 4f       	sbci	r21, 0xFF	; 255
    20d6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_fpadd_parts>
    20da:	0e 94 21 13 	call	0x2642	; 0x2642 <__pack_f>
    20de:	a0 96       	adiw	r28, 0x20	; 32
    20e0:	e6 e0       	ldi	r30, 0x06	; 6
    20e2:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

000020e6 <__mulsf3>:
    20e6:	a0 e2       	ldi	r26, 0x20	; 32
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e9 e7       	ldi	r30, 0x79	; 121
    20ec:	f0 e1       	ldi	r31, 0x10	; 16
    20ee:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__prologue_saves__>
    20f2:	69 83       	std	Y+1, r22	; 0x01
    20f4:	7a 83       	std	Y+2, r23	; 0x02
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    20f8:	9c 83       	std	Y+4, r25	; 0x04
    20fa:	2d 83       	std	Y+5, r18	; 0x05
    20fc:	3e 83       	std	Y+6, r19	; 0x06
    20fe:	4f 83       	std	Y+7, r20	; 0x07
    2100:	58 87       	std	Y+8, r21	; 0x08
    2102:	ce 01       	movw	r24, r28
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	be 01       	movw	r22, r28
    2108:	67 5f       	subi	r22, 0xF7	; 247
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    2110:	ce 01       	movw	r24, r28
    2112:	05 96       	adiw	r24, 0x05	; 5
    2114:	be 01       	movw	r22, r28
    2116:	6f 5e       	subi	r22, 0xEF	; 239
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    211e:	99 85       	ldd	r25, Y+9	; 0x09
    2120:	92 30       	cpi	r25, 0x02	; 2
    2122:	78 f0       	brcs	.+30     	; 0x2142 <__mulsf3+0x5c>
    2124:	89 89       	ldd	r24, Y+17	; 0x11
    2126:	82 30       	cpi	r24, 0x02	; 2
    2128:	c0 f0       	brcs	.+48     	; 0x215a <__mulsf3+0x74>
    212a:	94 30       	cpi	r25, 0x04	; 4
    212c:	19 f4       	brne	.+6      	; 0x2134 <__mulsf3+0x4e>
    212e:	82 30       	cpi	r24, 0x02	; 2
    2130:	41 f4       	brne	.+16     	; 0x2142 <__mulsf3+0x5c>
    2132:	cb c0       	rjmp	.+406    	; 0x22ca <__mulsf3+0x1e4>
    2134:	84 30       	cpi	r24, 0x04	; 4
    2136:	19 f4       	brne	.+6      	; 0x213e <__mulsf3+0x58>
    2138:	92 30       	cpi	r25, 0x02	; 2
    213a:	79 f4       	brne	.+30     	; 0x215a <__mulsf3+0x74>
    213c:	c6 c0       	rjmp	.+396    	; 0x22ca <__mulsf3+0x1e4>
    213e:	92 30       	cpi	r25, 0x02	; 2
    2140:	51 f4       	brne	.+20     	; 0x2156 <__mulsf3+0x70>
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	2a 85       	ldd	r18, Y+10	; 0x0a
    2146:	9a 89       	ldd	r25, Y+18	; 0x12
    2148:	29 17       	cp	r18, r25
    214a:	09 f4       	brne	.+2      	; 0x214e <__mulsf3+0x68>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	8a 87       	std	Y+10, r24	; 0x0a
    2150:	ce 01       	movw	r24, r28
    2152:	09 96       	adiw	r24, 0x09	; 9
    2154:	bc c0       	rjmp	.+376    	; 0x22ce <__mulsf3+0x1e8>
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	51 f4       	brne	.+20     	; 0x216e <__mulsf3+0x88>
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	2a 85       	ldd	r18, Y+10	; 0x0a
    215e:	9a 89       	ldd	r25, Y+18	; 0x12
    2160:	29 17       	cp	r18, r25
    2162:	09 f4       	brne	.+2      	; 0x2166 <__mulsf3+0x80>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	8a 8b       	std	Y+18, r24	; 0x12
    2168:	ce 01       	movw	r24, r28
    216a:	41 96       	adiw	r24, 0x11	; 17
    216c:	b0 c0       	rjmp	.+352    	; 0x22ce <__mulsf3+0x1e8>
    216e:	6d 84       	ldd	r6, Y+13	; 0x0d
    2170:	7e 84       	ldd	r7, Y+14	; 0x0e
    2172:	8f 84       	ldd	r8, Y+15	; 0x0f
    2174:	98 88       	ldd	r9, Y+16	; 0x10
    2176:	ed 88       	ldd	r14, Y+21	; 0x15
    2178:	fe 88       	ldd	r15, Y+22	; 0x16
    217a:	0f 89       	ldd	r16, Y+23	; 0x17
    217c:	18 8d       	ldd	r17, Y+24	; 0x18
    217e:	e0 e2       	ldi	r30, 0x20	; 32
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	dc 01       	movw	r26, r24
    2188:	aa 24       	eor	r10, r10
    218a:	bb 24       	eor	r11, r11
    218c:	65 01       	movw	r12, r10
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	a9 01       	movw	r20, r18
    2194:	b3 01       	movw	r22, r6
    2196:	61 70       	andi	r22, 0x01	; 1
    2198:	70 70       	andi	r23, 0x00	; 0
    219a:	61 15       	cp	r22, r1
    219c:	71 05       	cpc	r23, r1
    219e:	d1 f0       	breq	.+52     	; 0x21d4 <__mulsf3+0xee>
    21a0:	2e 0d       	add	r18, r14
    21a2:	3f 1d       	adc	r19, r15
    21a4:	40 1f       	adc	r20, r16
    21a6:	51 1f       	adc	r21, r17
    21a8:	15 01       	movw	r2, r10
    21aa:	26 01       	movw	r4, r12
    21ac:	28 0e       	add	r2, r24
    21ae:	39 1e       	adc	r3, r25
    21b0:	4a 1e       	adc	r4, r26
    21b2:	5b 1e       	adc	r5, r27
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	2e 15       	cp	r18, r14
    21be:	3f 05       	cpc	r19, r15
    21c0:	40 07       	cpc	r20, r16
    21c2:	51 07       	cpc	r21, r17
    21c4:	18 f0       	brcs	.+6      	; 0x21cc <__mulsf3+0xe6>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	dc 01       	movw	r26, r24
    21cc:	82 0d       	add	r24, r2
    21ce:	93 1d       	adc	r25, r3
    21d0:	a4 1d       	adc	r26, r4
    21d2:	b5 1d       	adc	r27, r5
    21d4:	aa 0c       	add	r10, r10
    21d6:	bb 1c       	adc	r11, r11
    21d8:	cc 1c       	adc	r12, r12
    21da:	dd 1c       	adc	r13, r13
    21dc:	17 ff       	sbrs	r17, 7
    21de:	09 c0       	rjmp	.+18     	; 0x21f2 <__mulsf3+0x10c>
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	26 2e       	mov	r2, r22
    21e4:	31 2c       	mov	r3, r1
    21e6:	41 2c       	mov	r4, r1
    21e8:	51 2c       	mov	r5, r1
    21ea:	a2 28       	or	r10, r2
    21ec:	b3 28       	or	r11, r3
    21ee:	c4 28       	or	r12, r4
    21f0:	d5 28       	or	r13, r5
    21f2:	31 97       	sbiw	r30, 0x01	; 1
    21f4:	49 f0       	breq	.+18     	; 0x2208 <__mulsf3+0x122>
    21f6:	ee 0c       	add	r14, r14
    21f8:	ff 1c       	adc	r15, r15
    21fa:	00 1f       	adc	r16, r16
    21fc:	11 1f       	adc	r17, r17
    21fe:	96 94       	lsr	r9
    2200:	87 94       	ror	r8
    2202:	77 94       	ror	r7
    2204:	67 94       	ror	r6
    2206:	c6 cf       	rjmp	.-116    	; 0x2194 <__mulsf3+0xae>
    2208:	6b 89       	ldd	r22, Y+19	; 0x13
    220a:	7c 89       	ldd	r23, Y+20	; 0x14
    220c:	eb 85       	ldd	r30, Y+11	; 0x0b
    220e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2210:	6e 0f       	add	r22, r30
    2212:	7f 1f       	adc	r23, r31
    2214:	6e 5f       	subi	r22, 0xFE	; 254
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	7c 8f       	std	Y+28, r23	; 0x1c
    221a:	6b 8f       	std	Y+27, r22	; 0x1b
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2220:	7a 89       	ldd	r23, Y+18	; 0x12
    2222:	e7 17       	cp	r30, r23
    2224:	09 f4       	brne	.+2      	; 0x2228 <__mulsf3+0x142>
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	6a 8f       	std	Y+26, r22	; 0x1a
    222a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    222c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    222e:	10 c0       	rjmp	.+32     	; 0x2250 <__mulsf3+0x16a>
    2230:	fc 01       	movw	r30, r24
    2232:	e1 70       	andi	r30, 0x01	; 1
    2234:	f0 70       	andi	r31, 0x00	; 0
    2236:	30 97       	sbiw	r30, 0x00	; 0
    2238:	29 f0       	breq	.+10     	; 0x2244 <__mulsf3+0x15e>
    223a:	56 95       	lsr	r21
    223c:	47 95       	ror	r20
    223e:	37 95       	ror	r19
    2240:	27 95       	ror	r18
    2242:	50 68       	ori	r21, 0x80	; 128
    2244:	b6 95       	lsr	r27
    2246:	a7 95       	ror	r26
    2248:	97 95       	ror	r25
    224a:	87 95       	ror	r24
    224c:	6f 5f       	subi	r22, 0xFF	; 255
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	b7 fd       	sbrc	r27, 7
    2252:	ee cf       	rjmp	.-36     	; 0x2230 <__mulsf3+0x14a>
    2254:	0c c0       	rjmp	.+24     	; 0x226e <__mulsf3+0x188>
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	aa 1f       	adc	r26, r26
    225c:	bb 1f       	adc	r27, r27
    225e:	57 fd       	sbrc	r21, 7
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	22 0f       	add	r18, r18
    2264:	33 1f       	adc	r19, r19
    2266:	44 1f       	adc	r20, r20
    2268:	55 1f       	adc	r21, r21
    226a:	61 50       	subi	r22, 0x01	; 1
    226c:	70 40       	sbci	r23, 0x00	; 0
    226e:	80 30       	cpi	r24, 0x00	; 0
    2270:	e0 e0       	ldi	r30, 0x00	; 0
    2272:	9e 07       	cpc	r25, r30
    2274:	e0 e0       	ldi	r30, 0x00	; 0
    2276:	ae 07       	cpc	r26, r30
    2278:	e0 e4       	ldi	r30, 0x40	; 64
    227a:	be 07       	cpc	r27, r30
    227c:	60 f3       	brcs	.-40     	; 0x2256 <__mulsf3+0x170>
    227e:	6b 8f       	std	Y+27, r22	; 0x1b
    2280:	7c 8f       	std	Y+28, r23	; 0x1c
    2282:	6f e7       	ldi	r22, 0x7F	; 127
    2284:	e6 2e       	mov	r14, r22
    2286:	f1 2c       	mov	r15, r1
    2288:	01 2d       	mov	r16, r1
    228a:	11 2d       	mov	r17, r1
    228c:	e8 22       	and	r14, r24
    228e:	f9 22       	and	r15, r25
    2290:	0a 23       	and	r16, r26
    2292:	1b 23       	and	r17, r27
    2294:	60 e4       	ldi	r22, 0x40	; 64
    2296:	e6 16       	cp	r14, r22
    2298:	f1 04       	cpc	r15, r1
    229a:	01 05       	cpc	r16, r1
    229c:	11 05       	cpc	r17, r1
    229e:	61 f4       	brne	.+24     	; 0x22b8 <__mulsf3+0x1d2>
    22a0:	87 fd       	sbrc	r24, 7
    22a2:	0a c0       	rjmp	.+20     	; 0x22b8 <__mulsf3+0x1d2>
    22a4:	21 15       	cp	r18, r1
    22a6:	31 05       	cpc	r19, r1
    22a8:	41 05       	cpc	r20, r1
    22aa:	51 05       	cpc	r21, r1
    22ac:	29 f0       	breq	.+10     	; 0x22b8 <__mulsf3+0x1d2>
    22ae:	80 5c       	subi	r24, 0xC0	; 192
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	af 4f       	sbci	r26, 0xFF	; 255
    22b4:	bf 4f       	sbci	r27, 0xFF	; 255
    22b6:	80 78       	andi	r24, 0x80	; 128
    22b8:	8d 8f       	std	Y+29, r24	; 0x1d
    22ba:	9e 8f       	std	Y+30, r25	; 0x1e
    22bc:	af 8f       	std	Y+31, r26	; 0x1f
    22be:	b8 a3       	std	Y+32, r27	; 0x20
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	89 8f       	std	Y+25, r24	; 0x19
    22c4:	ce 01       	movw	r24, r28
    22c6:	49 96       	adiw	r24, 0x19	; 25
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <__mulsf3+0x1e8>
    22ca:	8e e5       	ldi	r24, 0x5E	; 94
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	0e 94 21 13 	call	0x2642	; 0x2642 <__pack_f>
    22d2:	a0 96       	adiw	r28, 0x20	; 32
    22d4:	e2 e1       	ldi	r30, 0x12	; 18
    22d6:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__epilogue_restores__>

000022da <__gesf2>:
    22da:	a8 e1       	ldi	r26, 0x18	; 24
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e3 e7       	ldi	r30, 0x73	; 115
    22e0:	f1 e1       	ldi	r31, 0x11	; 17
    22e2:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
    22e6:	69 83       	std	Y+1, r22	; 0x01
    22e8:	7a 83       	std	Y+2, r23	; 0x02
    22ea:	8b 83       	std	Y+3, r24	; 0x03
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	2d 83       	std	Y+5, r18	; 0x05
    22f0:	3e 83       	std	Y+6, r19	; 0x06
    22f2:	4f 83       	std	Y+7, r20	; 0x07
    22f4:	58 87       	std	Y+8, r21	; 0x08
    22f6:	8e 01       	movw	r16, r28
    22f8:	07 5f       	subi	r16, 0xF7	; 247
    22fa:	1f 4f       	sbci	r17, 0xFF	; 255
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	b8 01       	movw	r22, r16
    2302:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    2306:	81 e1       	ldi	r24, 0x11	; 17
    2308:	e8 2e       	mov	r14, r24
    230a:	f1 2c       	mov	r15, r1
    230c:	ec 0e       	add	r14, r28
    230e:	fd 1e       	adc	r15, r29
    2310:	ce 01       	movw	r24, r28
    2312:	05 96       	adiw	r24, 0x05	; 5
    2314:	b7 01       	movw	r22, r14
    2316:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	82 30       	cpi	r24, 0x02	; 2
    231e:	40 f0       	brcs	.+16     	; 0x2330 <__gesf2+0x56>
    2320:	89 89       	ldd	r24, Y+17	; 0x11
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	28 f0       	brcs	.+10     	; 0x2330 <__gesf2+0x56>
    2326:	c8 01       	movw	r24, r16
    2328:	b7 01       	movw	r22, r14
    232a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__fpcmp_parts_f>
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <__gesf2+0x58>
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	68 96       	adiw	r28, 0x18	; 24
    2334:	e6 e0       	ldi	r30, 0x06	; 6
    2336:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

0000233a <__floatsisf>:
    233a:	a8 e0       	ldi	r26, 0x08	; 8
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 ea       	ldi	r30, 0xA3	; 163
    2340:	f1 e1       	ldi	r31, 0x11	; 17
    2342:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__+0x18>
    2346:	7b 01       	movw	r14, r22
    2348:	8c 01       	movw	r16, r24
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	d8 01       	movw	r26, r16
    2350:	c7 01       	movw	r24, r14
    2352:	88 27       	eor	r24, r24
    2354:	b7 fd       	sbrc	r27, 7
    2356:	83 95       	inc	r24
    2358:	99 27       	eor	r25, r25
    235a:	aa 27       	eor	r26, r26
    235c:	bb 27       	eor	r27, r27
    235e:	28 2f       	mov	r18, r24
    2360:	8a 83       	std	Y+2, r24	; 0x02
    2362:	e1 14       	cp	r14, r1
    2364:	f1 04       	cpc	r15, r1
    2366:	01 05       	cpc	r16, r1
    2368:	11 05       	cpc	r17, r1
    236a:	19 f4       	brne	.+6      	; 0x2372 <__floatsisf+0x38>
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	37 c0       	rjmp	.+110    	; 0x23e0 <__floatsisf+0xa6>
    2372:	8e e1       	ldi	r24, 0x1E	; 30
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	8b 83       	std	Y+3, r24	; 0x03
    237a:	22 23       	and	r18, r18
    237c:	89 f0       	breq	.+34     	; 0x23a0 <__floatsisf+0x66>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	e8 16       	cp	r14, r24
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	f8 06       	cpc	r15, r24
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	08 07       	cpc	r16, r24
    238a:	80 e8       	ldi	r24, 0x80	; 128
    238c:	18 07       	cpc	r17, r24
    238e:	69 f1       	breq	.+90     	; 0x23ea <__floatsisf+0xb0>
    2390:	10 95       	com	r17
    2392:	00 95       	com	r16
    2394:	f0 94       	com	r15
    2396:	e0 94       	com	r14
    2398:	e1 1c       	adc	r14, r1
    239a:	f1 1c       	adc	r15, r1
    239c:	01 1d       	adc	r16, r1
    239e:	11 1d       	adc	r17, r1
    23a0:	ed 82       	std	Y+5, r14	; 0x05
    23a2:	fe 82       	std	Y+6, r15	; 0x06
    23a4:	0f 83       	std	Y+7, r16	; 0x07
    23a6:	18 87       	std	Y+8, r17	; 0x08
    23a8:	c8 01       	movw	r24, r16
    23aa:	b7 01       	movw	r22, r14
    23ac:	0e 94 c7 12 	call	0x258e	; 0x258e <__clzsi2>
    23b0:	9c 01       	movw	r18, r24
    23b2:	21 50       	subi	r18, 0x01	; 1
    23b4:	30 40       	sbci	r19, 0x00	; 0
    23b6:	12 16       	cp	r1, r18
    23b8:	13 06       	cpc	r1, r19
    23ba:	94 f4       	brge	.+36     	; 0x23e0 <__floatsisf+0xa6>
    23bc:	02 2e       	mov	r0, r18
    23be:	04 c0       	rjmp	.+8      	; 0x23c8 <__floatsisf+0x8e>
    23c0:	ee 0c       	add	r14, r14
    23c2:	ff 1c       	adc	r15, r15
    23c4:	00 1f       	adc	r16, r16
    23c6:	11 1f       	adc	r17, r17
    23c8:	0a 94       	dec	r0
    23ca:	d2 f7       	brpl	.-12     	; 0x23c0 <__floatsisf+0x86>
    23cc:	ed 82       	std	Y+5, r14	; 0x05
    23ce:	fe 82       	std	Y+6, r15	; 0x06
    23d0:	0f 83       	std	Y+7, r16	; 0x07
    23d2:	18 87       	std	Y+8, r17	; 0x08
    23d4:	8e e1       	ldi	r24, 0x1E	; 30
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	82 1b       	sub	r24, r18
    23da:	93 0b       	sbc	r25, r19
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	0e 94 21 13 	call	0x2642	; 0x2642 <__pack_f>
    23e8:	04 c0       	rjmp	.+8      	; 0x23f2 <__floatsisf+0xb8>
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	9f ec       	ldi	r25, 0xCF	; 207
    23f2:	28 96       	adiw	r28, 0x08	; 8
    23f4:	e6 e0       	ldi	r30, 0x06	; 6
    23f6:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

000023fa <__fixsfsi>:
    23fa:	ac e0       	ldi	r26, 0x0C	; 12
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e3 e0       	ldi	r30, 0x03	; 3
    2400:	f2 e1       	ldi	r31, 0x12	; 18
    2402:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__prologue_saves__+0x20>
    2406:	69 83       	std	Y+1, r22	; 0x01
    2408:	7a 83       	std	Y+2, r23	; 0x02
    240a:	8b 83       	std	Y+3, r24	; 0x03
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	ce 01       	movw	r24, r28
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	be 01       	movw	r22, r28
    2414:	6b 5f       	subi	r22, 0xFB	; 251
    2416:	7f 4f       	sbci	r23, 0xFF	; 255
    2418:	0e 94 ef 13 	call	0x27de	; 0x27de <__unpack_f>
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	82 30       	cpi	r24, 0x02	; 2
    2420:	81 f1       	breq	.+96     	; 0x2482 <__fixsfsi+0x88>
    2422:	82 30       	cpi	r24, 0x02	; 2
    2424:	70 f1       	brcs	.+92     	; 0x2482 <__fixsfsi+0x88>
    2426:	84 30       	cpi	r24, 0x04	; 4
    2428:	21 f4       	brne	.+8      	; 0x2432 <__fixsfsi+0x38>
    242a:	8e 81       	ldd	r24, Y+6	; 0x06
    242c:	88 23       	and	r24, r24
    242e:	69 f1       	breq	.+90     	; 0x248a <__fixsfsi+0x90>
    2430:	0a c0       	rjmp	.+20     	; 0x2446 <__fixsfsi+0x4c>
    2432:	2f 81       	ldd	r18, Y+7	; 0x07
    2434:	38 85       	ldd	r19, Y+8	; 0x08
    2436:	37 fd       	sbrc	r19, 7
    2438:	24 c0       	rjmp	.+72     	; 0x2482 <__fixsfsi+0x88>
    243a:	6e 81       	ldd	r22, Y+6	; 0x06
    243c:	2f 31       	cpi	r18, 0x1F	; 31
    243e:	31 05       	cpc	r19, r1
    2440:	3c f0       	brlt	.+14     	; 0x2450 <__fixsfsi+0x56>
    2442:	66 23       	and	r22, r22
    2444:	11 f1       	breq	.+68     	; 0x248a <__fixsfsi+0x90>
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	50 e8       	ldi	r21, 0x80	; 128
    244e:	21 c0       	rjmp	.+66     	; 0x2492 <__fixsfsi+0x98>
    2450:	8e e1       	ldi	r24, 0x1E	; 30
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	82 1b       	sub	r24, r18
    2456:	93 0b       	sbc	r25, r19
    2458:	29 85       	ldd	r18, Y+9	; 0x09
    245a:	3a 85       	ldd	r19, Y+10	; 0x0a
    245c:	4b 85       	ldd	r20, Y+11	; 0x0b
    245e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2460:	04 c0       	rjmp	.+8      	; 0x246a <__fixsfsi+0x70>
    2462:	56 95       	lsr	r21
    2464:	47 95       	ror	r20
    2466:	37 95       	ror	r19
    2468:	27 95       	ror	r18
    246a:	8a 95       	dec	r24
    246c:	d2 f7       	brpl	.-12     	; 0x2462 <__fixsfsi+0x68>
    246e:	66 23       	and	r22, r22
    2470:	81 f0       	breq	.+32     	; 0x2492 <__fixsfsi+0x98>
    2472:	50 95       	com	r21
    2474:	40 95       	com	r20
    2476:	30 95       	com	r19
    2478:	21 95       	neg	r18
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	4f 4f       	sbci	r20, 0xFF	; 255
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <__fixsfsi+0x98>
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	a9 01       	movw	r20, r18
    2488:	04 c0       	rjmp	.+8      	; 0x2492 <__fixsfsi+0x98>
    248a:	2f ef       	ldi	r18, 0xFF	; 255
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f ef       	ldi	r20, 0xFF	; 255
    2490:	5f e7       	ldi	r21, 0x7F	; 127
    2492:	b9 01       	movw	r22, r18
    2494:	ca 01       	movw	r24, r20
    2496:	2c 96       	adiw	r28, 0x0c	; 12
    2498:	e2 e0       	ldi	r30, 0x02	; 2
    249a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__+0x20>

0000249e <__floatunsisf>:
    249e:	a8 e0       	ldi	r26, 0x08	; 8
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e5       	ldi	r30, 0x55	; 85
    24a4:	f2 e1       	ldi	r31, 0x12	; 18
    24a6:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x14>
    24aa:	7b 01       	movw	r14, r22
    24ac:	8c 01       	movw	r16, r24
    24ae:	1a 82       	std	Y+2, r1	; 0x02
    24b0:	61 15       	cp	r22, r1
    24b2:	71 05       	cpc	r23, r1
    24b4:	81 05       	cpc	r24, r1
    24b6:	91 05       	cpc	r25, r1
    24b8:	19 f4       	brne	.+6      	; 0x24c0 <__floatunsisf+0x22>
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	5f c0       	rjmp	.+190    	; 0x257e <__floatunsisf+0xe0>
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	8e e1       	ldi	r24, 0x1E	; 30
    24c6:	c8 2e       	mov	r12, r24
    24c8:	d1 2c       	mov	r13, r1
    24ca:	dc 82       	std	Y+4, r13	; 0x04
    24cc:	cb 82       	std	Y+3, r12	; 0x03
    24ce:	ed 82       	std	Y+5, r14	; 0x05
    24d0:	fe 82       	std	Y+6, r15	; 0x06
    24d2:	0f 83       	std	Y+7, r16	; 0x07
    24d4:	18 87       	std	Y+8, r17	; 0x08
    24d6:	c8 01       	movw	r24, r16
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 c7 12 	call	0x258e	; 0x258e <__clzsi2>
    24de:	fc 01       	movw	r30, r24
    24e0:	31 97       	sbiw	r30, 0x01	; 1
    24e2:	f7 ff       	sbrs	r31, 7
    24e4:	3a c0       	rjmp	.+116    	; 0x255a <__floatunsisf+0xbc>
    24e6:	aa 27       	eor	r26, r26
    24e8:	bb 27       	eor	r27, r27
    24ea:	ae 1b       	sub	r26, r30
    24ec:	bf 0b       	sbc	r27, r31
    24ee:	21 e0       	ldi	r18, 0x01	; 1
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	0a 2e       	mov	r0, r26
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <__floatunsisf+0x64>
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	44 1f       	adc	r20, r20
    2500:	55 1f       	adc	r21, r21
    2502:	0a 94       	dec	r0
    2504:	d2 f7       	brpl	.-12     	; 0x24fa <__floatunsisf+0x5c>
    2506:	21 50       	subi	r18, 0x01	; 1
    2508:	30 40       	sbci	r19, 0x00	; 0
    250a:	40 40       	sbci	r20, 0x00	; 0
    250c:	50 40       	sbci	r21, 0x00	; 0
    250e:	2e 21       	and	r18, r14
    2510:	3f 21       	and	r19, r15
    2512:	40 23       	and	r20, r16
    2514:	51 23       	and	r21, r17
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	21 15       	cp	r18, r1
    2520:	31 05       	cpc	r19, r1
    2522:	41 05       	cpc	r20, r1
    2524:	51 05       	cpc	r21, r1
    2526:	19 f4       	brne	.+6      	; 0x252e <__floatunsisf+0x90>
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	cb 01       	movw	r24, r22
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <__floatunsisf+0x9a>
    2530:	16 95       	lsr	r17
    2532:	07 95       	ror	r16
    2534:	f7 94       	ror	r15
    2536:	e7 94       	ror	r14
    2538:	aa 95       	dec	r26
    253a:	d2 f7       	brpl	.-12     	; 0x2530 <__floatunsisf+0x92>
    253c:	e6 2a       	or	r14, r22
    253e:	f7 2a       	or	r15, r23
    2540:	08 2b       	or	r16, r24
    2542:	19 2b       	or	r17, r25
    2544:	ed 82       	std	Y+5, r14	; 0x05
    2546:	fe 82       	std	Y+6, r15	; 0x06
    2548:	0f 83       	std	Y+7, r16	; 0x07
    254a:	18 87       	std	Y+8, r17	; 0x08
    254c:	8e e1       	ldi	r24, 0x1E	; 30
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	8e 1b       	sub	r24, r30
    2552:	9f 0b       	sbc	r25, r31
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
    2558:	12 c0       	rjmp	.+36     	; 0x257e <__floatunsisf+0xe0>
    255a:	30 97       	sbiw	r30, 0x00	; 0
    255c:	81 f0       	breq	.+32     	; 0x257e <__floatunsisf+0xe0>
    255e:	0e 2e       	mov	r0, r30
    2560:	04 c0       	rjmp	.+8      	; 0x256a <__floatunsisf+0xcc>
    2562:	ee 0c       	add	r14, r14
    2564:	ff 1c       	adc	r15, r15
    2566:	00 1f       	adc	r16, r16
    2568:	11 1f       	adc	r17, r17
    256a:	0a 94       	dec	r0
    256c:	d2 f7       	brpl	.-12     	; 0x2562 <__floatunsisf+0xc4>
    256e:	ed 82       	std	Y+5, r14	; 0x05
    2570:	fe 82       	std	Y+6, r15	; 0x06
    2572:	0f 83       	std	Y+7, r16	; 0x07
    2574:	18 87       	std	Y+8, r17	; 0x08
    2576:	ce 1a       	sub	r12, r30
    2578:	df 0a       	sbc	r13, r31
    257a:	dc 82       	std	Y+4, r13	; 0x04
    257c:	cb 82       	std	Y+3, r12	; 0x03
    257e:	ce 01       	movw	r24, r28
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	0e 94 21 13 	call	0x2642	; 0x2642 <__pack_f>
    2586:	28 96       	adiw	r28, 0x08	; 8
    2588:	e8 e0       	ldi	r30, 0x08	; 8
    258a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x14>

0000258e <__clzsi2>:
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	7b 01       	movw	r14, r22
    25a0:	8c 01       	movw	r16, r24
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	e8 16       	cp	r14, r24
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	f8 06       	cpc	r15, r24
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	08 07       	cpc	r16, r24
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	18 07       	cpc	r17, r24
    25b2:	58 f4       	brcc	.+22     	; 0x25ca <__clzsi2+0x3c>
    25b4:	ef ef       	ldi	r30, 0xFF	; 255
    25b6:	ee 16       	cp	r14, r30
    25b8:	f1 04       	cpc	r15, r1
    25ba:	01 05       	cpc	r16, r1
    25bc:	11 05       	cpc	r17, r1
    25be:	09 f0       	breq	.+2      	; 0x25c2 <__clzsi2+0x34>
    25c0:	90 f4       	brcc	.+36     	; 0x25e6 <__clzsi2+0x58>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	dc 01       	movw	r26, r24
    25c8:	17 c0       	rjmp	.+46     	; 0x25f8 <__clzsi2+0x6a>
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	ef 16       	cp	r14, r31
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	ff 06       	cpc	r15, r31
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	0f 07       	cpc	r16, r31
    25d6:	f1 e0       	ldi	r31, 0x01	; 1
    25d8:	1f 07       	cpc	r17, r31
    25da:	50 f4       	brcc	.+20     	; 0x25f0 <__clzsi2+0x62>
    25dc:	80 e1       	ldi	r24, 0x10	; 16
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 e0       	ldi	r26, 0x00	; 0
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	09 c0       	rjmp	.+18     	; 0x25f8 <__clzsi2+0x6a>
    25e6:	88 e0       	ldi	r24, 0x08	; 8
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <__clzsi2+0x6a>
    25f0:	88 e1       	ldi	r24, 0x18	; 24
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e0       	ldi	r26, 0x00	; 0
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	20 e2       	ldi	r18, 0x20	; 32
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	28 1b       	sub	r18, r24
    2602:	39 0b       	sbc	r19, r25
    2604:	4a 0b       	sbc	r20, r26
    2606:	5b 0b       	sbc	r21, r27
    2608:	57 01       	movw	r10, r14
    260a:	68 01       	movw	r12, r16
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <__clzsi2+0x88>
    260e:	d6 94       	lsr	r13
    2610:	c7 94       	ror	r12
    2612:	b7 94       	ror	r11
    2614:	a7 94       	ror	r10
    2616:	8a 95       	dec	r24
    2618:	d2 f7       	brpl	.-12     	; 0x260e <__clzsi2+0x80>
    261a:	d6 01       	movw	r26, r12
    261c:	c5 01       	movw	r24, r10
    261e:	8a 59       	subi	r24, 0x9A	; 154
    2620:	9e 4f       	sbci	r25, 0xFE	; 254
    2622:	fc 01       	movw	r30, r24
    2624:	80 81       	ld	r24, Z
    2626:	28 1b       	sub	r18, r24
    2628:	31 09       	sbc	r19, r1
    262a:	41 09       	sbc	r20, r1
    262c:	51 09       	sbc	r21, r1
    262e:	c9 01       	movw	r24, r18
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	cf 90       	pop	r12
    263c:	bf 90       	pop	r11
    263e:	af 90       	pop	r10
    2640:	08 95       	ret

00002642 <__pack_f>:
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	fc 01       	movw	r30, r24
    2650:	24 81       	ldd	r18, Z+4	; 0x04
    2652:	35 81       	ldd	r19, Z+5	; 0x05
    2654:	46 81       	ldd	r20, Z+6	; 0x06
    2656:	57 81       	ldd	r21, Z+7	; 0x07
    2658:	61 81       	ldd	r22, Z+1	; 0x01
    265a:	80 81       	ld	r24, Z
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	20 f4       	brcc	.+8      	; 0x2668 <__pack_f+0x26>
    2660:	40 61       	ori	r20, 0x10	; 16
    2662:	ef ef       	ldi	r30, 0xFF	; 255
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	a3 c0       	rjmp	.+326    	; 0x27ae <__pack_f+0x16c>
    2668:	84 30       	cpi	r24, 0x04	; 4
    266a:	09 f4       	brne	.+2      	; 0x266e <__pack_f+0x2c>
    266c:	9b c0       	rjmp	.+310    	; 0x27a4 <__pack_f+0x162>
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	09 f4       	brne	.+2      	; 0x2674 <__pack_f+0x32>
    2672:	92 c0       	rjmp	.+292    	; 0x2798 <__pack_f+0x156>
    2674:	21 15       	cp	r18, r1
    2676:	31 05       	cpc	r19, r1
    2678:	41 05       	cpc	r20, r1
    267a:	51 05       	cpc	r21, r1
    267c:	09 f4       	brne	.+2      	; 0x2680 <__pack_f+0x3e>
    267e:	8f c0       	rjmp	.+286    	; 0x279e <__pack_f+0x15c>
    2680:	02 80       	ldd	r0, Z+2	; 0x02
    2682:	f3 81       	ldd	r31, Z+3	; 0x03
    2684:	e0 2d       	mov	r30, r0
    2686:	8f ef       	ldi	r24, 0xFF	; 255
    2688:	e2 38       	cpi	r30, 0x82	; 130
    268a:	f8 07       	cpc	r31, r24
    268c:	0c f0       	brlt	.+2      	; 0x2690 <__pack_f+0x4e>
    268e:	5a c0       	rjmp	.+180    	; 0x2744 <__pack_f+0x102>
    2690:	c2 e8       	ldi	r28, 0x82	; 130
    2692:	df ef       	ldi	r29, 0xFF	; 255
    2694:	ce 1b       	sub	r28, r30
    2696:	df 0b       	sbc	r29, r31
    2698:	ca 31       	cpi	r28, 0x1A	; 26
    269a:	d1 05       	cpc	r29, r1
    269c:	6c f5       	brge	.+90     	; 0x26f8 <__pack_f+0xb6>
    269e:	79 01       	movw	r14, r18
    26a0:	8a 01       	movw	r16, r20
    26a2:	0c 2e       	mov	r0, r28
    26a4:	04 c0       	rjmp	.+8      	; 0x26ae <__pack_f+0x6c>
    26a6:	16 95       	lsr	r17
    26a8:	07 95       	ror	r16
    26aa:	f7 94       	ror	r15
    26ac:	e7 94       	ror	r14
    26ae:	0a 94       	dec	r0
    26b0:	d2 f7       	brpl	.-12     	; 0x26a6 <__pack_f+0x64>
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e0       	ldi	r26, 0x00	; 0
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	0c 2e       	mov	r0, r28
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <__pack_f+0x84>
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	aa 1f       	adc	r26, r26
    26c4:	bb 1f       	adc	r27, r27
    26c6:	0a 94       	dec	r0
    26c8:	d2 f7       	brpl	.-12     	; 0x26be <__pack_f+0x7c>
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	a1 09       	sbc	r26, r1
    26ce:	b1 09       	sbc	r27, r1
    26d0:	82 23       	and	r24, r18
    26d2:	93 23       	and	r25, r19
    26d4:	a4 23       	and	r26, r20
    26d6:	b5 23       	and	r27, r21
    26d8:	21 e0       	ldi	r18, 0x01	; 1
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	a1 05       	cpc	r26, r1
    26e4:	b1 05       	cpc	r27, r1
    26e6:	19 f4       	brne	.+6      	; 0x26ee <__pack_f+0xac>
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	a9 01       	movw	r20, r18
    26ee:	2e 29       	or	r18, r14
    26f0:	3f 29       	or	r19, r15
    26f2:	40 2b       	or	r20, r16
    26f4:	51 2b       	or	r21, r17
    26f6:	03 c0       	rjmp	.+6      	; 0x26fe <__pack_f+0xbc>
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	a9 01       	movw	r20, r18
    26fe:	da 01       	movw	r26, r20
    2700:	c9 01       	movw	r24, r18
    2702:	8f 77       	andi	r24, 0x7F	; 127
    2704:	90 70       	andi	r25, 0x00	; 0
    2706:	a0 70       	andi	r26, 0x00	; 0
    2708:	b0 70       	andi	r27, 0x00	; 0
    270a:	80 34       	cpi	r24, 0x40	; 64
    270c:	91 05       	cpc	r25, r1
    270e:	a1 05       	cpc	r26, r1
    2710:	b1 05       	cpc	r27, r1
    2712:	39 f4       	brne	.+14     	; 0x2722 <__pack_f+0xe0>
    2714:	27 ff       	sbrs	r18, 7
    2716:	09 c0       	rjmp	.+18     	; 0x272a <__pack_f+0xe8>
    2718:	20 5c       	subi	r18, 0xC0	; 192
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	4f 4f       	sbci	r20, 0xFF	; 255
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	04 c0       	rjmp	.+8      	; 0x272a <__pack_f+0xe8>
    2722:	21 5c       	subi	r18, 0xC1	; 193
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	4f 4f       	sbci	r20, 0xFF	; 255
    2728:	5f 4f       	sbci	r21, 0xFF	; 255
    272a:	e1 e0       	ldi	r30, 0x01	; 1
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	20 30       	cpi	r18, 0x00	; 0
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	38 07       	cpc	r19, r24
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	48 07       	cpc	r20, r24
    2738:	80 e4       	ldi	r24, 0x40	; 64
    273a:	58 07       	cpc	r21, r24
    273c:	28 f5       	brcc	.+74     	; 0x2788 <__pack_f+0x146>
    273e:	e0 e0       	ldi	r30, 0x00	; 0
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	22 c0       	rjmp	.+68     	; 0x2788 <__pack_f+0x146>
    2744:	e0 38       	cpi	r30, 0x80	; 128
    2746:	f1 05       	cpc	r31, r1
    2748:	6c f5       	brge	.+90     	; 0x27a4 <__pack_f+0x162>
    274a:	e1 58       	subi	r30, 0x81	; 129
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	da 01       	movw	r26, r20
    2750:	c9 01       	movw	r24, r18
    2752:	8f 77       	andi	r24, 0x7F	; 127
    2754:	90 70       	andi	r25, 0x00	; 0
    2756:	a0 70       	andi	r26, 0x00	; 0
    2758:	b0 70       	andi	r27, 0x00	; 0
    275a:	80 34       	cpi	r24, 0x40	; 64
    275c:	91 05       	cpc	r25, r1
    275e:	a1 05       	cpc	r26, r1
    2760:	b1 05       	cpc	r27, r1
    2762:	39 f4       	brne	.+14     	; 0x2772 <__pack_f+0x130>
    2764:	27 ff       	sbrs	r18, 7
    2766:	09 c0       	rjmp	.+18     	; 0x277a <__pack_f+0x138>
    2768:	20 5c       	subi	r18, 0xC0	; 192
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	4f 4f       	sbci	r20, 0xFF	; 255
    276e:	5f 4f       	sbci	r21, 0xFF	; 255
    2770:	04 c0       	rjmp	.+8      	; 0x277a <__pack_f+0x138>
    2772:	21 5c       	subi	r18, 0xC1	; 193
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	4f 4f       	sbci	r20, 0xFF	; 255
    2778:	5f 4f       	sbci	r21, 0xFF	; 255
    277a:	57 ff       	sbrs	r21, 7
    277c:	05 c0       	rjmp	.+10     	; 0x2788 <__pack_f+0x146>
    277e:	56 95       	lsr	r21
    2780:	47 95       	ror	r20
    2782:	37 95       	ror	r19
    2784:	27 95       	ror	r18
    2786:	31 96       	adiw	r30, 0x01	; 1
    2788:	87 e0       	ldi	r24, 0x07	; 7
    278a:	56 95       	lsr	r21
    278c:	47 95       	ror	r20
    278e:	37 95       	ror	r19
    2790:	27 95       	ror	r18
    2792:	8a 95       	dec	r24
    2794:	d1 f7       	brne	.-12     	; 0x278a <__pack_f+0x148>
    2796:	0b c0       	rjmp	.+22     	; 0x27ae <__pack_f+0x16c>
    2798:	e0 e0       	ldi	r30, 0x00	; 0
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	05 c0       	rjmp	.+10     	; 0x27a8 <__pack_f+0x166>
    279e:	e0 e0       	ldi	r30, 0x00	; 0
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <__pack_f+0x16c>
    27a4:	ef ef       	ldi	r30, 0xFF	; 255
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	a9 01       	movw	r20, r18
    27ae:	8e 2f       	mov	r24, r30
    27b0:	87 95       	ror	r24
    27b2:	88 27       	eor	r24, r24
    27b4:	87 95       	ror	r24
    27b6:	94 2f       	mov	r25, r20
    27b8:	9f 77       	andi	r25, 0x7F	; 127
    27ba:	67 95       	ror	r22
    27bc:	66 27       	eor	r22, r22
    27be:	67 95       	ror	r22
    27c0:	e6 95       	lsr	r30
    27c2:	e2 2e       	mov	r14, r18
    27c4:	a9 2f       	mov	r26, r25
    27c6:	a8 2b       	or	r26, r24
    27c8:	fe 2f       	mov	r31, r30
    27ca:	f6 2b       	or	r31, r22
    27cc:	62 2f       	mov	r22, r18
    27ce:	73 2f       	mov	r23, r19
    27d0:	8a 2f       	mov	r24, r26
    27d2:	9f 2f       	mov	r25, r31
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	e6 e0       	ldi	r30, 0x06	; 6
    27da:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__+0x18>

000027de <__unpack_f>:
    27de:	dc 01       	movw	r26, r24
    27e0:	fb 01       	movw	r30, r22
    27e2:	2c 91       	ld	r18, X
    27e4:	11 96       	adiw	r26, 0x01	; 1
    27e6:	3c 91       	ld	r19, X
    27e8:	11 97       	sbiw	r26, 0x01	; 1
    27ea:	12 96       	adiw	r26, 0x02	; 2
    27ec:	8c 91       	ld	r24, X
    27ee:	12 97       	sbiw	r26, 0x02	; 2
    27f0:	48 2f       	mov	r20, r24
    27f2:	4f 77       	andi	r20, 0x7F	; 127
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	98 2f       	mov	r25, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	99 27       	eor	r25, r25
    27fc:	99 1f       	adc	r25, r25
    27fe:	13 96       	adiw	r26, 0x03	; 3
    2800:	6c 91       	ld	r22, X
    2802:	13 97       	sbiw	r26, 0x03	; 3
    2804:	86 2f       	mov	r24, r22
    2806:	88 0f       	add	r24, r24
    2808:	89 2b       	or	r24, r25
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	66 1f       	adc	r22, r22
    280e:	66 27       	eor	r22, r22
    2810:	66 1f       	adc	r22, r22
    2812:	61 83       	std	Z+1, r22	; 0x01
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	39 f5       	brne	.+78     	; 0x2866 <__unpack_f+0x88>
    2818:	21 15       	cp	r18, r1
    281a:	31 05       	cpc	r19, r1
    281c:	41 05       	cpc	r20, r1
    281e:	51 05       	cpc	r21, r1
    2820:	11 f4       	brne	.+4      	; 0x2826 <__unpack_f+0x48>
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	29 c0       	rjmp	.+82     	; 0x2878 <__unpack_f+0x9a>
    2826:	82 e8       	ldi	r24, 0x82	; 130
    2828:	9f ef       	ldi	r25, 0xFF	; 255
    282a:	93 83       	std	Z+3, r25	; 0x03
    282c:	82 83       	std	Z+2, r24	; 0x02
    282e:	67 e0       	ldi	r22, 0x07	; 7
    2830:	22 0f       	add	r18, r18
    2832:	33 1f       	adc	r19, r19
    2834:	44 1f       	adc	r20, r20
    2836:	55 1f       	adc	r21, r21
    2838:	6a 95       	dec	r22
    283a:	d1 f7       	brne	.-12     	; 0x2830 <__unpack_f+0x52>
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	80 83       	st	Z, r24
    2840:	09 c0       	rjmp	.+18     	; 0x2854 <__unpack_f+0x76>
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	44 1f       	adc	r20, r20
    2848:	55 1f       	adc	r21, r21
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	93 83       	std	Z+3, r25	; 0x03
    2852:	82 83       	std	Z+2, r24	; 0x02
    2854:	20 30       	cpi	r18, 0x00	; 0
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	38 07       	cpc	r19, r24
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	48 07       	cpc	r20, r24
    285e:	80 e4       	ldi	r24, 0x40	; 64
    2860:	58 07       	cpc	r21, r24
    2862:	78 f3       	brcs	.-34     	; 0x2842 <__unpack_f+0x64>
    2864:	20 c0       	rjmp	.+64     	; 0x28a6 <__unpack_f+0xc8>
    2866:	8f 3f       	cpi	r24, 0xFF	; 255
    2868:	91 05       	cpc	r25, r1
    286a:	79 f4       	brne	.+30     	; 0x288a <__unpack_f+0xac>
    286c:	21 15       	cp	r18, r1
    286e:	31 05       	cpc	r19, r1
    2870:	41 05       	cpc	r20, r1
    2872:	51 05       	cpc	r21, r1
    2874:	19 f4       	brne	.+6      	; 0x287c <__unpack_f+0x9e>
    2876:	84 e0       	ldi	r24, 0x04	; 4
    2878:	80 83       	st	Z, r24
    287a:	08 95       	ret
    287c:	44 ff       	sbrs	r20, 4
    287e:	03 c0       	rjmp	.+6      	; 0x2886 <__unpack_f+0xa8>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 83       	st	Z, r24
    2884:	10 c0       	rjmp	.+32     	; 0x28a6 <__unpack_f+0xc8>
    2886:	10 82       	st	Z, r1
    2888:	0e c0       	rjmp	.+28     	; 0x28a6 <__unpack_f+0xc8>
    288a:	8f 57       	subi	r24, 0x7F	; 127
    288c:	90 40       	sbci	r25, 0x00	; 0
    288e:	93 83       	std	Z+3, r25	; 0x03
    2890:	82 83       	std	Z+2, r24	; 0x02
    2892:	83 e0       	ldi	r24, 0x03	; 3
    2894:	80 83       	st	Z, r24
    2896:	87 e0       	ldi	r24, 0x07	; 7
    2898:	22 0f       	add	r18, r18
    289a:	33 1f       	adc	r19, r19
    289c:	44 1f       	adc	r20, r20
    289e:	55 1f       	adc	r21, r21
    28a0:	8a 95       	dec	r24
    28a2:	d1 f7       	brne	.-12     	; 0x2898 <__unpack_f+0xba>
    28a4:	50 64       	ori	r21, 0x40	; 64
    28a6:	24 83       	std	Z+4, r18	; 0x04
    28a8:	35 83       	std	Z+5, r19	; 0x05
    28aa:	46 83       	std	Z+6, r20	; 0x06
    28ac:	57 83       	std	Z+7, r21	; 0x07
    28ae:	08 95       	ret

000028b0 <__fpcmp_parts_f>:
    28b0:	fc 01       	movw	r30, r24
    28b2:	db 01       	movw	r26, r22
    28b4:	90 81       	ld	r25, Z
    28b6:	92 30       	cpi	r25, 0x02	; 2
    28b8:	08 f4       	brcc	.+2      	; 0x28bc <__fpcmp_parts_f+0xc>
    28ba:	49 c0       	rjmp	.+146    	; 0x294e <__fpcmp_parts_f+0x9e>
    28bc:	8c 91       	ld	r24, X
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	08 f4       	brcc	.+2      	; 0x28c4 <__fpcmp_parts_f+0x14>
    28c2:	45 c0       	rjmp	.+138    	; 0x294e <__fpcmp_parts_f+0x9e>
    28c4:	94 30       	cpi	r25, 0x04	; 4
    28c6:	51 f4       	brne	.+20     	; 0x28dc <__fpcmp_parts_f+0x2c>
    28c8:	61 81       	ldd	r22, Z+1	; 0x01
    28ca:	84 30       	cpi	r24, 0x04	; 4
    28cc:	b1 f5       	brne	.+108    	; 0x293a <__fpcmp_parts_f+0x8a>
    28ce:	11 96       	adiw	r26, 0x01	; 1
    28d0:	2c 91       	ld	r18, X
    28d2:	11 97       	sbiw	r26, 0x01	; 1
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	26 1b       	sub	r18, r22
    28d8:	31 09       	sbc	r19, r1
    28da:	41 c0       	rjmp	.+130    	; 0x295e <__fpcmp_parts_f+0xae>
    28dc:	84 30       	cpi	r24, 0x04	; 4
    28de:	21 f0       	breq	.+8      	; 0x28e8 <__fpcmp_parts_f+0x38>
    28e0:	92 30       	cpi	r25, 0x02	; 2
    28e2:	41 f4       	brne	.+16     	; 0x28f4 <__fpcmp_parts_f+0x44>
    28e4:	82 30       	cpi	r24, 0x02	; 2
    28e6:	b1 f1       	breq	.+108    	; 0x2954 <__fpcmp_parts_f+0xa4>
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	8c 91       	ld	r24, X
    28ec:	11 97       	sbiw	r26, 0x01	; 1
    28ee:	88 23       	and	r24, r24
    28f0:	a1 f1       	breq	.+104    	; 0x295a <__fpcmp_parts_f+0xaa>
    28f2:	2d c0       	rjmp	.+90     	; 0x294e <__fpcmp_parts_f+0x9e>
    28f4:	61 81       	ldd	r22, Z+1	; 0x01
    28f6:	82 30       	cpi	r24, 0x02	; 2
    28f8:	01 f1       	breq	.+64     	; 0x293a <__fpcmp_parts_f+0x8a>
    28fa:	11 96       	adiw	r26, 0x01	; 1
    28fc:	8c 91       	ld	r24, X
    28fe:	11 97       	sbiw	r26, 0x01	; 1
    2900:	68 17       	cp	r22, r24
    2902:	d9 f4       	brne	.+54     	; 0x293a <__fpcmp_parts_f+0x8a>
    2904:	22 81       	ldd	r18, Z+2	; 0x02
    2906:	33 81       	ldd	r19, Z+3	; 0x03
    2908:	12 96       	adiw	r26, 0x02	; 2
    290a:	8d 91       	ld	r24, X+
    290c:	9c 91       	ld	r25, X
    290e:	13 97       	sbiw	r26, 0x03	; 3
    2910:	82 17       	cp	r24, r18
    2912:	93 07       	cpc	r25, r19
    2914:	94 f0       	brlt	.+36     	; 0x293a <__fpcmp_parts_f+0x8a>
    2916:	28 17       	cp	r18, r24
    2918:	39 07       	cpc	r19, r25
    291a:	bc f0       	brlt	.+46     	; 0x294a <__fpcmp_parts_f+0x9a>
    291c:	24 81       	ldd	r18, Z+4	; 0x04
    291e:	35 81       	ldd	r19, Z+5	; 0x05
    2920:	46 81       	ldd	r20, Z+6	; 0x06
    2922:	57 81       	ldd	r21, Z+7	; 0x07
    2924:	14 96       	adiw	r26, 0x04	; 4
    2926:	8d 91       	ld	r24, X+
    2928:	9d 91       	ld	r25, X+
    292a:	0d 90       	ld	r0, X+
    292c:	bc 91       	ld	r27, X
    292e:	a0 2d       	mov	r26, r0
    2930:	82 17       	cp	r24, r18
    2932:	93 07       	cpc	r25, r19
    2934:	a4 07       	cpc	r26, r20
    2936:	b5 07       	cpc	r27, r21
    2938:	18 f4       	brcc	.+6      	; 0x2940 <__fpcmp_parts_f+0x90>
    293a:	66 23       	and	r22, r22
    293c:	41 f0       	breq	.+16     	; 0x294e <__fpcmp_parts_f+0x9e>
    293e:	0d c0       	rjmp	.+26     	; 0x295a <__fpcmp_parts_f+0xaa>
    2940:	28 17       	cp	r18, r24
    2942:	39 07       	cpc	r19, r25
    2944:	4a 07       	cpc	r20, r26
    2946:	5b 07       	cpc	r21, r27
    2948:	28 f4       	brcc	.+10     	; 0x2954 <__fpcmp_parts_f+0xa4>
    294a:	66 23       	and	r22, r22
    294c:	31 f0       	breq	.+12     	; 0x295a <__fpcmp_parts_f+0xaa>
    294e:	21 e0       	ldi	r18, 0x01	; 1
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	05 c0       	rjmp	.+10     	; 0x295e <__fpcmp_parts_f+0xae>
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	02 c0       	rjmp	.+4      	; 0x295e <__fpcmp_parts_f+0xae>
    295a:	2f ef       	ldi	r18, 0xFF	; 255
    295c:	3f ef       	ldi	r19, 0xFF	; 255
    295e:	c9 01       	movw	r24, r18
    2960:	08 95       	ret

00002962 <__udivmodhi4>:
    2962:	aa 1b       	sub	r26, r26
    2964:	bb 1b       	sub	r27, r27
    2966:	51 e1       	ldi	r21, 0x11	; 17
    2968:	07 c0       	rjmp	.+14     	; 0x2978 <__udivmodhi4_ep>

0000296a <__udivmodhi4_loop>:
    296a:	aa 1f       	adc	r26, r26
    296c:	bb 1f       	adc	r27, r27
    296e:	a6 17       	cp	r26, r22
    2970:	b7 07       	cpc	r27, r23
    2972:	10 f0       	brcs	.+4      	; 0x2978 <__udivmodhi4_ep>
    2974:	a6 1b       	sub	r26, r22
    2976:	b7 0b       	sbc	r27, r23

00002978 <__udivmodhi4_ep>:
    2978:	88 1f       	adc	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	5a 95       	dec	r21
    297e:	a9 f7       	brne	.-22     	; 0x296a <__udivmodhi4_loop>
    2980:	80 95       	com	r24
    2982:	90 95       	com	r25
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	08 95       	ret

0000298a <__prologue_saves__>:
    298a:	2f 92       	push	r2
    298c:	3f 92       	push	r3
    298e:	4f 92       	push	r4
    2990:	5f 92       	push	r5
    2992:	6f 92       	push	r6
    2994:	7f 92       	push	r7
    2996:	8f 92       	push	r8
    2998:	9f 92       	push	r9
    299a:	af 92       	push	r10
    299c:	bf 92       	push	r11
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	ca 1b       	sub	r28, r26
    29b4:	db 0b       	sbc	r29, r27
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	09 94       	ijmp

000029c2 <__epilogue_restores__>:
    29c2:	2a 88       	ldd	r2, Y+18	; 0x12
    29c4:	39 88       	ldd	r3, Y+17	; 0x11
    29c6:	48 88       	ldd	r4, Y+16	; 0x10
    29c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    29cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d4:	b9 84       	ldd	r11, Y+9	; 0x09
    29d6:	c8 84       	ldd	r12, Y+8	; 0x08
    29d8:	df 80       	ldd	r13, Y+7	; 0x07
    29da:	ee 80       	ldd	r14, Y+6	; 0x06
    29dc:	fd 80       	ldd	r15, Y+5	; 0x05
    29de:	0c 81       	ldd	r16, Y+4	; 0x04
    29e0:	1b 81       	ldd	r17, Y+3	; 0x03
    29e2:	aa 81       	ldd	r26, Y+2	; 0x02
    29e4:	b9 81       	ldd	r27, Y+1	; 0x01
    29e6:	ce 0f       	add	r28, r30
    29e8:	d1 1d       	adc	r29, r1
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	ed 01       	movw	r28, r26
    29f6:	08 95       	ret

000029f8 <memset>:
    29f8:	dc 01       	movw	r26, r24
    29fa:	01 c0       	rjmp	.+2      	; 0x29fe <memset+0x6>
    29fc:	6d 93       	st	X+, r22
    29fe:	41 50       	subi	r20, 0x01	; 1
    2a00:	50 40       	sbci	r21, 0x00	; 0
    2a02:	e0 f7       	brcc	.-8      	; 0x29fc <memset+0x4>
    2a04:	08 95       	ret

00002a06 <itoa>:
    2a06:	fb 01       	movw	r30, r22
    2a08:	9f 01       	movw	r18, r30
    2a0a:	e8 94       	clt
    2a0c:	42 30       	cpi	r20, 0x02	; 2
    2a0e:	c4 f0       	brlt	.+48     	; 0x2a40 <itoa+0x3a>
    2a10:	45 32       	cpi	r20, 0x25	; 37
    2a12:	b4 f4       	brge	.+44     	; 0x2a40 <itoa+0x3a>
    2a14:	4a 30       	cpi	r20, 0x0A	; 10
    2a16:	29 f4       	brne	.+10     	; 0x2a22 <itoa+0x1c>
    2a18:	97 fb       	bst	r25, 7
    2a1a:	1e f4       	brtc	.+6      	; 0x2a22 <itoa+0x1c>
    2a1c:	90 95       	com	r25
    2a1e:	81 95       	neg	r24
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	64 2f       	mov	r22, r20
    2a24:	77 27       	eor	r23, r23
    2a26:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodhi4>
    2a2a:	80 5d       	subi	r24, 0xD0	; 208
    2a2c:	8a 33       	cpi	r24, 0x3A	; 58
    2a2e:	0c f0       	brlt	.+2      	; 0x2a32 <itoa+0x2c>
    2a30:	89 5d       	subi	r24, 0xD9	; 217
    2a32:	81 93       	st	Z+, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	a1 f7       	brne	.-24     	; 0x2a22 <itoa+0x1c>
    2a3a:	16 f4       	brtc	.+4      	; 0x2a40 <itoa+0x3a>
    2a3c:	5d e2       	ldi	r21, 0x2D	; 45
    2a3e:	51 93       	st	Z+, r21
    2a40:	10 82       	st	Z, r1
    2a42:	c9 01       	movw	r24, r18
    2a44:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <strrev>

00002a48 <sprintf>:
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	2e 97       	sbiw	r28, 0x0e	; 14
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	0d 89       	ldd	r16, Y+21	; 0x15
    2a62:	1e 89       	ldd	r17, Y+22	; 0x16
    2a64:	86 e0       	ldi	r24, 0x06	; 6
    2a66:	8c 83       	std	Y+4, r24	; 0x04
    2a68:	1a 83       	std	Y+2, r17	; 0x02
    2a6a:	09 83       	std	Y+1, r16	; 0x01
    2a6c:	8f ef       	ldi	r24, 0xFF	; 255
    2a6e:	9f e7       	ldi	r25, 0x7F	; 127
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
    2a74:	9e 01       	movw	r18, r28
    2a76:	27 5e       	subi	r18, 0xE7	; 231
    2a78:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	6f 89       	ldd	r22, Y+23	; 0x17
    2a80:	78 8d       	ldd	r23, Y+24	; 0x18
    2a82:	a9 01       	movw	r20, r18
    2a84:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <vfprintf>
    2a88:	ef 81       	ldd	r30, Y+7	; 0x07
    2a8a:	f8 85       	ldd	r31, Y+8	; 0x08
    2a8c:	e0 0f       	add	r30, r16
    2a8e:	f1 1f       	adc	r31, r17
    2a90:	10 82       	st	Z, r1
    2a92:	2e 96       	adiw	r28, 0x0e	; 14
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	1f 91       	pop	r17
    2aa4:	0f 91       	pop	r16
    2aa6:	08 95       	ret

00002aa8 <round>:
    2aa8:	10 d3       	rcall	.+1568   	; 0x30ca <__fp_splitA>
    2aaa:	e0 f0       	brcs	.+56     	; 0x2ae4 <round+0x3c>
    2aac:	9e 37       	cpi	r25, 0x7E	; 126
    2aae:	d8 f0       	brcs	.+54     	; 0x2ae6 <round+0x3e>
    2ab0:	96 39       	cpi	r25, 0x96	; 150
    2ab2:	b8 f4       	brcc	.+46     	; 0x2ae2 <round+0x3a>
    2ab4:	9e 38       	cpi	r25, 0x8E	; 142
    2ab6:	48 f4       	brcc	.+18     	; 0x2aca <round+0x22>
    2ab8:	67 2f       	mov	r22, r23
    2aba:	78 2f       	mov	r23, r24
    2abc:	88 27       	eor	r24, r24
    2abe:	98 5f       	subi	r25, 0xF8	; 248
    2ac0:	f9 cf       	rjmp	.-14     	; 0x2ab4 <round+0xc>
    2ac2:	86 95       	lsr	r24
    2ac4:	77 95       	ror	r23
    2ac6:	67 95       	ror	r22
    2ac8:	93 95       	inc	r25
    2aca:	95 39       	cpi	r25, 0x95	; 149
    2acc:	d0 f3       	brcs	.-12     	; 0x2ac2 <round+0x1a>
    2ace:	b6 2f       	mov	r27, r22
    2ad0:	b1 70       	andi	r27, 0x01	; 1
    2ad2:	6b 0f       	add	r22, r27
    2ad4:	71 1d       	adc	r23, r1
    2ad6:	81 1d       	adc	r24, r1
    2ad8:	20 f4       	brcc	.+8      	; 0x2ae2 <round+0x3a>
    2ada:	87 95       	ror	r24
    2adc:	77 95       	ror	r23
    2ade:	67 95       	ror	r22
    2ae0:	93 95       	inc	r25
    2ae2:	c2 c2       	rjmp	.+1412   	; 0x3068 <__fp_mintl>
    2ae4:	dc c2       	rjmp	.+1464   	; 0x309e <__fp_mpack>
    2ae6:	0c c3       	rjmp	.+1560   	; 0x3100 <__fp_szero>

00002ae8 <vfprintf>:
    2ae8:	2f 92       	push	r2
    2aea:	3f 92       	push	r3
    2aec:	4f 92       	push	r4
    2aee:	5f 92       	push	r5
    2af0:	6f 92       	push	r6
    2af2:	7f 92       	push	r7
    2af4:	8f 92       	push	r8
    2af6:	9f 92       	push	r9
    2af8:	af 92       	push	r10
    2afa:	bf 92       	push	r11
    2afc:	cf 92       	push	r12
    2afe:	df 92       	push	r13
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	2c 97       	sbiw	r28, 0x0c	; 12
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	6c 01       	movw	r12, r24
    2b1e:	1b 01       	movw	r2, r22
    2b20:	8a 01       	movw	r16, r20
    2b22:	fc 01       	movw	r30, r24
    2b24:	17 82       	std	Z+7, r1	; 0x07
    2b26:	16 82       	std	Z+6, r1	; 0x06
    2b28:	83 81       	ldd	r24, Z+3	; 0x03
    2b2a:	81 ff       	sbrs	r24, 1
    2b2c:	d1 c1       	rjmp	.+930    	; 0x2ed0 <vfprintf+0x3e8>
    2b2e:	2e 01       	movw	r4, r28
    2b30:	08 94       	sec
    2b32:	41 1c       	adc	r4, r1
    2b34:	51 1c       	adc	r5, r1
    2b36:	f6 01       	movw	r30, r12
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	f1 01       	movw	r30, r2
    2b3c:	93 fd       	sbrc	r25, 3
    2b3e:	85 91       	lpm	r24, Z+
    2b40:	93 ff       	sbrs	r25, 3
    2b42:	81 91       	ld	r24, Z+
    2b44:	1f 01       	movw	r2, r30
    2b46:	88 23       	and	r24, r24
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <vfprintf+0x64>
    2b4a:	be c1       	rjmp	.+892    	; 0x2ec8 <vfprintf+0x3e0>
    2b4c:	85 32       	cpi	r24, 0x25	; 37
    2b4e:	39 f4       	brne	.+14     	; 0x2b5e <vfprintf+0x76>
    2b50:	93 fd       	sbrc	r25, 3
    2b52:	85 91       	lpm	r24, Z+
    2b54:	93 ff       	sbrs	r25, 3
    2b56:	81 91       	ld	r24, Z+
    2b58:	1f 01       	movw	r2, r30
    2b5a:	85 32       	cpi	r24, 0x25	; 37
    2b5c:	29 f4       	brne	.+10     	; 0x2b68 <vfprintf+0x80>
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	b6 01       	movw	r22, r12
    2b62:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2b66:	e7 cf       	rjmp	.-50     	; 0x2b36 <vfprintf+0x4e>
    2b68:	ee 24       	eor	r14, r14
    2b6a:	ff 24       	eor	r15, r15
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	20 32       	cpi	r18, 0x20	; 32
    2b70:	b0 f4       	brcc	.+44     	; 0x2b9e <vfprintf+0xb6>
    2b72:	8b 32       	cpi	r24, 0x2B	; 43
    2b74:	69 f0       	breq	.+26     	; 0x2b90 <vfprintf+0xa8>
    2b76:	8c 32       	cpi	r24, 0x2C	; 44
    2b78:	28 f4       	brcc	.+10     	; 0x2b84 <vfprintf+0x9c>
    2b7a:	80 32       	cpi	r24, 0x20	; 32
    2b7c:	51 f0       	breq	.+20     	; 0x2b92 <vfprintf+0xaa>
    2b7e:	83 32       	cpi	r24, 0x23	; 35
    2b80:	71 f4       	brne	.+28     	; 0x2b9e <vfprintf+0xb6>
    2b82:	0b c0       	rjmp	.+22     	; 0x2b9a <vfprintf+0xb2>
    2b84:	8d 32       	cpi	r24, 0x2D	; 45
    2b86:	39 f0       	breq	.+14     	; 0x2b96 <vfprintf+0xae>
    2b88:	80 33       	cpi	r24, 0x30	; 48
    2b8a:	49 f4       	brne	.+18     	; 0x2b9e <vfprintf+0xb6>
    2b8c:	21 60       	ori	r18, 0x01	; 1
    2b8e:	2c c0       	rjmp	.+88     	; 0x2be8 <vfprintf+0x100>
    2b90:	22 60       	ori	r18, 0x02	; 2
    2b92:	24 60       	ori	r18, 0x04	; 4
    2b94:	29 c0       	rjmp	.+82     	; 0x2be8 <vfprintf+0x100>
    2b96:	28 60       	ori	r18, 0x08	; 8
    2b98:	27 c0       	rjmp	.+78     	; 0x2be8 <vfprintf+0x100>
    2b9a:	20 61       	ori	r18, 0x10	; 16
    2b9c:	25 c0       	rjmp	.+74     	; 0x2be8 <vfprintf+0x100>
    2b9e:	27 fd       	sbrc	r18, 7
    2ba0:	2c c0       	rjmp	.+88     	; 0x2bfa <vfprintf+0x112>
    2ba2:	38 2f       	mov	r19, r24
    2ba4:	30 53       	subi	r19, 0x30	; 48
    2ba6:	3a 30       	cpi	r19, 0x0A	; 10
    2ba8:	98 f4       	brcc	.+38     	; 0x2bd0 <vfprintf+0xe8>
    2baa:	26 ff       	sbrs	r18, 6
    2bac:	08 c0       	rjmp	.+16     	; 0x2bbe <vfprintf+0xd6>
    2bae:	8e 2d       	mov	r24, r14
    2bb0:	88 0f       	add	r24, r24
    2bb2:	e8 2e       	mov	r14, r24
    2bb4:	ee 0c       	add	r14, r14
    2bb6:	ee 0c       	add	r14, r14
    2bb8:	e8 0e       	add	r14, r24
    2bba:	e3 0e       	add	r14, r19
    2bbc:	15 c0       	rjmp	.+42     	; 0x2be8 <vfprintf+0x100>
    2bbe:	8f 2d       	mov	r24, r15
    2bc0:	88 0f       	add	r24, r24
    2bc2:	f8 2e       	mov	r15, r24
    2bc4:	ff 0c       	add	r15, r15
    2bc6:	ff 0c       	add	r15, r15
    2bc8:	f8 0e       	add	r15, r24
    2bca:	f3 0e       	add	r15, r19
    2bcc:	20 62       	ori	r18, 0x20	; 32
    2bce:	0c c0       	rjmp	.+24     	; 0x2be8 <vfprintf+0x100>
    2bd0:	8e 32       	cpi	r24, 0x2E	; 46
    2bd2:	21 f4       	brne	.+8      	; 0x2bdc <vfprintf+0xf4>
    2bd4:	26 fd       	sbrc	r18, 6
    2bd6:	78 c1       	rjmp	.+752    	; 0x2ec8 <vfprintf+0x3e0>
    2bd8:	20 64       	ori	r18, 0x40	; 64
    2bda:	06 c0       	rjmp	.+12     	; 0x2be8 <vfprintf+0x100>
    2bdc:	8c 36       	cpi	r24, 0x6C	; 108
    2bde:	11 f4       	brne	.+4      	; 0x2be4 <vfprintf+0xfc>
    2be0:	20 68       	ori	r18, 0x80	; 128
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <vfprintf+0x100>
    2be4:	88 36       	cpi	r24, 0x68	; 104
    2be6:	49 f4       	brne	.+18     	; 0x2bfa <vfprintf+0x112>
    2be8:	f1 01       	movw	r30, r2
    2bea:	93 fd       	sbrc	r25, 3
    2bec:	85 91       	lpm	r24, Z+
    2bee:	93 ff       	sbrs	r25, 3
    2bf0:	81 91       	ld	r24, Z+
    2bf2:	1f 01       	movw	r2, r30
    2bf4:	88 23       	and	r24, r24
    2bf6:	09 f0       	breq	.+2      	; 0x2bfa <vfprintf+0x112>
    2bf8:	ba cf       	rjmp	.-140    	; 0x2b6e <vfprintf+0x86>
    2bfa:	98 2f       	mov	r25, r24
    2bfc:	95 54       	subi	r25, 0x45	; 69
    2bfe:	93 30       	cpi	r25, 0x03	; 3
    2c00:	18 f0       	brcs	.+6      	; 0x2c08 <vfprintf+0x120>
    2c02:	90 52       	subi	r25, 0x20	; 32
    2c04:	93 30       	cpi	r25, 0x03	; 3
    2c06:	28 f4       	brcc	.+10     	; 0x2c12 <vfprintf+0x12a>
    2c08:	0c 5f       	subi	r16, 0xFC	; 252
    2c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0c:	ff e3       	ldi	r31, 0x3F	; 63
    2c0e:	f9 83       	std	Y+1, r31	; 0x01
    2c10:	0d c0       	rjmp	.+26     	; 0x2c2c <vfprintf+0x144>
    2c12:	83 36       	cpi	r24, 0x63	; 99
    2c14:	31 f0       	breq	.+12     	; 0x2c22 <vfprintf+0x13a>
    2c16:	83 37       	cpi	r24, 0x73	; 115
    2c18:	71 f0       	breq	.+28     	; 0x2c36 <vfprintf+0x14e>
    2c1a:	83 35       	cpi	r24, 0x53	; 83
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <vfprintf+0x138>
    2c1e:	60 c0       	rjmp	.+192    	; 0x2ce0 <vfprintf+0x1f8>
    2c20:	22 c0       	rjmp	.+68     	; 0x2c66 <vfprintf+0x17e>
    2c22:	f8 01       	movw	r30, r16
    2c24:	80 81       	ld	r24, Z
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	0e 5f       	subi	r16, 0xFE	; 254
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	42 01       	movw	r8, r4
    2c2e:	71 e0       	ldi	r23, 0x01	; 1
    2c30:	a7 2e       	mov	r10, r23
    2c32:	b1 2c       	mov	r11, r1
    2c34:	16 c0       	rjmp	.+44     	; 0x2c62 <vfprintf+0x17a>
    2c36:	62 e0       	ldi	r22, 0x02	; 2
    2c38:	66 2e       	mov	r6, r22
    2c3a:	71 2c       	mov	r7, r1
    2c3c:	60 0e       	add	r6, r16
    2c3e:	71 1e       	adc	r7, r17
    2c40:	f8 01       	movw	r30, r16
    2c42:	80 80       	ld	r8, Z
    2c44:	91 80       	ldd	r9, Z+1	; 0x01
    2c46:	26 ff       	sbrs	r18, 6
    2c48:	03 c0       	rjmp	.+6      	; 0x2c50 <vfprintf+0x168>
    2c4a:	6e 2d       	mov	r22, r14
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <vfprintf+0x16c>
    2c50:	6f ef       	ldi	r22, 0xFF	; 255
    2c52:	7f ef       	ldi	r23, 0xFF	; 255
    2c54:	c4 01       	movw	r24, r8
    2c56:	2c 87       	std	Y+12, r18	; 0x0c
    2c58:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <strnlen>
    2c5c:	5c 01       	movw	r10, r24
    2c5e:	83 01       	movw	r16, r6
    2c60:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c62:	2f 77       	andi	r18, 0x7F	; 127
    2c64:	17 c0       	rjmp	.+46     	; 0x2c94 <vfprintf+0x1ac>
    2c66:	52 e0       	ldi	r21, 0x02	; 2
    2c68:	65 2e       	mov	r6, r21
    2c6a:	71 2c       	mov	r7, r1
    2c6c:	60 0e       	add	r6, r16
    2c6e:	71 1e       	adc	r7, r17
    2c70:	f8 01       	movw	r30, r16
    2c72:	80 80       	ld	r8, Z
    2c74:	91 80       	ldd	r9, Z+1	; 0x01
    2c76:	26 ff       	sbrs	r18, 6
    2c78:	03 c0       	rjmp	.+6      	; 0x2c80 <vfprintf+0x198>
    2c7a:	6e 2d       	mov	r22, r14
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <vfprintf+0x19c>
    2c80:	6f ef       	ldi	r22, 0xFF	; 255
    2c82:	7f ef       	ldi	r23, 0xFF	; 255
    2c84:	c4 01       	movw	r24, r8
    2c86:	2c 87       	std	Y+12, r18	; 0x0c
    2c88:	0e 94 84 17 	call	0x2f08	; 0x2f08 <strnlen_P>
    2c8c:	5c 01       	movw	r10, r24
    2c8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c90:	20 68       	ori	r18, 0x80	; 128
    2c92:	83 01       	movw	r16, r6
    2c94:	23 fd       	sbrc	r18, 3
    2c96:	20 c0       	rjmp	.+64     	; 0x2cd8 <vfprintf+0x1f0>
    2c98:	08 c0       	rjmp	.+16     	; 0x2caa <vfprintf+0x1c2>
    2c9a:	80 e2       	ldi	r24, 0x20	; 32
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	b6 01       	movw	r22, r12
    2ca0:	2c 87       	std	Y+12, r18	; 0x0c
    2ca2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2ca6:	fa 94       	dec	r15
    2ca8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2caa:	8f 2d       	mov	r24, r15
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a8 16       	cp	r10, r24
    2cb0:	b9 06       	cpc	r11, r25
    2cb2:	98 f3       	brcs	.-26     	; 0x2c9a <vfprintf+0x1b2>
    2cb4:	11 c0       	rjmp	.+34     	; 0x2cd8 <vfprintf+0x1f0>
    2cb6:	f4 01       	movw	r30, r8
    2cb8:	27 fd       	sbrc	r18, 7
    2cba:	85 91       	lpm	r24, Z+
    2cbc:	27 ff       	sbrs	r18, 7
    2cbe:	81 91       	ld	r24, Z+
    2cc0:	4f 01       	movw	r8, r30
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	b6 01       	movw	r22, r12
    2cc6:	2c 87       	std	Y+12, r18	; 0x0c
    2cc8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2ccc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cce:	f1 10       	cpse	r15, r1
    2cd0:	fa 94       	dec	r15
    2cd2:	08 94       	sec
    2cd4:	a1 08       	sbc	r10, r1
    2cd6:	b1 08       	sbc	r11, r1
    2cd8:	a1 14       	cp	r10, r1
    2cda:	b1 04       	cpc	r11, r1
    2cdc:	61 f7       	brne	.-40     	; 0x2cb6 <vfprintf+0x1ce>
    2cde:	f1 c0       	rjmp	.+482    	; 0x2ec2 <vfprintf+0x3da>
    2ce0:	84 36       	cpi	r24, 0x64	; 100
    2ce2:	11 f0       	breq	.+4      	; 0x2ce8 <vfprintf+0x200>
    2ce4:	89 36       	cpi	r24, 0x69	; 105
    2ce6:	49 f5       	brne	.+82     	; 0x2d3a <vfprintf+0x252>
    2ce8:	27 ff       	sbrs	r18, 7
    2cea:	08 c0       	rjmp	.+16     	; 0x2cfc <vfprintf+0x214>
    2cec:	f8 01       	movw	r30, r16
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	0c 5f       	subi	r16, 0xFC	; 252
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	09 c0       	rjmp	.+18     	; 0x2d0e <vfprintf+0x226>
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	60 81       	ld	r22, Z
    2d00:	71 81       	ldd	r23, Z+1	; 0x01
    2d02:	88 27       	eor	r24, r24
    2d04:	77 fd       	sbrc	r23, 7
    2d06:	80 95       	com	r24
    2d08:	98 2f       	mov	r25, r24
    2d0a:	0e 5f       	subi	r16, 0xFE	; 254
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	4f e6       	ldi	r20, 0x6F	; 111
    2d10:	b4 2e       	mov	r11, r20
    2d12:	b2 22       	and	r11, r18
    2d14:	97 ff       	sbrs	r25, 7
    2d16:	09 c0       	rjmp	.+18     	; 0x2d2a <vfprintf+0x242>
    2d18:	90 95       	com	r25
    2d1a:	80 95       	com	r24
    2d1c:	70 95       	com	r23
    2d1e:	61 95       	neg	r22
    2d20:	7f 4f       	sbci	r23, 0xFF	; 255
    2d22:	8f 4f       	sbci	r24, 0xFF	; 255
    2d24:	9f 4f       	sbci	r25, 0xFF	; 255
    2d26:	f0 e8       	ldi	r31, 0x80	; 128
    2d28:	bf 2a       	or	r11, r31
    2d2a:	a2 01       	movw	r20, r4
    2d2c:	2a e0       	ldi	r18, 0x0A	; 10
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__ultoa_invert>
    2d34:	78 2e       	mov	r7, r24
    2d36:	74 18       	sub	r7, r4
    2d38:	45 c0       	rjmp	.+138    	; 0x2dc4 <vfprintf+0x2dc>
    2d3a:	85 37       	cpi	r24, 0x75	; 117
    2d3c:	31 f4       	brne	.+12     	; 0x2d4a <vfprintf+0x262>
    2d3e:	3f ee       	ldi	r19, 0xEF	; 239
    2d40:	b3 2e       	mov	r11, r19
    2d42:	b2 22       	and	r11, r18
    2d44:	2a e0       	ldi	r18, 0x0A	; 10
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	25 c0       	rjmp	.+74     	; 0x2d94 <vfprintf+0x2ac>
    2d4a:	99 ef       	ldi	r25, 0xF9	; 249
    2d4c:	b9 2e       	mov	r11, r25
    2d4e:	b2 22       	and	r11, r18
    2d50:	8f 36       	cpi	r24, 0x6F	; 111
    2d52:	c1 f0       	breq	.+48     	; 0x2d84 <vfprintf+0x29c>
    2d54:	80 37       	cpi	r24, 0x70	; 112
    2d56:	20 f4       	brcc	.+8      	; 0x2d60 <vfprintf+0x278>
    2d58:	88 35       	cpi	r24, 0x58	; 88
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <vfprintf+0x276>
    2d5c:	b5 c0       	rjmp	.+362    	; 0x2ec8 <vfprintf+0x3e0>
    2d5e:	0d c0       	rjmp	.+26     	; 0x2d7a <vfprintf+0x292>
    2d60:	80 37       	cpi	r24, 0x70	; 112
    2d62:	21 f0       	breq	.+8      	; 0x2d6c <vfprintf+0x284>
    2d64:	88 37       	cpi	r24, 0x78	; 120
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <vfprintf+0x282>
    2d68:	af c0       	rjmp	.+350    	; 0x2ec8 <vfprintf+0x3e0>
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <vfprintf+0x288>
    2d6c:	20 e1       	ldi	r18, 0x10	; 16
    2d6e:	b2 2a       	or	r11, r18
    2d70:	b4 fe       	sbrs	r11, 4
    2d72:	0b c0       	rjmp	.+22     	; 0x2d8a <vfprintf+0x2a2>
    2d74:	84 e0       	ldi	r24, 0x04	; 4
    2d76:	b8 2a       	or	r11, r24
    2d78:	08 c0       	rjmp	.+16     	; 0x2d8a <vfprintf+0x2a2>
    2d7a:	b4 fe       	sbrs	r11, 4
    2d7c:	09 c0       	rjmp	.+18     	; 0x2d90 <vfprintf+0x2a8>
    2d7e:	e6 e0       	ldi	r30, 0x06	; 6
    2d80:	be 2a       	or	r11, r30
    2d82:	06 c0       	rjmp	.+12     	; 0x2d90 <vfprintf+0x2a8>
    2d84:	28 e0       	ldi	r18, 0x08	; 8
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	05 c0       	rjmp	.+10     	; 0x2d94 <vfprintf+0x2ac>
    2d8a:	20 e1       	ldi	r18, 0x10	; 16
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <vfprintf+0x2ac>
    2d90:	20 e1       	ldi	r18, 0x10	; 16
    2d92:	32 e0       	ldi	r19, 0x02	; 2
    2d94:	b7 fe       	sbrs	r11, 7
    2d96:	08 c0       	rjmp	.+16     	; 0x2da8 <vfprintf+0x2c0>
    2d98:	f8 01       	movw	r30, r16
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	0c 5f       	subi	r16, 0xFC	; 252
    2da4:	1f 4f       	sbci	r17, 0xFF	; 255
    2da6:	07 c0       	rjmp	.+14     	; 0x2db6 <vfprintf+0x2ce>
    2da8:	f8 01       	movw	r30, r16
    2daa:	60 81       	ld	r22, Z
    2dac:	71 81       	ldd	r23, Z+1	; 0x01
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 5f       	subi	r16, 0xFE	; 254
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	a2 01       	movw	r20, r4
    2db8:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__ultoa_invert>
    2dbc:	78 2e       	mov	r7, r24
    2dbe:	74 18       	sub	r7, r4
    2dc0:	ff e7       	ldi	r31, 0x7F	; 127
    2dc2:	bf 22       	and	r11, r31
    2dc4:	b6 fe       	sbrs	r11, 6
    2dc6:	0b c0       	rjmp	.+22     	; 0x2dde <vfprintf+0x2f6>
    2dc8:	2e ef       	ldi	r18, 0xFE	; 254
    2dca:	b2 22       	and	r11, r18
    2dcc:	7e 14       	cp	r7, r14
    2dce:	38 f4       	brcc	.+14     	; 0x2dde <vfprintf+0x2f6>
    2dd0:	b4 fe       	sbrs	r11, 4
    2dd2:	07 c0       	rjmp	.+14     	; 0x2de2 <vfprintf+0x2fa>
    2dd4:	b2 fc       	sbrc	r11, 2
    2dd6:	05 c0       	rjmp	.+10     	; 0x2de2 <vfprintf+0x2fa>
    2dd8:	8f ee       	ldi	r24, 0xEF	; 239
    2dda:	b8 22       	and	r11, r24
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <vfprintf+0x2fa>
    2dde:	a7 2c       	mov	r10, r7
    2de0:	01 c0       	rjmp	.+2      	; 0x2de4 <vfprintf+0x2fc>
    2de2:	ae 2c       	mov	r10, r14
    2de4:	8b 2d       	mov	r24, r11
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	b4 fe       	sbrs	r11, 4
    2dea:	0d c0       	rjmp	.+26     	; 0x2e06 <vfprintf+0x31e>
    2dec:	fe 01       	movw	r30, r28
    2dee:	e7 0d       	add	r30, r7
    2df0:	f1 1d       	adc	r31, r1
    2df2:	20 81       	ld	r18, Z
    2df4:	20 33       	cpi	r18, 0x30	; 48
    2df6:	19 f4       	brne	.+6      	; 0x2dfe <vfprintf+0x316>
    2df8:	e9 ee       	ldi	r30, 0xE9	; 233
    2dfa:	be 22       	and	r11, r30
    2dfc:	09 c0       	rjmp	.+18     	; 0x2e10 <vfprintf+0x328>
    2dfe:	a3 94       	inc	r10
    2e00:	b2 fe       	sbrs	r11, 2
    2e02:	06 c0       	rjmp	.+12     	; 0x2e10 <vfprintf+0x328>
    2e04:	04 c0       	rjmp	.+8      	; 0x2e0e <vfprintf+0x326>
    2e06:	86 78       	andi	r24, 0x86	; 134
    2e08:	90 70       	andi	r25, 0x00	; 0
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <vfprintf+0x328>
    2e0e:	a3 94       	inc	r10
    2e10:	8b 2c       	mov	r8, r11
    2e12:	99 24       	eor	r9, r9
    2e14:	b3 fc       	sbrc	r11, 3
    2e16:	14 c0       	rjmp	.+40     	; 0x2e40 <vfprintf+0x358>
    2e18:	b0 fe       	sbrs	r11, 0
    2e1a:	0f c0       	rjmp	.+30     	; 0x2e3a <vfprintf+0x352>
    2e1c:	af 14       	cp	r10, r15
    2e1e:	28 f4       	brcc	.+10     	; 0x2e2a <vfprintf+0x342>
    2e20:	e7 2c       	mov	r14, r7
    2e22:	ef 0c       	add	r14, r15
    2e24:	ea 18       	sub	r14, r10
    2e26:	af 2c       	mov	r10, r15
    2e28:	08 c0       	rjmp	.+16     	; 0x2e3a <vfprintf+0x352>
    2e2a:	e7 2c       	mov	r14, r7
    2e2c:	06 c0       	rjmp	.+12     	; 0x2e3a <vfprintf+0x352>
    2e2e:	80 e2       	ldi	r24, 0x20	; 32
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	b6 01       	movw	r22, r12
    2e34:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2e38:	a3 94       	inc	r10
    2e3a:	af 14       	cp	r10, r15
    2e3c:	c0 f3       	brcs	.-16     	; 0x2e2e <vfprintf+0x346>
    2e3e:	04 c0       	rjmp	.+8      	; 0x2e48 <vfprintf+0x360>
    2e40:	af 14       	cp	r10, r15
    2e42:	10 f4       	brcc	.+4      	; 0x2e48 <vfprintf+0x360>
    2e44:	fa 18       	sub	r15, r10
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <vfprintf+0x362>
    2e48:	ff 24       	eor	r15, r15
    2e4a:	84 fe       	sbrs	r8, 4
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <vfprintf+0x384>
    2e4e:	80 e3       	ldi	r24, 0x30	; 48
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	b6 01       	movw	r22, r12
    2e54:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2e58:	82 fe       	sbrs	r8, 2
    2e5a:	1f c0       	rjmp	.+62     	; 0x2e9a <vfprintf+0x3b2>
    2e5c:	81 fe       	sbrs	r8, 1
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <vfprintf+0x37e>
    2e60:	88 e5       	ldi	r24, 0x58	; 88
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	10 c0       	rjmp	.+32     	; 0x2e86 <vfprintf+0x39e>
    2e66:	88 e7       	ldi	r24, 0x78	; 120
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0d c0       	rjmp	.+26     	; 0x2e86 <vfprintf+0x39e>
    2e6c:	c4 01       	movw	r24, r8
    2e6e:	86 78       	andi	r24, 0x86	; 134
    2e70:	90 70       	andi	r25, 0x00	; 0
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	91 f0       	breq	.+36     	; 0x2e9a <vfprintf+0x3b2>
    2e76:	81 fc       	sbrc	r8, 1
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <vfprintf+0x396>
    2e7a:	80 e2       	ldi	r24, 0x20	; 32
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <vfprintf+0x398>
    2e7e:	8b e2       	ldi	r24, 0x2B	; 43
    2e80:	b7 fc       	sbrc	r11, 7
    2e82:	8d e2       	ldi	r24, 0x2D	; 45
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	b6 01       	movw	r22, r12
    2e88:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2e8c:	06 c0       	rjmp	.+12     	; 0x2e9a <vfprintf+0x3b2>
    2e8e:	80 e3       	ldi	r24, 0x30	; 48
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	b6 01       	movw	r22, r12
    2e94:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2e98:	ea 94       	dec	r14
    2e9a:	7e 14       	cp	r7, r14
    2e9c:	c0 f3       	brcs	.-16     	; 0x2e8e <vfprintf+0x3a6>
    2e9e:	7a 94       	dec	r7
    2ea0:	f2 01       	movw	r30, r4
    2ea2:	e7 0d       	add	r30, r7
    2ea4:	f1 1d       	adc	r31, r1
    2ea6:	80 81       	ld	r24, Z
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	b6 01       	movw	r22, r12
    2eac:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2eb0:	77 20       	and	r7, r7
    2eb2:	a9 f7       	brne	.-22     	; 0x2e9e <vfprintf+0x3b6>
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <vfprintf+0x3da>
    2eb6:	80 e2       	ldi	r24, 0x20	; 32
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	b6 01       	movw	r22, r12
    2ebc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <fputc>
    2ec0:	fa 94       	dec	r15
    2ec2:	ff 20       	and	r15, r15
    2ec4:	c1 f7       	brne	.-16     	; 0x2eb6 <vfprintf+0x3ce>
    2ec6:	37 ce       	rjmp	.-914    	; 0x2b36 <vfprintf+0x4e>
    2ec8:	f6 01       	movw	r30, r12
    2eca:	26 81       	ldd	r18, Z+6	; 0x06
    2ecc:	37 81       	ldd	r19, Z+7	; 0x07
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <vfprintf+0x3ec>
    2ed0:	2f ef       	ldi	r18, 0xFF	; 255
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	c9 01       	movw	r24, r18
    2ed6:	2c 96       	adiw	r28, 0x0c	; 12
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13
    2ef0:	cf 90       	pop	r12
    2ef2:	bf 90       	pop	r11
    2ef4:	af 90       	pop	r10
    2ef6:	9f 90       	pop	r9
    2ef8:	8f 90       	pop	r8
    2efa:	7f 90       	pop	r7
    2efc:	6f 90       	pop	r6
    2efe:	5f 90       	pop	r5
    2f00:	4f 90       	pop	r4
    2f02:	3f 90       	pop	r3
    2f04:	2f 90       	pop	r2
    2f06:	08 95       	ret

00002f08 <strnlen_P>:
    2f08:	fc 01       	movw	r30, r24
    2f0a:	05 90       	lpm	r0, Z+
    2f0c:	61 50       	subi	r22, 0x01	; 1
    2f0e:	70 40       	sbci	r23, 0x00	; 0
    2f10:	01 10       	cpse	r0, r1
    2f12:	d8 f7       	brcc	.-10     	; 0x2f0a <strnlen_P+0x2>
    2f14:	80 95       	com	r24
    2f16:	90 95       	com	r25
    2f18:	8e 0f       	add	r24, r30
    2f1a:	9f 1f       	adc	r25, r31
    2f1c:	08 95       	ret

00002f1e <strnlen>:
    2f1e:	fc 01       	movw	r30, r24
    2f20:	61 50       	subi	r22, 0x01	; 1
    2f22:	70 40       	sbci	r23, 0x00	; 0
    2f24:	01 90       	ld	r0, Z+
    2f26:	01 10       	cpse	r0, r1
    2f28:	d8 f7       	brcc	.-10     	; 0x2f20 <strnlen+0x2>
    2f2a:	80 95       	com	r24
    2f2c:	90 95       	com	r25
    2f2e:	8e 0f       	add	r24, r30
    2f30:	9f 1f       	adc	r25, r31
    2f32:	08 95       	ret

00002f34 <strrev>:
    2f34:	dc 01       	movw	r26, r24
    2f36:	fc 01       	movw	r30, r24
    2f38:	67 2f       	mov	r22, r23
    2f3a:	71 91       	ld	r23, Z+
    2f3c:	77 23       	and	r23, r23
    2f3e:	e1 f7       	brne	.-8      	; 0x2f38 <strrev+0x4>
    2f40:	32 97       	sbiw	r30, 0x02	; 2
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <strrev+0x18>
    2f44:	7c 91       	ld	r23, X
    2f46:	6d 93       	st	X+, r22
    2f48:	70 83       	st	Z, r23
    2f4a:	62 91       	ld	r22, -Z
    2f4c:	ae 17       	cp	r26, r30
    2f4e:	bf 07       	cpc	r27, r31
    2f50:	c8 f3       	brcs	.-14     	; 0x2f44 <strrev+0x10>
    2f52:	08 95       	ret

00002f54 <fputc>:
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	8c 01       	movw	r16, r24
    2f5e:	eb 01       	movw	r28, r22
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	81 ff       	sbrs	r24, 1
    2f64:	1b c0       	rjmp	.+54     	; 0x2f9c <fputc+0x48>
    2f66:	82 ff       	sbrs	r24, 2
    2f68:	0d c0       	rjmp	.+26     	; 0x2f84 <fputc+0x30>
    2f6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2f6c:	3f 81       	ldd	r19, Y+7	; 0x07
    2f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f70:	9d 81       	ldd	r25, Y+5	; 0x05
    2f72:	28 17       	cp	r18, r24
    2f74:	39 07       	cpc	r19, r25
    2f76:	64 f4       	brge	.+24     	; 0x2f90 <fputc+0x3c>
    2f78:	e8 81       	ld	r30, Y
    2f7a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f7c:	01 93       	st	Z+, r16
    2f7e:	f9 83       	std	Y+1, r31	; 0x01
    2f80:	e8 83       	st	Y, r30
    2f82:	06 c0       	rjmp	.+12     	; 0x2f90 <fputc+0x3c>
    2f84:	e8 85       	ldd	r30, Y+8	; 0x08
    2f86:	f9 85       	ldd	r31, Y+9	; 0x09
    2f88:	80 2f       	mov	r24, r16
    2f8a:	09 95       	icall
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	31 f4       	brne	.+12     	; 0x2f9c <fputc+0x48>
    2f90:	8e 81       	ldd	r24, Y+6	; 0x06
    2f92:	9f 81       	ldd	r25, Y+7	; 0x07
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	9f 83       	std	Y+7, r25	; 0x07
    2f98:	8e 83       	std	Y+6, r24	; 0x06
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <fputc+0x4c>
    2f9c:	0f ef       	ldi	r16, 0xFF	; 255
    2f9e:	1f ef       	ldi	r17, 0xFF	; 255
    2fa0:	c8 01       	movw	r24, r16
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	08 95       	ret

00002fac <__ultoa_invert>:
    2fac:	fa 01       	movw	r30, r20
    2fae:	aa 27       	eor	r26, r26
    2fb0:	28 30       	cpi	r18, 0x08	; 8
    2fb2:	51 f1       	breq	.+84     	; 0x3008 <__ultoa_invert+0x5c>
    2fb4:	20 31       	cpi	r18, 0x10	; 16
    2fb6:	81 f1       	breq	.+96     	; 0x3018 <__ultoa_invert+0x6c>
    2fb8:	e8 94       	clt
    2fba:	6f 93       	push	r22
    2fbc:	6e 7f       	andi	r22, 0xFE	; 254
    2fbe:	6e 5f       	subi	r22, 0xFE	; 254
    2fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	af 4f       	sbci	r26, 0xFF	; 255
    2fc8:	b1 e0       	ldi	r27, 0x01	; 1
    2fca:	3e d0       	rcall	.+124    	; 0x3048 <__ultoa_invert+0x9c>
    2fcc:	b4 e0       	ldi	r27, 0x04	; 4
    2fce:	3c d0       	rcall	.+120    	; 0x3048 <__ultoa_invert+0x9c>
    2fd0:	67 0f       	add	r22, r23
    2fd2:	78 1f       	adc	r23, r24
    2fd4:	89 1f       	adc	r24, r25
    2fd6:	9a 1f       	adc	r25, r26
    2fd8:	a1 1d       	adc	r26, r1
    2fda:	68 0f       	add	r22, r24
    2fdc:	79 1f       	adc	r23, r25
    2fde:	8a 1f       	adc	r24, r26
    2fe0:	91 1d       	adc	r25, r1
    2fe2:	a1 1d       	adc	r26, r1
    2fe4:	6a 0f       	add	r22, r26
    2fe6:	71 1d       	adc	r23, r1
    2fe8:	81 1d       	adc	r24, r1
    2fea:	91 1d       	adc	r25, r1
    2fec:	a1 1d       	adc	r26, r1
    2fee:	20 d0       	rcall	.+64     	; 0x3030 <__ultoa_invert+0x84>
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <__ultoa_invert+0x48>
    2ff2:	68 94       	set
    2ff4:	3f 91       	pop	r19
    2ff6:	2a e0       	ldi	r18, 0x0A	; 10
    2ff8:	26 9f       	mul	r18, r22
    2ffa:	11 24       	eor	r1, r1
    2ffc:	30 19       	sub	r19, r0
    2ffe:	30 5d       	subi	r19, 0xD0	; 208
    3000:	31 93       	st	Z+, r19
    3002:	de f6       	brtc	.-74     	; 0x2fba <__ultoa_invert+0xe>
    3004:	cf 01       	movw	r24, r30
    3006:	08 95       	ret
    3008:	46 2f       	mov	r20, r22
    300a:	47 70       	andi	r20, 0x07	; 7
    300c:	40 5d       	subi	r20, 0xD0	; 208
    300e:	41 93       	st	Z+, r20
    3010:	b3 e0       	ldi	r27, 0x03	; 3
    3012:	0f d0       	rcall	.+30     	; 0x3032 <__ultoa_invert+0x86>
    3014:	c9 f7       	brne	.-14     	; 0x3008 <__ultoa_invert+0x5c>
    3016:	f6 cf       	rjmp	.-20     	; 0x3004 <__ultoa_invert+0x58>
    3018:	46 2f       	mov	r20, r22
    301a:	4f 70       	andi	r20, 0x0F	; 15
    301c:	40 5d       	subi	r20, 0xD0	; 208
    301e:	4a 33       	cpi	r20, 0x3A	; 58
    3020:	18 f0       	brcs	.+6      	; 0x3028 <__ultoa_invert+0x7c>
    3022:	49 5d       	subi	r20, 0xD9	; 217
    3024:	31 fd       	sbrc	r19, 1
    3026:	40 52       	subi	r20, 0x20	; 32
    3028:	41 93       	st	Z+, r20
    302a:	02 d0       	rcall	.+4      	; 0x3030 <__ultoa_invert+0x84>
    302c:	a9 f7       	brne	.-22     	; 0x3018 <__ultoa_invert+0x6c>
    302e:	ea cf       	rjmp	.-44     	; 0x3004 <__ultoa_invert+0x58>
    3030:	b4 e0       	ldi	r27, 0x04	; 4
    3032:	a6 95       	lsr	r26
    3034:	97 95       	ror	r25
    3036:	87 95       	ror	r24
    3038:	77 95       	ror	r23
    303a:	67 95       	ror	r22
    303c:	ba 95       	dec	r27
    303e:	c9 f7       	brne	.-14     	; 0x3032 <__ultoa_invert+0x86>
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	61 05       	cpc	r22, r1
    3044:	71 05       	cpc	r23, r1
    3046:	08 95       	ret
    3048:	9b 01       	movw	r18, r22
    304a:	ac 01       	movw	r20, r24
    304c:	0a 2e       	mov	r0, r26
    304e:	06 94       	lsr	r0
    3050:	57 95       	ror	r21
    3052:	47 95       	ror	r20
    3054:	37 95       	ror	r19
    3056:	27 95       	ror	r18
    3058:	ba 95       	dec	r27
    305a:	c9 f7       	brne	.-14     	; 0x304e <__ultoa_invert+0xa2>
    305c:	62 0f       	add	r22, r18
    305e:	73 1f       	adc	r23, r19
    3060:	84 1f       	adc	r24, r20
    3062:	95 1f       	adc	r25, r21
    3064:	a0 1d       	adc	r26, r0
    3066:	08 95       	ret

00003068 <__fp_mintl>:
    3068:	88 23       	and	r24, r24
    306a:	71 f4       	brne	.+28     	; 0x3088 <__fp_mintl+0x20>
    306c:	77 23       	and	r23, r23
    306e:	21 f0       	breq	.+8      	; 0x3078 <__fp_mintl+0x10>
    3070:	98 50       	subi	r25, 0x08	; 8
    3072:	87 2b       	or	r24, r23
    3074:	76 2f       	mov	r23, r22
    3076:	07 c0       	rjmp	.+14     	; 0x3086 <__fp_mintl+0x1e>
    3078:	66 23       	and	r22, r22
    307a:	11 f4       	brne	.+4      	; 0x3080 <__fp_mintl+0x18>
    307c:	99 27       	eor	r25, r25
    307e:	0d c0       	rjmp	.+26     	; 0x309a <__fp_mintl+0x32>
    3080:	90 51       	subi	r25, 0x10	; 16
    3082:	86 2b       	or	r24, r22
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	60 e0       	ldi	r22, 0x00	; 0
    3088:	2a f0       	brmi	.+10     	; 0x3094 <__fp_mintl+0x2c>
    308a:	9a 95       	dec	r25
    308c:	66 0f       	add	r22, r22
    308e:	77 1f       	adc	r23, r23
    3090:	88 1f       	adc	r24, r24
    3092:	da f7       	brpl	.-10     	; 0x308a <__fp_mintl+0x22>
    3094:	88 0f       	add	r24, r24
    3096:	96 95       	lsr	r25
    3098:	87 95       	ror	r24
    309a:	97 f9       	bld	r25, 7
    309c:	08 95       	ret

0000309e <__fp_mpack>:
    309e:	9f 3f       	cpi	r25, 0xFF	; 255
    30a0:	31 f0       	breq	.+12     	; 0x30ae <__fp_mpack_finite+0xc>

000030a2 <__fp_mpack_finite>:
    30a2:	91 50       	subi	r25, 0x01	; 1
    30a4:	20 f4       	brcc	.+8      	; 0x30ae <__fp_mpack_finite+0xc>
    30a6:	87 95       	ror	r24
    30a8:	77 95       	ror	r23
    30aa:	67 95       	ror	r22
    30ac:	b7 95       	ror	r27
    30ae:	88 0f       	add	r24, r24
    30b0:	91 1d       	adc	r25, r1
    30b2:	96 95       	lsr	r25
    30b4:	87 95       	ror	r24
    30b6:	97 f9       	bld	r25, 7
    30b8:	08 95       	ret

000030ba <__fp_split3>:
    30ba:	57 fd       	sbrc	r21, 7
    30bc:	90 58       	subi	r25, 0x80	; 128
    30be:	44 0f       	add	r20, r20
    30c0:	55 1f       	adc	r21, r21
    30c2:	59 f0       	breq	.+22     	; 0x30da <__fp_splitA+0x10>
    30c4:	5f 3f       	cpi	r21, 0xFF	; 255
    30c6:	71 f0       	breq	.+28     	; 0x30e4 <__fp_splitA+0x1a>
    30c8:	47 95       	ror	r20

000030ca <__fp_splitA>:
    30ca:	88 0f       	add	r24, r24
    30cc:	97 fb       	bst	r25, 7
    30ce:	99 1f       	adc	r25, r25
    30d0:	61 f0       	breq	.+24     	; 0x30ea <__fp_splitA+0x20>
    30d2:	9f 3f       	cpi	r25, 0xFF	; 255
    30d4:	79 f0       	breq	.+30     	; 0x30f4 <__fp_splitA+0x2a>
    30d6:	87 95       	ror	r24
    30d8:	08 95       	ret
    30da:	12 16       	cp	r1, r18
    30dc:	13 06       	cpc	r1, r19
    30de:	14 06       	cpc	r1, r20
    30e0:	55 1f       	adc	r21, r21
    30e2:	f2 cf       	rjmp	.-28     	; 0x30c8 <__fp_split3+0xe>
    30e4:	46 95       	lsr	r20
    30e6:	f1 df       	rcall	.-30     	; 0x30ca <__fp_splitA>
    30e8:	08 c0       	rjmp	.+16     	; 0x30fa <__fp_splitA+0x30>
    30ea:	16 16       	cp	r1, r22
    30ec:	17 06       	cpc	r1, r23
    30ee:	18 06       	cpc	r1, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	f1 cf       	rjmp	.-30     	; 0x30d6 <__fp_splitA+0xc>
    30f4:	86 95       	lsr	r24
    30f6:	71 05       	cpc	r23, r1
    30f8:	61 05       	cpc	r22, r1
    30fa:	08 94       	sec
    30fc:	08 95       	ret

000030fe <__fp_zero>:
    30fe:	e8 94       	clt

00003100 <__fp_szero>:
    3100:	bb 27       	eor	r27, r27
    3102:	66 27       	eor	r22, r22
    3104:	77 27       	eor	r23, r23
    3106:	cb 01       	movw	r24, r22
    3108:	97 f9       	bld	r25, 7
    310a:	08 95       	ret

0000310c <_exit>:
    310c:	f8 94       	cli

0000310e <__stop_program>:
    310e:	ff cf       	rjmp	.-2      	; 0x310e <__stop_program>
