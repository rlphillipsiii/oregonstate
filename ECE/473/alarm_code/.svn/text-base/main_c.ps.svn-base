%!PS-Adobe-3.0
%%Title: main.c
%%For: Robert
%%Creator: a2ps version 4.14
%%CreationDate: Fri Nov 22 12:41:54 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// testled1.c) c n
(// Robert Phillips III) N
(// 10.3.05) N
(// Tests wiring of LED board to mega128.) N
(// Select a digit with PORTB upper nibble then with) N
(// port D push buttons illuminate a single segment.) N
() p n
(// Port mapping:) c n
(// Port A:  bit0 black  segment A) N
(//          bit1 white  segment B) N
(//          bit2 grey   segment C) N
(//          bit3 purple segment D) N
(//          bit4 blue   segment E) N
(//          bit5 green  segment F) N
(//          bit6 yellow segment G) N
(//          bit7 orange decimal point) N
(//               brown  Vdd) N
(//               red    GND) N
() p n
(// Port B:  bit4 white  seg0) c n
(//          bit5 purple seg1) N
(//          bit6 green  seg2) N
(//          bit7 black  pwm ) N
(//               brown  Vdd) N
(//               orange GND) N
() p n
(#define) K
( F_CPU 16000000L) p n
() N
(#include) K
( <avr/io.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#include) K
( <util/delay.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <led_driver.h>) p n
(#include) K
( <button_driver.h>) p n
(#include) K
( <graph_driver.h>) p n
(#include) K
( <encoder_driver.h>) p n
(#include) K
( <lcd_driver.h>) p n
(#include) K
( <adc_driver.h>) p n
(#include) K
( <clock.h>) p n
(#include) K
( <macros.h>) p n
() N
(#define) K
( LCD_LINE_LENGTH 40) p n
(#define) K
( VOLUME          OCR3A) p n
() N
(volatile) K
( uint16_t number;) p n
(volatile) K
( uint16_t overflow;) p n
(volatile) K
( uint16_t song_index;) p n
(volatile) K
( uint16_t song_array;) p n
() N
(volatile) K
( ) p
(char) k
( *lcd_top;) p n
(volatile) K
( ) p
(char) k
( *lcd_bottom;) p n
() N
(volatile) K
( uint8_t lcd_index;) p n
(volatile) K
( uint8_t mode;) p n
() N
(volatile) K
( uint8_t clock_count;) p n
(volatile) K
( uint8_t refresh;) p n
(volatile) K
( uint8_t lcd_count;) p n
(volatile) K
( uint8_t play_alarm;) p n
(volatile) K
( uint8_t volume;) p n
(volatile) K
( uint8_t software_pwm;) p n
(volatile) K
( uint8_t seconds_state;) p n
() N
(volatile) K
( ) p
(struct) k
( encoder_state encoders;) p n
(volatile) K
( ) p
(struct) k
( display output;) p n
() N
(char) k
( *MODE_STRING[] = {) p n
() S 8 T (") S
(                                        ) str
(",) p n
() S 8 T (") S
(SET TIME                                ) str
(",) p n
(main.c) (Page 1/6) (Nov 22, 13 12:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (") S
(SET ALARM                               ) str
(",) p n
() S 8 T (") S
(                                        ) str
(") p n
(};) N
() N
(/******************************************************) c n
( * Initializes an overflow interrupt on timer 0 that) N
( * controls the frequency at which the buttons are) N
( * checked for its pressed state.) N
( ******************************************************/) N
(void) k
( init_ui_timer\(\)) p n
({) N
() S 8 T (TIMSK |= \(1 << OCIE1B\) | \(1 << TOIE2\);) S
(// | \(1 << OCIE1A\);// | \(1 << OCIE) c n
(1B\);) N
() p 8 T () N
() S 8 T (TCCR1A = 0x00;) N
() S 8 T (TCCR1B = \(1 << CS11\);) N
() S 8 T (TCCR1C = 0x00;) N
() N
() S 8 T (OCR1A = 10;) N
() S 8 T (OCR1B = 250;) N
(}) N
() N
(void) k
( init_alarm_ctc\(\)) p n
({) N
() S 8 T (TCCR3A = \(1 << WGM30\) | \(1 << COM3A1\);) S
(// | \(1 << COM3B0\);) c n
() p 8 T (TCCR3B = \(1 << WGM32\) | \(1 << CS31\);) N
() S 8 T (TCCR3C = 0x00;) N
() N
() S 8 T (VOLUME = 20;) N
(}) N
() N
(void) k
( update_clock\() p
(volatile) K
( ) p
(struct) k
( encoder_state *state\)) p n
({) N
() S 8 T () S
(if) K
( \(state->left_dir == STOPPED && state->right_dir == STOPPED\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() N
() S 8 T () S
(if) K
( \(state->left_dir == FORWARD\)) p n
() S 8 T () S 16 T (change_hour\(1\);) N
() N
() S 8 T () S
(if) K
( \(state->right_dir == FORWARD\)) p n
() S 8 T () S 16 T (change_minute\(1\);) N
() N
() S 8 T () S
(if) K
( \(state->left_dir == REVERSE\)) p n
() S 8 T () S 16 T (change_hour\(-1\);) N
() N
() S 8 T () S
(if) K
( \(state->right_dir == REVERSE\)) p n
() S 8 T () S 16 T (change_minute\(-1\);) N
(}) N
() N
(void) k
( update_alarm\() p
(volatile) K
( ) p
(struct) k
( encoder_state *state\)) p n
({) N
() S 8 T () S
(if) K
( \(state->left_dir == STOPPED && state->right_dir == STOPPED\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() N
() S 8 T () S
(if) K
( \(state->left_dir == FORWARD\)) p n
() S 8 T () S 16 T (change_alarm_hour\(1\);) N
() N
() S 8 T () S
(if) K
( \(state->right_dir == FORWARD\)) p n
() S 8 T () S 16 T (change_alarm_minute\(1\);) N
() N
() S 8 T () S
(if) K
( \(state->left_dir == REVERSE\)) p n
() S 8 T () S 16 T (change_alarm_hour\(-1\);) N
() N
() S 8 T () S
(if) K
( \(state->right_dir == REVERSE\)) p n
() S 8 T () S 16 T (change_alarm_minute\(-1\);) N
(}) N
() N
(void) k
( update_volume\() p
(volatile) K
( ) p
(struct) k
( encoder_state *state\)) p n
({) N
(main.c) (Page 2/6) (Nov 22, 13 12:31) title
border
grestore
(Printed by Robert) rhead
(main.c) (1/3) (Friday November 22, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(if) K
( \(state->left_dir == STOPPED && state->right_dir == STOPPED\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() N
() S 8 T () S
(if) K
( \(state->left_dir == FORWARD || state->right_dir == FORWARD\) {) p n
() S 8 T () S 16 T () S
(if) K
( \(VOLUME == 100\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() N
() S 8 T () S 16 T (VOLUME += 5;) N
() S 8 T (}) N
() S 8 T () N
() S 8 T () S
(if) K
( \(state->left_dir == REVERSE || state->right_dir == REVERSE\) {) p n
() S 8 T () S 16 T () S
(if) K
( \(VOLUME == 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() N
() S 8 T () S 16 T (VOLUME -= 5;) N
() S 8 T (}) N
(}) N
() N
(void) k
( set_lcd_alarm_state\(uint8_t state\)) p n
({) N
() S 8 T () S
(if) K
( \(state == ALARM_ENABLED\)) p n
() S 8 T () S 16 T (lcd_top = ") S
(ALARM ON                                ) str
(";) p n
() S 8 T () S
(else) K n
() p 8 T () S 16 T (lcd_top = ") S
(ALARM OFF                               ) str
(";) p n
() N
() S 8 T (lcd_bottom = MODE_STRING[mode];) N
(}) N
() N
(void) k
( toggle_mode\(uint8_t new\)) p n
({) N
() S 8 T () S
(if) K
( \(mode == new\) ) p n
() S 8 T () S 16 T (mode = MODE_DEFAULT;) N
() S 8 T () S
(else) K n
() p 8 T () S 16 T (mode = new;) N
(}) N
() N
(void) k
( change_mode\() p
(char) k
( buttons\)) p n
({) N
() S 8 T () S
(if) K
( \(ISSET\(buttons, BUTTON1\)\)) p n
() S 8 T () S 16 T (toggle_mode\(MODE_SET_TIME\);) N
() S 8 T () N
() S 8 T () S
(if) K
( \(ISSET\(buttons, BUTTON2\)\)) p n
() S 8 T () S 16 T (toggle_mode\(MODE_SET_ALARM\);) N
() N
() S 8 T () S
(if) K
( \(ISSET\(buttons, BUTTON3\)\) {) p n
() S 8 T () S 16 T (toggle_mode\(MODE_ENABLE_ALARM\);) N
() N
() S 8 T () S 16 T () S
(if) K
( \(is_alarm_enabled\(\)\)) p n
() S 8 T () S 16 T () S 24 T (set_alarm_state\(ALARM_DISABLED\);) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (set_alarm_state\(ALARM_ENABLED\);) N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
( \(ISSET\(buttons, BUTTON4\)\) {) p n
() S 8 T () S 16 T () S
(if) K
( \(play_alarm\) {) p n
() S 8 T () S 16 T () S 24 T (play_alarm = 0;) N
() S 8 T () S 16 T () S 24 T (snooze_alarm\(0, 10\);) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
( \(ISSET\(buttons, BUTTON5\)\) {) p n
() S 8 T () S 16 T (play_alarm = 0;) N
() N
() S 8 T () S 16 T (reset_snooze\(\);) N
() S 8 T (}) N
(}) N
() N
(void) k
( refresh_encoders\(\)) p n
({) N
(main.c) (Page 3/6) (Nov 22, 13 12:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (latch_encoders\(\);) N
() S 8 T () S
(if) K
( \(VOLUME == 0\)) p n
() S 8 T () S 16 T (get_direction\(&encoders, update_graph\(OFF\)\); ) S
(// get the encoder ) c n
(direction) N
() p 8 T () S
(else) K n
() p 8 T () S 16 T (get_direction\(&encoders, update_graph\(GRAPH_NUMS[VOLUME/14+1]\)\);) N
( ) S
(// get the encoder direction) c n
() p n
() S 8 T () S
(switch) K
(\(mode\) {) p n
() S 8 T () S
(case) K
( MODE_SET_TIME:) p n
() S 8 T () S 16 T (update_clock\(&encoders\);) S 48 T () S 56 T () S 64 T () N
() S 8 T () S 16 T () S
(break) K
(;) p n
() N
() S 8 T () S
(case) K
( MODE_SET_ALARM:) p n
() S 8 T () S 16 T (update_alarm\(&encoders\);) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() N
() S 8 T () S
(case) K
( MODE_ENABLE_ALARM:) p n
() S 8 T () S
(case) K
( MODE_DEFAULT:) p n
() S 8 T () S 16 T (update_volume\(&encoders\);) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() S 8 T (}) N
(}) N
() N
(void) k
( refresh_lcd_display\(\)) p n
({) N
() S 8 T (set_lcd_alarm_state\(is_alarm_enabled\(\)\);) N
() S 8 T () S
(if) K
( \(lcd_index > LCD_LINE_LENGTH-1\)) p n
() S 8 T () S 16 T () S
(char) k
(2lcd\(lcd_bottom[lcd_index-LCD_LINE_LENGTH]\);) p n
() S 8 T () S
(else) K n
() p 8 T () S 16 T () S
(char) k
(2lcd\(lcd_top[lcd_index]\);) p n
() N
() S 8 T (lcd_index++;) N
() S 8 T () S
(if) K
( \(lcd_index == 2*LCD_LINE_LENGTH\)) p n
() S 8 T () S 16 T (lcd_index = 0;) N
(}) N
() N
(void) k
( refresh_led_display\(\)) p n
({) N
() S 8 T (seconds_state = get_seconds_state\(mode\);) N
() S 8 T () S
(if) K
( \(mode == MODE_SET_TIME && seconds_state\) {) p n
() S 8 T () S 16 T (disable_leds\(\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (} ) N
() N
() S 8 T () S
(switch) K
( \(mode\) {) p n
() S 8 T () S
(case) K
( MODE_SET_ALARM:) p n
() S 8 T () S 16 T (number = get_alarm\(\);) N
() S 8 T () S 16 T (update_colon\(&output, COLON_ON, is_alarm_enabled\(\)\);) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() N
() S 8 T () S
(default) K
(:) p n
() S 8 T () S 16 T (number = get_time\(\);) N
() S 8 T () S 16 T (update_colon\(&output, seconds_state, is_alarm_enabled\(\)\);) N
() S 8 T (}) N
() N
() S 8 T (update_segment\(&output, number\);) N
(}) N
() N
(void) k
( init_peripherals\(\)) p n
({) N
() S 8 T () S
(/* init the clock */) c n
() p 8 T (init_clock_timer\(\);) N
() S 8 T (set_time\(21, 37\);) N
() N
() S 8 T (enable_leds\(\);) N
() S 8 T (enable_dimmer\(\);) N
() S 8 T (_delay_ms\(20\);) N
() N
(main.c) (Page 4/6) (Nov 22, 13 12:31) title
border
grestore
(Printed by Robert) rhead
(main.c) (2/3) (Friday November 22, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (init_ui_timer\(\); ) S
(// init the timer to check for the button states) c n
() p 8 T (init_alarm_ctc\(\);) N
() S 8 T () N
() S 8 T (enable_graph\(\); ) S
(// enable the bar graph) c n
() p 8 T (update_graph\(OFF\); ) S
(// make sure the bar graph is off) c n
() p n
() S 8 T (enable_lcd\(\);) N
() S 8 T (cursor_home\(\);) N
() S 8 T (clear_display\(\);) N
() N
() S 8 T (lcd_top    = ") S
(                                        ) str
(";) p n
() S 8 T (lcd_bottom = ") S
(                                        ) str
(";) p n
() S 8 T (lcd_index = 0;) N
() S 8 T (set_lcd_alarm_state\(ALARM_DISABLED\);) N
() N
() S 8 T (init_display_struct\(&output\); ) S
(// init the struct the holds the display s) c n
(tate) N
() p 8 T (set_zero_filled\(&output\); ) S
(// set the military time display) c n
() p n
() S 8 T (enable_encoders\(\); ) S
(// enable the encoders) c n
() p 8 T (init_encoder_struct\(&encoders\);) S
(// init the encoder data struct) c n
() p n
() S 8 T (mode = MODE_DEFAULT;) N
(}) N
() N
(void) k
( update_song_sample\(\)) p n
({) N
() S 8 T (software_pwm++;) N
() S 8 T () S
(if) K
( \(software_pwm == 3 && seconds_state\) {) p n
() S 8 T () S 16 T (TOGGLEBIT\(PORTE, PE4\);) N
() S 8 T () S 16 T (software_pwm = 0;) N
() S 8 T (}) N
(}) N
() N
(ISR\(TIMER2_OVF_vect\)) N
({) N
() S 8 T (refresh_encoders\(\);) N
(}) N
() N
(ISR\(TIMER1_COMPB_vect\)) N
({) N
() S 8 T (TCNT1 = 0;) N
() S 8 T () S 16 T () N
() S 8 T () S
(if) K
( \(play_alarm\)) p n
() S 8 T () S 16 T (update_song_sample\(\);) N
() N
() S 8 T (lcd_count++;) N
() S 8 T () S
(if) K
( \(lcd_count == 3\) {) p n
() S 8 T () S 16 T (lcd_count = 0;) N
() N
() S 8 T () S 16 T (refresh_lcd_display\(\);) N
() S 8 T (}) N
() N
() S 8 T (refresh_led_display\(\);) N
(}) N
() N
(/******************************************************) c n
( * Handles the following operations:) N
( *) N
( * 1\) Ticking of the seconds) N
( * 2\) Polls the buttons) N
( *) N
( * The timer is initialized by the init_clock_timer) N
( * routine) N
( ******************************************************/) N
(ISR\(TIMER0_OVF_vect\)) p n
({) N
() S 8 T (clock_count++;) N
() S 8 T () S
(if) K
( \(clock_count == 128\) {) p n
(main.c) (Page 5/6) (Nov 22, 13 12:31) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (tick_seconds\(\);) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(if) K
( \(is_alarm_time\(\)\)) p n
() S 8 T () S 16 T () S 24 T (play_alarm = 1;) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T (clock_count = 0;) N
() S 8 T (}) N
() N
() S 8 T (enable_buttons\(\); ) S
(// enable the buttons and disable the display) c n
() p 8 T (change_mode\(poll_buttons\(PINA\)\); ) S
(// get the button state) c n
() p 8 T (enable_leds\(\); ) S
(// re-enable the leds) c n
() p n
() S 8 T (update_brightness\(\);) N
(}) N
() N
(int) k
( main\(\)) p n
({) N
() S 8 T (DDRC = 0x02;) N
() S 8 T (DDRB = 0xF0;   ) S
(//set port bits 4-7 B as outputs) c n
() p 8 T (DDRD = 0x00;   ) S
(//set port D all inputs ) c n
() p 8 T (DDRE = 0xFF;) N
() S 8 T () N
() S 8 T (PORTD = 0xFF;   ) S
(//set port D all pullups ) c n
() p n
() S 8 T (clock_count = 0;) N
() S 8 T (lcd_count = 0;) N
() S 8 T (refresh = 0;) N
() S 8 T (overflow = 0;) N
() S 8 T (song_index = 0;) N
() S 8 T (song_array = 0;) N
() S 8 T (play_alarm = 0;) N
() S 8 T (software_pwm = 0;) N
() S 8 T () N
() S 8 T (init_peripherals\(\);) N
() N
() S 8 T (update_brightness\(\);) N
() S 8 T (_delay_ms\(20\);) N
() S 8 T () N
() S 8 T (sei\(\); ) N
() N
() S 8 T () S
(while) K
( \(1\) {}) p n
(}  ) S
(//main) c n
() p n
(main.c) (Page 6/6) (Nov 22, 13 12:31) title
border
grestore
(Printed by Robert) rhead
(main.c) (3/3) (Friday November 22, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
