
bar_graph_simple_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b28  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007ee  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9c:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <spi_init>:
// external device specific initalizations.  Sets up SPI to be:                        
// master mode, clock=clk/2, cycle half phase, low polarity, MSB first
// interrupts disabled, poll SPIF bit in SPSR to check xmit completion
//**********************************************************************
void spi_init(void){
	DDRB = 0x07;  //set output mode for SS, MOSI, SCLK
  a4:	87 e0       	ldi	r24, 0x07	; 7
  a6:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR); //set master mode, clk low on idle, leading edge sample
  a8:	80 e5       	ldi	r24, 0x50	; 80
  aa:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);  //set choose double speed operation
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	8e b9       	out	0x0e, r24	; 14
 }//spi_init
  b0:	08 95       	ret

000000b2 <main>:
// external device specific initalizations.  Sets up SPI to be:                        
// master mode, clock=clk/2, cycle half phase, low polarity, MSB first
// interrupts disabled, poll SPIF bit in SPSR to check xmit completion
//**********************************************************************
void spi_init(void){
	DDRB = 0x07;  //set output mode for SS, MOSI, SCLK
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR); //set master mode, clk low on idle, leading edge sample
  b6:	80 e5       	ldi	r24, 0x50	; 80
  b8:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);  //set choose double speed operation
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	8e b9       	out	0x0e, r24	; 14
	uint8_t display_count = 0x01; //holds count for display 
	uint8_t i; //dummy counter

	//do initialization
	spi_init();  //initalize SPI port
	DDRD = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  c2:	12 ba       	out	0x12, r1	; 18
//**********************************************************************
//                                main                                 
//**********************************************************************
int main(){     

	uint8_t display_count = 0x01; //holds count for display 
  c4:	81 e0       	ldi	r24, 0x01	; 1
	spi_init();  //initalize SPI port
	DDRD = 0xFF;
	PORTD = 0;

	while(1){                             //main while loop
		SPDR = display_count;             //send to display 
  c6:	8f b9       	out	0x0f, r24	; 15
		while (bit_is_clear(SPSR,SPIF)){} //wait till data sent out
  c8:	77 9b       	sbis	0x0e, 7	; 14
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x16>
		PORTD |= (1 << PD2);                   //rising edge to regclk on HC595 
  cc:	92 9a       	sbi	0x12, 2	; 18
		PORTD &= ~(1 << PD2);                   //falling edge
  ce:	92 98       	cbi	0x12, 2	; 18

		display_count = (display_count << 1);        //shift for next time 
  d0:	88 0f       	add	r24, r24
		display_count |= 1;
  d2:	81 60       	ori	r24, 0x01	; 1

		if(display_count==0xFF){display_count=0x01;} //display back to 1st positon
  d4:	8f 3f       	cpi	r24, 0xFF	; 255
  d6:	71 f1       	breq	.+92     	; 0x134 <main+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	31 ee       	ldi	r19, 0xE1	; 225
  dc:	44 e0       	ldi	r20, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x2c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x36>
  e8:	00 00       	nop
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	31 ee       	ldi	r19, 0xE1	; 225
  ee:	44 e0       	ldi	r20, 0x04	; 4
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	40 40       	sbci	r20, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x3e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x48>
  fa:	00 00       	nop
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	31 ee       	ldi	r19, 0xE1	; 225
 100:	44 e0       	ldi	r20, 0x04	; 4
 102:	21 50       	subi	r18, 0x01	; 1
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	40 40       	sbci	r20, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x50>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x5a>
 10c:	00 00       	nop
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	31 ee       	ldi	r19, 0xE1	; 225
 112:	44 e0       	ldi	r20, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	40 40       	sbci	r20, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x62>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x6c>
 11e:	00 00       	nop
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	31 ee       	ldi	r19, 0xE1	; 225
 124:	44 e0       	ldi	r20, 0x04	; 4
 126:	21 50       	subi	r18, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	40 40       	sbci	r20, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x74>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x7e>
 130:	00 00       	nop
 132:	c9 cf       	rjmp	.-110    	; 0xc6 <main+0x14>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	d0 cf       	rjmp	.-96     	; 0xd8 <main+0x26>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
