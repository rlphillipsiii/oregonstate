
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000002fc  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000a50  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062d  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019c  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  00001299  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013f  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a0  00000000  00000000  00001803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  c6:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <setup>:
#define LEFT_DIR PB6

unsigned char left, right;

void setup() {
	left = 0;
  ce:	10 92 01 01 	sts	0x0101, r1
	right = 0;
  d2:	10 92 00 01 	sts	0x0100, r1
	
	EICRA = (1 << ISC01) | (1 << ISC11);
  d6:	8a e0       	ldi	r24, 0x0A	; 10
  d8:	80 93 6a 00 	sts	0x006A, r24
	EIMSK = (1 << INT1) | (1 << INT0);
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	89 bf       	out	0x39, r24	; 57
	
	DDRA = 0b11111100;
  e0:	8c ef       	ldi	r24, 0xFC	; 252
  e2:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11110000;
  e4:	80 ef       	ldi	r24, 0xF0	; 240
  e6:	87 bb       	out	0x17, r24	; 23
	
	PORTB = 0;
  e8:	18 ba       	out	0x18, r1	; 24
	sei();
  ea:	78 94       	sei
}
  ec:	08 95       	ret

000000ee <__vector_1>:

SIGNAL(SIG_INTERRUPT0){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
	right = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 00 01 	sts	0x0100, r24
	
	return;
}
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_2>:

SIGNAL(SIG_INTERRUPT1){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
	left = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 01 01 	sts	0x0101, r24
	
	return;
}
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <set_right_motor>:

void set_right_motor(int dir){
	if(dir == FORWARD){
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 05       	cpc	r25, r1
 12e:	19 f4       	brne	.+6      	; 0x136 <set_right_motor+0xc>
		PORTB |= (1 << RIGHT_DIR);
 130:	c5 9a       	sbi	0x18, 5	; 24
		PORTB &= ~(1 << RIGHT_ENABLE);
 132:	c4 98       	cbi	0x18, 4	; 24
 134:	08 95       	ret
	}else{
		PORTB &= ~(1 << RIGHT_ENABLE) & ~(1 << RIGHT_DIR);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	8f 7c       	andi	r24, 0xCF	; 207
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret

0000013e <set_left_motor>:
	}	
}

void set_left_motor(int dir){
	if(dir == FORWARD){
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 05       	cpc	r25, r1
 142:	19 f4       	brne	.+6      	; 0x14a <set_left_motor+0xc>
		PORTB |= (1 << LEFT_DIR);
 144:	c6 9a       	sbi	0x18, 6	; 24
		PORTB &= ~(1 << LEFT_ENABLE);
 146:	c7 98       	cbi	0x18, 7	; 24
 148:	08 95       	ret
	}else{
		PORTB &= ~(1 << LEFT_ENABLE) & ~(1 << LEFT_DIR);
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8f 73       	andi	r24, 0x3F	; 63
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret

00000152 <set_direction>:
	}
}

void set_direction(int dir){
	switch(dir){
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	91 05       	cpc	r25, r1
 156:	69 f0       	breq	.+26     	; 0x172 <set_direction+0x20>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	91 05       	cpc	r25, r1
 15c:	1c f4       	brge	.+6      	; 0x164 <set_direction+0x12>
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	89 f0       	breq	.+34     	; 0x184 <set_direction+0x32>
 162:	08 95       	ret
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	91 05       	cpc	r25, r1
 168:	f9 f0       	breq	.+62     	; 0x1a8 <set_direction+0x56>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	91 05       	cpc	r25, r1
 16e:	21 f5       	brne	.+72     	; 0x1b8 <set_direction+0x66>
 170:	12 c0       	rjmp	.+36     	; 0x196 <set_direction+0x44>
		
		case FORWARD:	
			set_right_motor(FORWARD);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 95 00 	call	0x12a	; 0x12a <set_right_motor>
			set_left_motor(FORWARD);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 9f 00 	call	0x13e	; 0x13e <set_left_motor>
			break;
 182:	08 95       	ret
			
		case REVERSE:
			set_right_motor(REVERSE);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 95 00 	call	0x12a	; 0x12a <set_right_motor>
			set_left_motor(REVERSE);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 9f 00 	call	0x13e	; 0x13e <set_left_motor>
			break;
 194:	08 95       	ret
			
		case LEFT:
			set_right_motor(FORWARD);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 95 00 	call	0x12a	; 0x12a <set_right_motor>
			set_left_motor(REVERSE);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 9f 00 	call	0x13e	; 0x13e <set_left_motor>
			break;
 1a6:	08 95       	ret
			
		case RIGHT:
			set_right_motor(REVERSE);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 95 00 	call	0x12a	; 0x12a <set_right_motor>
			set_left_motor(FORWARD);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 9f 00 	call	0x13e	; 0x13e <set_left_motor>
 1b8:	08 95       	ret

000001ba <main>:
	}
}

int main(void)
{
	setup();
 1ba:	0e 94 67 00 	call	0xce	; 0xce <setup>
	
    while(1) {
        if(right == 1){
 1be:	80 91 00 01 	lds	r24, 0x0100
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	41 f5       	brne	.+80     	; 0x216 <main+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	93 ed       	ldi	r25, 0xD3	; 211
 1ca:	a0 e3       	ldi	r26, 0x30	; 48
 1cc:	81 50       	subi	r24, 0x01	; 1
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	a0 40       	sbci	r26, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x12>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x1c>
 1d6:	00 00       	nop
			_delay_ms(1000);
			
			set_direction(REVERSE);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 a9 00 	call	0x152	; 0x152 <set_direction>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	93 ed       	ldi	r25, 0xD3	; 211
 1e4:	a0 e3       	ldi	r26, 0x30	; 48
 1e6:	81 50       	subi	r24, 0x01	; 1
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	a0 40       	sbci	r26, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x2c>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x36>
 1f0:	00 00       	nop
			_delay_ms(1000);
			
			set_direction(LEFT);
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 a9 00 	call	0x152	; 0x152 <set_direction>
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	94 e3       	ldi	r25, 0x34	; 52
 1fe:	ac e0       	ldi	r26, 0x0C	; 12
 200:	81 50       	subi	r24, 0x01	; 1
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	a0 40       	sbci	r26, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x46>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x50>
 20a:	00 00       	nop
			_delay_ms(250);
			
			left = 0;
 20c:	10 92 01 01 	sts	0x0101, r1
			right = 0;
 210:	10 92 00 01 	sts	0x0100, r1
 214:	30 c0       	rjmp	.+96     	; 0x276 <main+0xbc>
		}else if(left == 1){
 216:	80 91 01 01 	lds	r24, 0x0101
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	41 f5       	brne	.+80     	; 0x26e <main+0xb4>
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	93 ed       	ldi	r25, 0xD3	; 211
 222:	a0 e3       	ldi	r26, 0x30	; 48
 224:	81 50       	subi	r24, 0x01	; 1
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	a0 40       	sbci	r26, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x6a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x74>
 22e:	00 00       	nop
			_delay_ms(1000);
			
			set_direction(REVERSE);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 a9 00 	call	0x152	; 0x152 <set_direction>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	93 ed       	ldi	r25, 0xD3	; 211
 23c:	a0 e3       	ldi	r26, 0x30	; 48
 23e:	81 50       	subi	r24, 0x01	; 1
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	a0 40       	sbci	r26, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x84>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x8e>
 248:	00 00       	nop
			_delay_ms(1000);
			
			set_direction(RIGHT);
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 a9 00 	call	0x152	; 0x152 <set_direction>
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	94 e3       	ldi	r25, 0x34	; 52
 256:	ac e0       	ldi	r26, 0x0C	; 12
 258:	81 50       	subi	r24, 0x01	; 1
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	a0 40       	sbci	r26, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x9e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0xa8>
 262:	00 00       	nop
			_delay_ms(250);
			
			left = 0;
 264:	10 92 01 01 	sts	0x0101, r1
			right = 0;
 268:	10 92 00 01 	sts	0x0100, r1
 26c:	04 c0       	rjmp	.+8      	; 0x276 <main+0xbc>
		}else{
			set_direction(FORWARD);	
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 a9 00 	call	0x152	; 0x152 <set_direction>
 276:	af e9       	ldi	r26, 0x9F	; 159
 278:	bf e0       	ldi	r27, 0x0F	; 15
 27a:	11 97       	sbiw	r26, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0xc0>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0xc6>
 280:	00 00       	nop
 282:	9d cf       	rjmp	.-198    	; 0x1be <main+0x4>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
