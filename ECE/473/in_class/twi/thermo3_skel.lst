
thermo3_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000816  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002b  00800100  00800100  0000088a  2**0
                  ALLOC
  2 .stab         000021f0  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d69  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_33>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 32       	cpi	r26, 0x2B	; 43
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
  ac:	0c 94 09 04 	jmp	0x812	; 0x812 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	0b b6       	in	r0, 0x3b	; 59
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
  ce:	80 91 71 00 	lds	r24, 0x0071
  d2:	88 32       	cpi	r24, 0x28	; 40
  d4:	e1 f1       	breq	.+120    	; 0x14e <__vector_33+0x9a>
  d6:	89 32       	cpi	r24, 0x29	; 41
  d8:	c8 f0       	brcs	.+50     	; 0x10c <__vector_33+0x58>
  da:	80 34       	cpi	r24, 0x40	; 64
  dc:	09 f4       	brne	.+2      	; 0xe0 <__vector_33+0x2c>
  de:	4d c0       	rjmp	.+154    	; 0x17a <__vector_33+0xc6>
  e0:	81 34       	cpi	r24, 0x41	; 65
  e2:	78 f1       	brcs	.+94     	; 0x142 <__vector_33+0x8e>
  e4:	80 35       	cpi	r24, 0x50	; 80
  e6:	09 f4       	brne	.+2      	; 0xea <__vector_33+0x36>
  e8:	60 c0       	rjmp	.+192    	; 0x1aa <__vector_33+0xf6>
  ea:	88 35       	cpi	r24, 0x58	; 88
  ec:	b1 f4       	brne	.+44     	; 0x11a <__vector_33+0x66>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
  ee:	80 91 00 01 	lds	r24, 0x0100
  f2:	e0 91 02 01 	lds	r30, 0x0102
  f6:	f0 91 03 01 	lds	r31, 0x0103
  fa:	e8 0f       	add	r30, r24
  fc:	f1 1d       	adc	r31, r1
  fe:	80 91 73 00 	lds	r24, 0x0073
 102:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 104:	84 e9       	ldi	r24, 0x94	; 148
 106:	80 93 74 00 	sts	0x0074, r24
      break;      
 10a:	0e c0       	rjmp	.+28     	; 0x128 <__vector_33+0x74>
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 10c:	80 31       	cpi	r24, 0x10	; 16
 10e:	09 f4       	brne	.+2      	; 0x112 <__vector_33+0x5e>
 110:	42 c0       	rjmp	.+132    	; 0x196 <__vector_33+0xe2>
 112:	88 31       	cpi	r24, 0x18	; 24
 114:	e1 f0       	breq	.+56     	; 0x14e <__vector_33+0x9a>
 116:	88 30       	cpi	r24, 0x08	; 8
 118:	f1 f1       	breq	.+124    	; 0x196 <__vector_33+0xe2>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 11a:	80 91 71 00 	lds	r24, 0x0071
 11e:	80 93 01 01 	sts	0x0101, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0b be       	out	0x3b, r0	; 59
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 142:	88 33       	cpi	r24, 0x38	; 56
 144:	51 f7       	brne	.-44     	; 0x11a <__vector_33+0x66>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 146:	85 ea       	ldi	r24, 0xA5	; 165
 148:	80 93 74 00 	sts	0x0074, r24
      break;
 14c:	ed cf       	rjmp	.-38     	; 0x128 <__vector_33+0x74>
      twi_buf_ptr = 0;      //initalize buffer pointer 
      TWCR = TWCR_SEND;     //send SLA+RW
      break;
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	90 91 05 01 	lds	r25, 0x0105
 156:	89 17       	cp	r24, r25
 158:	a8 f6       	brcc	.-86     	; 0x104 <__vector_33+0x50>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 15a:	e0 91 02 01 	lds	r30, 0x0102
 15e:	f0 91 03 01 	lds	r31, 0x0103
 162:	e8 0f       	add	r30, r24
 164:	f1 1d       	adc	r31, r1
 166:	90 81       	ld	r25, Z
 168:	90 93 73 00 	sts	0x0073, r25
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 00 01 	sts	0x0100, r24
        TWCR = TWCR_SEND;               //send next byte 
 172:	85 e8       	ldi	r24, 0x85	; 133
 174:	80 93 74 00 	sts	0x0074, r24
 178:	d7 cf       	rjmp	.-82     	; 0x128 <__vector_33+0x74>
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 17a:	20 91 00 01 	lds	r18, 0x0100
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 17e:	80 91 05 01 	lds	r24, 0x0105
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	24 f5       	brge	.+72     	; 0x1d6 <__vector_33+0x122>
 18e:	85 ec       	ldi	r24, 0xC5	; 197
 190:	80 93 74 00 	sts	0x0074, r24
 194:	c9 cf       	rjmp	.-110    	; 0x128 <__vector_33+0x74>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 196:	80 91 04 01 	lds	r24, 0x0104
 19a:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 19e:	10 92 00 01 	sts	0x0100, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 1a2:	85 e8       	ldi	r24, 0x85	; 133
 1a4:	80 93 74 00 	sts	0x0074, r24
      break;
 1a8:	bf cf       	rjmp	.-130    	; 0x128 <__vector_33+0x74>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 1aa:	20 91 00 01 	lds	r18, 0x0100
 1ae:	e0 91 02 01 	lds	r30, 0x0102
 1b2:	f0 91 03 01 	lds	r31, 0x0103
 1b6:	e2 0f       	add	r30, r18
 1b8:	f1 1d       	adc	r31, r1
 1ba:	80 91 73 00 	lds	r24, 0x0073
 1be:	80 83       	st	Z, r24
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	20 93 00 01 	sts	0x0100, r18
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 1c6:	80 91 05 01 	lds	r24, 0x0105
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	28 17       	cp	r18, r24
 1d2:	39 07       	cpc	r19, r25
 1d4:	e4 f2       	brlt	.-72     	; 0x18e <__vector_33+0xda>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 1d6:	85 e8       	ldi	r24, 0x85	; 133
 1d8:	80 93 74 00 	sts	0x0074, r24
 1dc:	a5 cf       	rjmp	.-182    	; 0x128 <__vector_33+0x74>

000001de <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 1de:	80 91 74 00 	lds	r24, 0x0074
}
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	08 95       	ret

000001e6 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 1e6:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 1ea:	90 fd       	sbrc	r25, 0
 1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	80 93 04 01 	sts	0x0104, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 1f4:	70 93 03 01 	sts	0x0103, r23
 1f8:	60 93 02 01 	sts	0x0102, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 1fc:	40 93 05 01 	sts	0x0105, r20
  TWCR = TWCR_START;                    //initiate START
 200:	85 ea       	ldi	r24, 0xA5	; 165
 202:	80 93 74 00 	sts	0x0074, r24
}
 206:	08 95       	ret

00000208 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 208:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 20c:	90 fd       	sbrc	r25, 0
 20e:	fc cf       	rjmp	.-8      	; 0x208 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 210:	81 60       	ori	r24, 0x01	; 1
 212:	80 93 04 01 	sts	0x0104, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 216:	70 93 03 01 	sts	0x0103, r23
 21a:	60 93 02 01 	sts	0x0102, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 21e:	40 93 05 01 	sts	0x0105, r20
  TWCR = TWCR_START;                   //initiate START
 222:	85 ea       	ldi	r24, 0xA5	; 165
 224:	80 93 74 00 	sts	0x0074, r24
}
 228:	08 95       	ret

0000022a <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
 230:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
 234:	8c e0       	ldi	r24, 0x0C	; 12
 236:	80 93 70 00 	sts	0x0070, r24
}
 23a:	08 95       	ret

0000023c <strobe_lcd>:

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 23c:	e2 e6       	ldi	r30, 0x62	; 98
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	88 60       	ori	r24, 0x08	; 8
 244:	80 83       	st	Z, r24
	PORTF &= ~0x08;
 246:	80 81       	ld	r24, Z
 248:	87 7f       	andi	r24, 0xF7	; 247
 24a:	80 83       	st	Z, r24
}          
 24c:	08 95       	ret

0000024e <clear_display>:
 
void clear_display(void){
	SPDR = 0x00;    //command, not data
 24e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 250:	77 9b       	sbis	0x0e, 7	; 14
 252:	fe cf       	rjmp	.-4      	; 0x250 <clear_display+0x2>
	SPDR = 0x01;    //clear display command
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 258:	77 9b       	sbis	0x0e, 7	; 14
 25a:	fe cf       	rjmp	.-4      	; 0x258 <clear_display+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 25c:	80 91 62 00 	lds	r24, 0x0062
 260:	88 60       	ori	r24, 0x08	; 8
 262:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 266:	80 91 62 00 	lds	r24, 0x0062
 26a:	87 7f       	andi	r24, 0xF7	; 247
 26c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e3       	ldi	r24, 0x3F	; 63
 272:	9f e1       	ldi	r25, 0x1F	; 31
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <clear_display+0x26>
 278:	00 c0       	rjmp	.+0      	; 0x27a <clear_display+0x2c>
 27a:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x01;    //clear display command
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();   //strobe the LCD enable pin
	_delay_ms(2);   //obligatory waiting for slow LCD
}         
 27c:	08 95       	ret

0000027e <cursor_home>:

void cursor_home(void){
	SPDR = 0x00;    //command, not data
 27e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 280:	77 9b       	sbis	0x0e, 7	; 14
 282:	fe cf       	rjmp	.-4      	; 0x280 <cursor_home+0x2>
	SPDR = 0x02;   // cursor go home position
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 288:	77 9b       	sbis	0x0e, 7	; 14
 28a:	fe cf       	rjmp	.-4      	; 0x288 <cursor_home+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 28c:	80 91 62 00 	lds	r24, 0x0062
 290:	88 60       	ori	r24, 0x08	; 8
 292:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 296:	80 91 62 00 	lds	r24, 0x0062
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	80 93 62 00 	sts	0x0062, r24
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x02;   // cursor go home position
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
//	_delay_ms(1);  //not necessary with alarm_clock.c code
}         
 2a0:	08 95       	ret

000002a2 <home_line2>:
  
void home_line2(void){
	SPDR = 0x00;    //command, not data
 2a2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2a4:	77 9b       	sbis	0x0e, 7	; 14
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <home_line2+0x2>
	SPDR = 0xC0;   // cursor go home on line 2
 2a8:	80 ec       	ldi	r24, 0xC0	; 192
 2aa:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2ac:	77 9b       	sbis	0x0e, 7	; 14
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <home_line2+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 2b0:	80 91 62 00 	lds	r24, 0x0062
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 2ba:	80 91 62 00 	lds	r24, 0x0062
 2be:	87 7f       	andi	r24, 0xF7	; 247
 2c0:	80 93 62 00 	sts	0x0062, r24
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0xC0;   // cursor go home on line 2
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd(); 
//	_delay_ms(1);    //not necessary with alarm_clock.c code
}                           
 2c4:	08 95       	ret

000002c6 <fill_spaces>:
 
void fill_spaces(void){
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	90 e0       	ldi	r25, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 2ca:	41 e0       	ldi	r20, 0x01	; 1
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		SPDR = 0x20; 
 2cc:	30 e2       	ldi	r19, 0x20	; 32
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 2ce:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2d0:	77 9b       	sbis	0x0e, 7	; 14
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <fill_spaces+0xa>
		SPDR = 0x20; 
 2d4:	3f b9       	out	0x0f, r19	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2d6:	77 9b       	sbis	0x0e, 7	; 14
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <fill_spaces+0x10>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 2da:	20 91 62 00 	lds	r18, 0x0062
 2de:	28 60       	ori	r18, 0x08	; 8
 2e0:	20 93 62 00 	sts	0x0062, r18
	PORTF &= ~0x08;
 2e4:	20 91 62 00 	lds	r18, 0x0062
 2e8:	27 7f       	andi	r18, 0xF7	; 247
 2ea:	20 93 62 00 	sts	0x0062, r18
 2ee:	ef e9       	ldi	r30, 0x9F	; 159
 2f0:	ff e0       	ldi	r31, 0x0F	; 15
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <fill_spaces+0x2c>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <fill_spaces+0x32>
 2f8:	00 00       	nop
 2fa:	01 97       	sbiw	r24, 0x01	; 1
//	_delay_ms(1);    //not necessary with alarm_clock.c code
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
 2fc:	41 f7       	brne	.-48     	; 0x2ce <fill_spaces+0x8>
		SPDR = 0x20; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_ms(1);
	}
}  
 2fe:	08 95       	ret

00000300 <char2lcd>:
   
void char2lcd(char a_char){
	//sends a char to the LCD
	//usage: char2lcd('H');  // send an H to the LCD
	SPDR = 0x01;   //set SR for data xfer with LSB=1
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 304:	77 9b       	sbis	0x0e, 7	; 14
 306:	fe cf       	rjmp	.-4      	; 0x304 <char2lcd+0x4>
	SPDR = a_char; //send the char to the SPI port
 308:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 30a:	77 9b       	sbis	0x0e, 7	; 14
 30c:	fe cf       	rjmp	.-4      	; 0x30a <char2lcd+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 30e:	80 91 62 00 	lds	r24, 0x0062
 312:	88 60       	ori	r24, 0x08	; 8
 314:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 318:	80 91 62 00 	lds	r24, 0x0062
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	80 93 62 00 	sts	0x0062, r24
 322:	8f e9       	ldi	r24, 0x9F	; 159
 324:	9f e0       	ldi	r25, 0x0F	; 15
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <char2lcd+0x26>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <char2lcd+0x2c>
 32c:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = a_char; //send the char to the SPI port
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();  //toggle the enable bit
	_delay_ms(1); //wait the prescribed time for the LCD to process
}
 32e:	08 95       	ret

00000330 <cursor_off>:
  
void cursor_off(void){
	//cuts cursor off 
	SPDR = 0x00;   //set SR for data xfer with LSB=1
 330:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 332:	77 9b       	sbis	0x0e, 7	; 14
 334:	fe cf       	rjmp	.-4      	; 0x332 <cursor_off+0x2>
	SPDR = 0x0C; //send the command to cut off cursor
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 33a:	77 9b       	sbis	0x0e, 7	; 14
 33c:	fe cf       	rjmp	.-4      	; 0x33a <cursor_off+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 33e:	80 91 62 00 	lds	r24, 0x0062
 342:	88 60       	ori	r24, 0x08	; 8
 344:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 348:	80 91 62 00 	lds	r24, 0x0062
 34c:	87 7f       	andi	r24, 0xF7	; 247
 34e:	80 93 62 00 	sts	0x0062, r24
 352:	8f e9       	ldi	r24, 0x9F	; 159
 354:	9f e0       	ldi	r25, 0x0F	; 15
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <cursor_off+0x26>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <cursor_off+0x2c>
 35c:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x0C; //send the command to cut off cursor
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();  //toggle the enable bit
	_delay_ms(1); //wait the prescribed time for the LCD to process
}
 35e:	08 95       	ret

00000360 <string2lcd>:
  
void string2lcd(char *lcd_str){

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
		SPDR = 0x01; //set SR for data
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	6f b9       	out	0x0f, r22	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 36c:	77 9b       	sbis	0x0e, 7	; 14
 36e:	fe cf       	rjmp	.-4      	; 0x36c <string2lcd+0xc>
		SPDR = lcd_str[count]; 
 370:	48 0f       	add	r20, r24
 372:	59 1f       	adc	r21, r25
 374:	fa 01       	movw	r30, r20
 376:	40 81       	ld	r20, Z
 378:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 37a:	77 9b       	sbis	0x0e, 7	; 14
 37c:	fe cf       	rjmp	.-4      	; 0x37a <string2lcd+0x1a>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 37e:	40 91 62 00 	lds	r20, 0x0062
 382:	48 60       	ori	r20, 0x08	; 8
 384:	40 93 62 00 	sts	0x0062, r20
	PORTF &= ~0x08;
 388:	40 91 62 00 	lds	r20, 0x0062
 38c:	47 7f       	andi	r20, 0xF7	; 247
 38e:	40 93 62 00 	sts	0x0062, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 392:	ef e8       	ldi	r30, 0x8F	; 143
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <string2lcd+0x36>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <string2lcd+0x3c>
 39c:	00 00       	nop
  
void string2lcd(char *lcd_str){

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 39e:	2f 5f       	subi	r18, 0xFF	; 255
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	a9 01       	movw	r20, r18
 3a4:	fc 01       	movw	r30, r24
 3a6:	01 90       	ld	r0, Z+
 3a8:	00 20       	and	r0, r0
 3aa:	e9 f7       	brne	.-6      	; 0x3a6 <string2lcd+0x46>
 3ac:	e8 1b       	sub	r30, r24
 3ae:	f9 0b       	sbc	r31, r25
 3b0:	32 97       	sbiw	r30, 0x02	; 2
 3b2:	e2 17       	cp	r30, r18
 3b4:	f3 07       	cpc	r31, r19
 3b6:	c8 f6       	brcc	.-78     	; 0x36a <string2lcd+0xa>
		SPDR = lcd_str[count]; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_us(100);
	}                  
} 
 3b8:	08 95       	ret

000003ba <lcd_init>:

void lcd_init(void){
	int i;
	DDRF |= 0x08;  //port F bit 3 is the enable strobe for the LCD
 3ba:	80 91 61 00 	lds	r24, 0x0061
 3be:	88 60       	ori	r24, 0x08	; 8
 3c0:	80 93 61 00 	sts	0x0061, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	8f e5       	ldi	r24, 0x5F	; 95
 3c6:	9a ee       	ldi	r25, 0xEA	; 234
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_init+0xe>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcd_init+0x14>
 3ce:	00 00       	nop
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	90 e0       	ldi	r25, 0x00	; 0
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
		SPDR = 0x00;
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		SPDR = 0x30;
 3d4:	30 e3       	ldi	r19, 0x30	; 48
	int i;
	DDRF |= 0x08;  //port F bit 3 is the enable strobe for the LCD
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
		SPDR = 0x00;
 3d6:	1f b8       	out	0x0f, r1	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3d8:	77 9b       	sbis	0x0e, 7	; 14
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <lcd_init+0x1e>
		SPDR = 0x30;
 3dc:	3f b9       	out	0x0f, r19	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3de:	77 9b       	sbis	0x0e, 7	; 14
 3e0:	fe cf       	rjmp	.-4      	; 0x3de <lcd_init+0x24>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3e2:	20 91 62 00 	lds	r18, 0x0062
 3e6:	28 60       	ori	r18, 0x08	; 8
 3e8:	20 93 62 00 	sts	0x0062, r18
	PORTF &= ~0x08;
 3ec:	20 91 62 00 	lds	r18, 0x0062
 3f0:	27 7f       	andi	r18, 0xF7	; 247
 3f2:	20 93 62 00 	sts	0x0062, r18
 3f6:	ef e5       	ldi	r30, 0x5F	; 95
 3f8:	fd e6       	ldi	r31, 0x6D	; 109
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_init+0x40>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <lcd_init+0x46>
 400:	00 00       	nop
 402:	01 97       	sbiw	r24, 0x01	; 1
void lcd_init(void){
	int i;
	DDRF |= 0x08;  //port F bit 3 is the enable strobe for the LCD
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 404:	41 f7       	brne	.-48     	; 0x3d6 <lcd_init+0x1c>
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_ms(7);
	}

	SPDR = 0x00;
 406:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 408:	77 9b       	sbis	0x0e, 7	; 14
 40a:	fe cf       	rjmp	.-4      	; 0x408 <lcd_init+0x4e>
	SPDR = 0x38;
 40c:	88 e3       	ldi	r24, 0x38	; 56
 40e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 410:	77 9b       	sbis	0x0e, 7	; 14
 412:	fe cf       	rjmp	.-4      	; 0x410 <lcd_init+0x56>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 414:	80 91 62 00 	lds	r24, 0x0062
 418:	88 60       	ori	r24, 0x08	; 8
 41a:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 41e:	80 91 62 00 	lds	r24, 0x0062
 422:	87 7f       	andi	r24, 0xF7	; 247
 424:	80 93 62 00 	sts	0x0062, r24
 428:	8f e1       	ldi	r24, 0x1F	; 31
 42a:	9e e4       	ldi	r25, 0x4E	; 78
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_init+0x72>
 430:	00 c0       	rjmp	.+0      	; 0x432 <lcd_init+0x78>
 432:	00 00       	nop
	SPDR = 0x38;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);   

	SPDR = 0x00;
 434:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 436:	77 9b       	sbis	0x0e, 7	; 14
 438:	fe cf       	rjmp	.-4      	; 0x436 <lcd_init+0x7c>
	SPDR = 0x08;
 43a:	88 e0       	ldi	r24, 0x08	; 8
 43c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 43e:	77 9b       	sbis	0x0e, 7	; 14
 440:	fe cf       	rjmp	.-4      	; 0x43e <lcd_init+0x84>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 442:	80 91 62 00 	lds	r24, 0x0062
 446:	88 60       	ori	r24, 0x08	; 8
 448:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 44c:	80 91 62 00 	lds	r24, 0x0062
 450:	87 7f       	andi	r24, 0xF7	; 247
 452:	80 93 62 00 	sts	0x0062, r24
 456:	ef e1       	ldi	r30, 0x1F	; 31
 458:	fe e4       	ldi	r31, 0x4E	; 78
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <lcd_init+0xa0>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <lcd_init+0xa6>
 460:	00 00       	nop
	SPDR = 0x08;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);

	SPDR = 0x00;
 462:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 464:	77 9b       	sbis	0x0e, 7	; 14
 466:	fe cf       	rjmp	.-4      	; 0x464 <lcd_init+0xaa>
	SPDR = 0x01;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 46c:	77 9b       	sbis	0x0e, 7	; 14
 46e:	fe cf       	rjmp	.-4      	; 0x46c <lcd_init+0xb2>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 470:	80 91 62 00 	lds	r24, 0x0062
 474:	88 60       	ori	r24, 0x08	; 8
 476:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 47a:	80 91 62 00 	lds	r24, 0x0062
 47e:	87 7f       	andi	r24, 0xF7	; 247
 480:	80 93 62 00 	sts	0x0062, r24
 484:	8f e1       	ldi	r24, 0x1F	; 31
 486:	9e e4       	ldi	r25, 0x4E	; 78
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <lcd_init+0xce>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <lcd_init+0xd4>
 48e:	00 00       	nop
	SPDR = 0x01;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);   

	SPDR = 0x00;
 490:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 492:	77 9b       	sbis	0x0e, 7	; 14
 494:	fe cf       	rjmp	.-4      	; 0x492 <lcd_init+0xd8>
	SPDR = 0x06;
 496:	86 e0       	ldi	r24, 0x06	; 6
 498:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 49a:	77 9b       	sbis	0x0e, 7	; 14
 49c:	fe cf       	rjmp	.-4      	; 0x49a <lcd_init+0xe0>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 49e:	80 91 62 00 	lds	r24, 0x0062
 4a2:	88 60       	ori	r24, 0x08	; 8
 4a4:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 4a8:	80 91 62 00 	lds	r24, 0x0062
 4ac:	87 7f       	andi	r24, 0xF7	; 247
 4ae:	80 93 62 00 	sts	0x0062, r24
 4b2:	ef e1       	ldi	r30, 0x1F	; 31
 4b4:	fe e4       	ldi	r31, 0x4E	; 78
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_init+0xfc>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <lcd_init+0x102>
 4bc:	00 00       	nop
	SPDR = 0x06;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);

	SPDR = 0x00;
 4be:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 4c0:	77 9b       	sbis	0x0e, 7	; 14
 4c2:	fe cf       	rjmp	.-4      	; 0x4c0 <lcd_init+0x106>
	SPDR = 0x0E;
 4c4:	8e e0       	ldi	r24, 0x0E	; 14
 4c6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 4c8:	77 9b       	sbis	0x0e, 7	; 14
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <lcd_init+0x10e>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 4cc:	80 91 62 00 	lds	r24, 0x0062
 4d0:	88 60       	ori	r24, 0x08	; 8
 4d2:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 4d6:	80 91 62 00 	lds	r24, 0x0062
 4da:	87 7f       	andi	r24, 0xF7	; 247
 4dc:	80 93 62 00 	sts	0x0062, r24
 4e0:	8f e1       	ldi	r24, 0x1F	; 31
 4e2:	9e e4       	ldi	r25, 0x4E	; 78
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <lcd_init+0x12a>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <lcd_init+0x130>
 4ea:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x0E;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);
} 
 4ec:	08 95       	ret

000004ee <lm73_temp_convert>:
volatile uint8_t lm73_rd_buf[2];

//********************************************************************************

//******************************************************************************
uint8_t lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c){
 4ee:	5f 92       	push	r5
 4f0:	6f 92       	push	r6
 4f2:	7f 92       	push	r7
 4f4:	8f 92       	push	r8
 4f6:	9f 92       	push	r9
 4f8:	af 92       	push	r10
 4fa:	bf 92       	push	r11
 4fc:	cf 92       	push	r12
 4fe:	df 92       	push	r13
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	3c 01       	movw	r6, r24
 50e:	d4 2e       	mov	r13, r20

	//incoming data from LM73 formatted as follows:
	//bit     15   14  13  12  11  10   9   8   7    6    5    4     3      2  1   0
	//Deg C  +/-  128  64  32  16   8   4   2   1   .5  .25 .125 .0625 .03125  X   X

    if(lm73_temp & 0x8000) {minus_temp = TRUE; }  //get info on sign bit
 510:	77 fd       	sbrc	r23, 7
 512:	b1 c0       	rjmp	.+354    	; 0x676 <lm73_temp_convert+0x188>
    else                   {minus_temp = FALSE;}
    lm73_temp = (lm73_temp << 1);               //shift off the sign bit
 514:	eb 01       	movw	r28, r22
 516:	cc 0f       	add	r28, r28
 518:	dd 1f       	adc	r29, r29
	//incoming data from LM73 formatted as follows:
	//bit     15   14  13  12  11  10   9   8   7    6    5    4     3      2  1   0
	//Deg C  +/-  128  64  32  16   8   4   2   1   .5  .25 .125 .0625 .03125  X   X

    if(lm73_temp & 0x8000) {minus_temp = TRUE; }  //get info on sign bit
    else                   {minus_temp = FALSE;}
 51a:	55 24       	eor	r5, r5
	//now, lm73_temp looks like:
	//bit     15   14  13  12  11  10   9   8    7    6    5     4      3  2  1  0
	//Deg C  128   64  32  16   8   4   2   1   .5  .25 .125 .0625 .03125  X  X  0
	//mask                                       0    0    0     0      1

    if(f_not_c == TRUE){lsb_value = 5625;} // (9/5) * 3125
 51c:	2d 2d       	mov	r18, r13
 51e:	21 30       	cpi	r18, 0x01	; 1
 520:	09 f4       	brne	.+2      	; 0x524 <lm73_temp_convert+0x36>
 522:	92 c0       	rjmp	.+292    	; 0x648 <lm73_temp_convert+0x15a>
    else                {lsb_value = 3125;} //.03125 deg Celcius
 524:	35 e3       	ldi	r19, 0x35	; 53
 526:	e3 2e       	mov	r14, r19
 528:	3c e0       	ldi	r19, 0x0C	; 12
 52a:	f3 2e       	mov	r15, r19
 52c:	01 2d       	mov	r16, r1
 52e:	11 2d       	mov	r17, r1
 530:	e0 e0       	ldi	r30, 0x00	; 0
 532:	f0 e0       	ldi	r31, 0x00	; 0
    
    //sum up the total temperature by adding multiples of the multiplied lsb 
    mask = 0x0008;           //start summing in bit position 3 (lsb)
    temp_fract = 0;          //initalize the sum
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	cb 01       	movw	r24, r22

    if(f_not_c == TRUE){lsb_value = 5625;} // (9/5) * 3125
    else                {lsb_value = 3125;} //.03125 deg Celcius
    
    //sum up the total temperature by adding multiples of the multiplied lsb 
    mask = 0x0008;           //start summing in bit position 3 (lsb)
 53a:	a8 e0       	ldi	r26, 0x08	; 8
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <lm73_temp_convert+0x56>
    temp_fract = 0;          //initalize the sum
    for(i=0; i<=12; i++){    //sum for each fractional bit set in temperature
		if(lm73_temp & mask){temp_fract += (lsb_value << i);}
		mask = (mask << 1);    //shift mask to next bit
 540:	aa 0f       	add	r26, r26
 542:	bb 1f       	adc	r27, r27
    
    //sum up the total temperature by adding multiples of the multiplied lsb 
    mask = 0x0008;           //start summing in bit position 3 (lsb)
    temp_fract = 0;          //initalize the sum
    for(i=0; i<=12; i++){    //sum for each fractional bit set in temperature
		if(lm73_temp & mask){temp_fract += (lsb_value << i);}
 544:	9d 01       	movw	r18, r26
 546:	2c 23       	and	r18, r28
 548:	3d 23       	and	r19, r29
 54a:	21 15       	cp	r18, r1
 54c:	31 05       	cpc	r19, r1
 54e:	71 f0       	breq	.+28     	; 0x56c <lm73_temp_convert+0x7e>
 550:	a8 01       	movw	r20, r16
 552:	97 01       	movw	r18, r14
 554:	0e 2e       	mov	r0, r30
 556:	04 c0       	rjmp	.+8      	; 0x560 <lm73_temp_convert+0x72>
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	44 1f       	adc	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	0a 94       	dec	r0
 562:	d2 f7       	brpl	.-12     	; 0x558 <lm73_temp_convert+0x6a>
 564:	62 0f       	add	r22, r18
 566:	73 1f       	adc	r23, r19
 568:	84 1f       	adc	r24, r20
 56a:	95 1f       	adc	r25, r21
 56c:	31 96       	adiw	r30, 0x01	; 1
    else                {lsb_value = 3125;} //.03125 deg Celcius
    
    //sum up the total temperature by adding multiples of the multiplied lsb 
    mask = 0x0008;           //start summing in bit position 3 (lsb)
    temp_fract = 0;          //initalize the sum
    for(i=0; i<=12; i++){    //sum for each fractional bit set in temperature
 56e:	ed 30       	cpi	r30, 0x0D	; 13
 570:	f1 05       	cpc	r31, r1
 572:	31 f7       	brne	.-52     	; 0x540 <lm73_temp_convert+0x52>
		if(lm73_temp & mask){temp_fract += (lsb_value << i);}
		mask = (mask << 1);    //shift mask to next bit
    }//for

    if((temp_fract % 1000) > 500) {round_up = TRUE;}  //round up .01deg?
    temp_fract = temp_fract/1000;    //gives two decimal places for temperature
 574:	28 ee       	ldi	r18, 0xE8	; 232
 576:	33 e0       	ldi	r19, 0x03	; 3
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	0e 94 a2 03 	call	0x744	; 0x744 <__udivmodsi4>
    if(round_up){temp_fract += 1;}   //add a 1/100 if round up was true
 580:	79 01       	movw	r14, r18
 582:	8a 01       	movw	r16, r20
 584:	08 94       	sec
 586:	e1 1c       	adc	r14, r1
 588:	f1 1c       	adc	r15, r1
 58a:	01 1d       	adc	r16, r1
 58c:	11 1d       	adc	r17, r1
    if(f_not_c == TRUE){
 58e:	8d 2d       	mov	r24, r13
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	09 f4       	brne	.+2      	; 0x596 <lm73_temp_convert+0xa8>
 594:	63 c0       	rjmp	.+198    	; 0x65c <lm73_temp_convert+0x16e>

    if(f_not_c == TRUE){lsb_value = 5625;} // (9/5) * 3125
    else                {lsb_value = 3125;} //.03125 deg Celcius
    
    //sum up the total temperature by adding multiples of the multiplied lsb 
    mask = 0x0008;           //start summing in bit position 3 (lsb)
 596:	cc 24       	eor	r12, r12
 598:	c3 94       	inc	r12
 59a:	c0 e0       	ldi	r28, 0x00	; 0
 59c:	d0 e0       	ldi	r29, 0x00	; 0
    }
    
    //extract each digit and put in the temperature buffer array
    for(i=0; i<=5; i++) {    //upto 5 numeric digits possible plus a decimal point
		if(i==2){continue;}    //skip when its the decimal points place [2]
		temp_digits[i] = temp_fract % 10;         //gets lowest digit
 59e:	9a e0       	ldi	r25, 0x0A	; 10
 5a0:	89 2e       	mov	r8, r25
 5a2:	91 2c       	mov	r9, r1
 5a4:	a1 2c       	mov	r10, r1
 5a6:	b1 2c       	mov	r11, r1
 5a8:	15 c0       	rjmp	.+42     	; 0x5d4 <lm73_temp_convert+0xe6>
		temp_fract = temp_fract - temp_digits[i]; //subsract away that digit
 5aa:	99 27       	eor	r25, r25
 5ac:	87 fd       	sbrc	r24, 7
 5ae:	90 95       	com	r25
 5b0:	a9 2f       	mov	r26, r25
 5b2:	b9 2f       	mov	r27, r25
 5b4:	a8 01       	movw	r20, r16
 5b6:	97 01       	movw	r18, r14
 5b8:	28 1b       	sub	r18, r24
 5ba:	39 0b       	sbc	r19, r25
 5bc:	4a 0b       	sbc	r20, r26
 5be:	5b 0b       	sbc	r21, r27
 5c0:	ca 01       	movw	r24, r20
 5c2:	b9 01       	movw	r22, r18
		temp_fract = temp_fract / 10;                //throw away lowest digit
 5c4:	a5 01       	movw	r20, r10
 5c6:	94 01       	movw	r18, r8
 5c8:	0e 94 a2 03 	call	0x744	; 0x744 <__udivmodsi4>
 5cc:	79 01       	movw	r14, r18
 5ce:	8a 01       	movw	r16, r20
 5d0:	21 96       	adiw	r28, 0x01	; 1
 5d2:	c3 94       	inc	r12
		//some other cases to take into account here  BUG
    }
    
    //extract each digit and put in the temperature buffer array
    for(i=0; i<=5; i++) {    //upto 5 numeric digits possible plus a decimal point
		if(i==2){continue;}    //skip when its the decimal points place [2]
 5d4:	c2 30       	cpi	r28, 0x02	; 2
 5d6:	e1 f3       	breq	.-8      	; 0x5d0 <lm73_temp_convert+0xe2>
		temp_digits[i] = temp_fract % 10;         //gets lowest digit
 5d8:	c8 01       	movw	r24, r16
 5da:	b7 01       	movw	r22, r14
 5dc:	a5 01       	movw	r20, r10
 5de:	94 01       	movw	r18, r8
 5e0:	0e 94 a2 03 	call	0x744	; 0x744 <__udivmodsi4>
 5e4:	86 2f       	mov	r24, r22
 5e6:	f3 01       	movw	r30, r6
 5e8:	ec 0f       	add	r30, r28
 5ea:	f1 1d       	adc	r31, r1
 5ec:	60 83       	st	Z, r22
		else                    {temp_fract = 3200 - temp_fract;} 
		//some other cases to take into account here  BUG
    }
    
    //extract each digit and put in the temperature buffer array
    for(i=0; i<=5; i++) {    //upto 5 numeric digits possible plus a decimal point
 5ee:	5c 2d       	mov	r21, r12
 5f0:	56 30       	cpi	r21, 0x06	; 6
 5f2:	d8 f2       	brcs	.-74     	; 0x5aa <lm73_temp_convert+0xbc>
		temp_fract = temp_fract - temp_digits[i]; //subsract away that digit
		temp_fract = temp_fract / 10;                //throw away lowest digit
    }
   
    //convert decimal digits to ascii values, [2] is a decimal point
    temp_digits[0] += 0x30; 
 5f4:	f3 01       	movw	r30, r6
 5f6:	80 81       	ld	r24, Z
 5f8:	80 5d       	subi	r24, 0xD0	; 208
 5fa:	80 83       	st	Z, r24
    temp_digits[1] += 0x30; 
 5fc:	81 81       	ldd	r24, Z+1	; 0x01
 5fe:	80 5d       	subi	r24, 0xD0	; 208
 600:	81 83       	std	Z+1, r24	; 0x01
    temp_digits[2] =  0x2E; 
 602:	8e e2       	ldi	r24, 0x2E	; 46
 604:	82 83       	std	Z+2, r24	; 0x02
    temp_digits[3] += 0x30; 
 606:	83 81       	ldd	r24, Z+3	; 0x03
 608:	80 5d       	subi	r24, 0xD0	; 208
 60a:	83 83       	std	Z+3, r24	; 0x03
    temp_digits[4] += 0x30; 
 60c:	84 81       	ldd	r24, Z+4	; 0x04
 60e:	80 5d       	subi	r24, 0xD0	; 208
 610:	84 83       	std	Z+4, r24	; 0x04
    temp_digits[5] += 0x30; 
 612:	85 81       	ldd	r24, Z+5	; 0x05
 614:	80 5d       	subi	r24, 0xD0	; 208
 616:	85 83       	std	Z+5, r24	; 0x05

    if(temp_digits[5] == 0x30){temp_digits[5] = 0x20;} //remove leading zero
 618:	80 33       	cpi	r24, 0x30	; 48
 61a:	e9 f0       	breq	.+58     	; 0x656 <lm73_temp_convert+0x168>
    //could have two leading zero digits!  BUG
    if(minus_temp){temp_digits[5] = 0x2D;}                  //minus sign, cold!
 61c:	55 20       	and	r5, r5
 61e:	19 f0       	breq	.+6      	; 0x626 <lm73_temp_convert+0x138>
 620:	8d e2       	ldi	r24, 0x2D	; 45
 622:	f3 01       	movw	r30, r6
 624:	85 83       	std	Z+5, r24	; 0x05
    //could have two leading zero digits!
 
	return(0);
}//lm73_temp_convert
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	df 90       	pop	r13
 636:	cf 90       	pop	r12
 638:	bf 90       	pop	r11
 63a:	af 90       	pop	r10
 63c:	9f 90       	pop	r9
 63e:	8f 90       	pop	r8
 640:	7f 90       	pop	r7
 642:	6f 90       	pop	r6
 644:	5f 90       	pop	r5
 646:	08 95       	ret
	//now, lm73_temp looks like:
	//bit     15   14  13  12  11  10   9   8    7    6    5     4      3  2  1  0
	//Deg C  128   64  32  16   8   4   2   1   .5  .25 .125 .0625 .03125  X  X  0
	//mask                                       0    0    0     0      1

    if(f_not_c == TRUE){lsb_value = 5625;} // (9/5) * 3125
 648:	49 ef       	ldi	r20, 0xF9	; 249
 64a:	e4 2e       	mov	r14, r20
 64c:	45 e1       	ldi	r20, 0x15	; 21
 64e:	f4 2e       	mov	r15, r20
 650:	01 2d       	mov	r16, r1
 652:	11 2d       	mov	r17, r1
 654:	6d cf       	rjmp	.-294    	; 0x530 <lm73_temp_convert+0x42>
    temp_digits[2] =  0x2E; 
    temp_digits[3] += 0x30; 
    temp_digits[4] += 0x30; 
    temp_digits[5] += 0x30; 

    if(temp_digits[5] == 0x30){temp_digits[5] = 0x20;} //remove leading zero
 656:	80 e2       	ldi	r24, 0x20	; 32
 658:	85 83       	std	Z+5, r24	; 0x05
 65a:	e0 cf       	rjmp	.-64     	; 0x61c <lm73_temp_convert+0x12e>

    if((temp_fract % 1000) > 500) {round_up = TRUE;}  //round up .01deg?
    temp_fract = temp_fract/1000;    //gives two decimal places for temperature
    if(round_up){temp_fract += 1;}   //add a 1/100 if round up was true
    if(f_not_c == TRUE){
		if (minus_temp == FALSE){temp_fract += 3200;}  //32 degree offset for Deg F
 65c:	55 20       	and	r5, r5
 65e:	a1 f4       	brne	.+40     	; 0x688 <lm73_temp_convert+0x19a>
 660:	61 e8       	ldi	r22, 0x81	; 129
 662:	e6 2e       	mov	r14, r22
 664:	6c e0       	ldi	r22, 0x0C	; 12
 666:	f6 2e       	mov	r15, r22
 668:	01 2d       	mov	r16, r1
 66a:	11 2d       	mov	r17, r1
 66c:	e2 0e       	add	r14, r18
 66e:	f3 1e       	adc	r15, r19
 670:	04 1f       	adc	r16, r20
 672:	15 1f       	adc	r17, r21
 674:	90 cf       	rjmp	.-224    	; 0x596 <lm73_temp_convert+0xa8>
	//bit     15   14  13  12  11  10   9   8   7    6    5    4     3      2  1   0
	//Deg C  +/-  128  64  32  16   8   4   2   1   .5  .25 .125 .0625 .03125  X   X

    if(lm73_temp & 0x8000) {minus_temp = TRUE; }  //get info on sign bit
    else                   {minus_temp = FALSE;}
    lm73_temp = (lm73_temp << 1);               //shift off the sign bit
 676:	eb 01       	movw	r28, r22
 678:	cc 0f       	add	r28, r28
 67a:	dd 1f       	adc	r29, r29

    if(minus_temp == TRUE){ //take 2's compliment, always deal with positive temps
		lm73_temp ^= 0xFFFF;   //invert all bits 
 67c:	c0 95       	com	r28
 67e:	d0 95       	com	r29
		lm73_temp += 0x08;     //add in one lsb
 680:	28 96       	adiw	r28, 0x08	; 8

	//incoming data from LM73 formatted as follows:
	//bit     15   14  13  12  11  10   9   8   7    6    5    4     3      2  1   0
	//Deg C  +/-  128  64  32  16   8   4   2   1   .5  .25 .125 .0625 .03125  X   X

    if(lm73_temp & 0x8000) {minus_temp = TRUE; }  //get info on sign bit
 682:	55 24       	eor	r5, r5
 684:	53 94       	inc	r5
 686:	4a cf       	rjmp	.-364    	; 0x51c <lm73_temp_convert+0x2e>
    if((temp_fract % 1000) > 500) {round_up = TRUE;}  //round up .01deg?
    temp_fract = temp_fract/1000;    //gives two decimal places for temperature
    if(round_up){temp_fract += 1;}   //add a 1/100 if round up was true
    if(f_not_c == TRUE){
		if (minus_temp == FALSE){temp_fract += 3200;}  //32 degree offset for Deg F
		else                    {temp_fract = 3200 - temp_fract;} 
 688:	80 e8       	ldi	r24, 0x80	; 128
 68a:	9c e0       	ldi	r25, 0x0C	; 12
 68c:	a0 e0       	ldi	r26, 0x00	; 0
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	9c 01       	movw	r18, r24
 692:	ad 01       	movw	r20, r26
 694:	2e 19       	sub	r18, r14
 696:	3f 09       	sbc	r19, r15
 698:	40 0b       	sbc	r20, r16
 69a:	51 0b       	sbc	r21, r17
 69c:	79 01       	movw	r14, r18
 69e:	8a 01       	movw	r16, r20
 6a0:	7a cf       	rjmp	.-268    	; 0x596 <lm73_temp_convert+0xa8>

000006a2 <spi_init>:
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
	DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 6a2:	87 b3       	in	r24, 0x17	; 23
 6a4:	87 60       	ori	r24, 0x07	; 7
 6a6:	87 bb       	out	0x17, r24	; 23
	//mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
	//no interrupts, enable SPI, clk low initially, rising edge sample
	SPCR=(1<<SPE) | (1<<MSTR); 
 6a8:	80 e5       	ldi	r24, 0x50	; 80
 6aa:	8d b9       	out	0x0d, r24	; 13
	SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	8e b9       	out	0x0e, r24	; 14
}//spi_init
 6b0:	08 95       	ret

000006b2 <main>:

/***********************************************************************/
/*                                main                                 */
/***********************************************************************/
int main ()
{ 
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
	DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 6ba:	87 b3       	in	r24, 0x17	; 23
 6bc:	87 60       	ori	r24, 0x07	; 7
 6be:	87 bb       	out	0x17, r24	; 23
	//mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
	//no interrupts, enable SPI, clk low initially, rising edge sample
	SPCR=(1<<SPE) | (1<<MSTR); 
 6c0:	80 e5       	ldi	r24, 0x50	; 80
 6c2:	8d b9       	out	0x0d, r24	; 13
	SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	8e b9       	out	0x0e, r24	; 14
/***********************************************************************/
int main ()
{ 
	uint16_t lm73_temp;  //a place to assemble the temperature from the lm73
	spi_init(); //initalize SPI 
	lcd_init(); //initalize LCD (lcd_functions.h)
 6c8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_init>
	init_twi(); //initalize TWI (twi_master.h)  
 6cc:	0e 94 15 01 	call	0x22a	; 0x22a <init_twi>

	//set LM73 mode for reading temperature by loading pointer register
	lm73_wr_buf[0] = LM73_PTR_TEMP; //load lm73_wr_buf[0] with temperature pointer address
 6d0:	10 92 16 01 	sts	0x0116, r1
	twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1); //start the TWI write process
 6d4:	80 e9       	ldi	r24, 0x90	; 144
 6d6:	66 e1       	ldi	r22, 0x16	; 22
 6d8:	71 e0       	ldi	r23, 0x01	; 1
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <twi_start_wr>
 6e0:	8f e3       	ldi	r24, 0x3F	; 63
 6e2:	9f e1       	ldi	r25, 0x1F	; 31
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <main+0x32>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <main+0x38>
 6ea:	00 00       	nop
	_delay_ms(2);    //wait for the xfer to finish

	clear_display(); //clean up the display
 6ec:	0e 94 27 01 	call	0x24e	; 0x24e <clear_display>
	sei();           //enable interrupts before entering loop
 6f0:	78 94       	sei
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	91 ee       	ldi	r25, 0xE1	; 225
 6f6:	a4 e0       	ldi	r26, 0x04	; 4
 6f8:	81 50       	subi	r24, 0x01	; 1
 6fa:	90 40       	sbci	r25, 0x00	; 0
 6fc:	a0 40       	sbci	r26, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0x46>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0x50>
 702:	00 00       	nop

	while(1){          //main while loop
		_delay_ms(100);  //tenth second wait
		clear_display();                  //wipe the display
 704:	0e 94 27 01 	call	0x24e	; 0x24e <clear_display>

		twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes) 
 708:	80 e9       	ldi	r24, 0x90	; 144
 70a:	68 e1       	ldi	r22, 0x18	; 24
 70c:	71 e0       	ldi	r23, 0x01	; 1
 70e:	42 e0       	ldi	r20, 0x02	; 2
 710:	0e 94 04 01 	call	0x208	; 0x208 <twi_start_rd>
 714:	af e3       	ldi	r26, 0x3F	; 63
 716:	bf e1       	ldi	r27, 0x1F	; 31
 718:	11 97       	sbiw	r26, 0x01	; 1
 71a:	f1 f7       	brne	.-4      	; 0x718 <main+0x66>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <main+0x6c>
 71e:	00 00       	nop

		_delay_ms(2);    //wait for it to finish

		lm73_temp = (lm73_rd_buf[0] << 8);//save high temperature byte into lm73_temp
 720:	a0 e0       	ldi	r26, 0x00	; 0
 722:	ed 01       	movw	r28, r26
		lm73_temp |= (lm73_rd_buf[1]); //shift it into upper byte 
 724:	80 91 19 01 	lds	r24, 0x0119
 728:	90 e0       	ldi	r25, 0x00	; 0

		itoa(lm73_temp, lcd_string_array, 2); //convert to string in array with itoa() from avr-libc                           
 72a:	8c 2b       	or	r24, r28
 72c:	9d 2b       	or	r25, r29
 72e:	6a e1       	ldi	r22, 0x1A	; 26
 730:	71 e0       	ldi	r23, 0x01	; 1
 732:	42 e0       	ldi	r20, 0x02	; 2
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	0e 94 c4 03 	call	0x788	; 0x788 <itoa>
		string2lcd(lcd_string_array);
 73a:	8a e1       	ldi	r24, 0x1A	; 26
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 b0 01 	call	0x360	; 0x360 <string2lcd>
 742:	d7 cf       	rjmp	.-82     	; 0x6f2 <main+0x40>

00000744 <__udivmodsi4>:
 744:	a1 e2       	ldi	r26, 0x21	; 33
 746:	1a 2e       	mov	r1, r26
 748:	aa 1b       	sub	r26, r26
 74a:	bb 1b       	sub	r27, r27
 74c:	fd 01       	movw	r30, r26
 74e:	0d c0       	rjmp	.+26     	; 0x76a <__udivmodsi4_ep>

00000750 <__udivmodsi4_loop>:
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	ee 1f       	adc	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	a2 17       	cp	r26, r18
 75a:	b3 07       	cpc	r27, r19
 75c:	e4 07       	cpc	r30, r20
 75e:	f5 07       	cpc	r31, r21
 760:	20 f0       	brcs	.+8      	; 0x76a <__udivmodsi4_ep>
 762:	a2 1b       	sub	r26, r18
 764:	b3 0b       	sbc	r27, r19
 766:	e4 0b       	sbc	r30, r20
 768:	f5 0b       	sbc	r31, r21

0000076a <__udivmodsi4_ep>:
 76a:	66 1f       	adc	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a 94       	dec	r1
 774:	69 f7       	brne	.-38     	; 0x750 <__udivmodsi4_loop>
 776:	60 95       	com	r22
 778:	70 95       	com	r23
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	9b 01       	movw	r18, r22
 780:	ac 01       	movw	r20, r24
 782:	bd 01       	movw	r22, r26
 784:	cf 01       	movw	r24, r30
 786:	08 95       	ret

00000788 <itoa>:
 788:	fb 01       	movw	r30, r22
 78a:	9f 01       	movw	r18, r30
 78c:	e8 94       	clt
 78e:	42 30       	cpi	r20, 0x02	; 2
 790:	c4 f0       	brlt	.+48     	; 0x7c2 <itoa+0x3a>
 792:	45 32       	cpi	r20, 0x25	; 37
 794:	b4 f4       	brge	.+44     	; 0x7c2 <itoa+0x3a>
 796:	4a 30       	cpi	r20, 0x0A	; 10
 798:	29 f4       	brne	.+10     	; 0x7a4 <itoa+0x1c>
 79a:	97 fb       	bst	r25, 7
 79c:	1e f4       	brtc	.+6      	; 0x7a4 <itoa+0x1c>
 79e:	90 95       	com	r25
 7a0:	81 95       	neg	r24
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	64 2f       	mov	r22, r20
 7a6:	77 27       	eor	r23, r23
 7a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodhi4>
 7ac:	80 5d       	subi	r24, 0xD0	; 208
 7ae:	8a 33       	cpi	r24, 0x3A	; 58
 7b0:	0c f0       	brlt	.+2      	; 0x7b4 <itoa+0x2c>
 7b2:	89 5d       	subi	r24, 0xD9	; 217
 7b4:	81 93       	st	Z+, r24
 7b6:	cb 01       	movw	r24, r22
 7b8:	00 97       	sbiw	r24, 0x00	; 0
 7ba:	a1 f7       	brne	.-24     	; 0x7a4 <itoa+0x1c>
 7bc:	16 f4       	brtc	.+4      	; 0x7c2 <itoa+0x3a>
 7be:	5d e2       	ldi	r21, 0x2D	; 45
 7c0:	51 93       	st	Z+, r21
 7c2:	10 82       	st	Z, r1
 7c4:	c9 01       	movw	r24, r18
 7c6:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <strrev>

000007ca <strrev>:
 7ca:	dc 01       	movw	r26, r24
 7cc:	fc 01       	movw	r30, r24
 7ce:	67 2f       	mov	r22, r23
 7d0:	71 91       	ld	r23, Z+
 7d2:	77 23       	and	r23, r23
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <strrev+0x4>
 7d6:	32 97       	sbiw	r30, 0x02	; 2
 7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <strrev+0x18>
 7da:	7c 91       	ld	r23, X
 7dc:	6d 93       	st	X+, r22
 7de:	70 83       	st	Z, r23
 7e0:	62 91       	ld	r22, -Z
 7e2:	ae 17       	cp	r26, r30
 7e4:	bf 07       	cpc	r27, r31
 7e6:	c8 f3       	brcs	.-14     	; 0x7da <strrev+0x10>
 7e8:	08 95       	ret

000007ea <__udivmodhi4>:
 7ea:	aa 1b       	sub	r26, r26
 7ec:	bb 1b       	sub	r27, r27
 7ee:	51 e1       	ldi	r21, 0x11	; 17
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <__udivmodhi4_ep>

000007f2 <__udivmodhi4_loop>:
 7f2:	aa 1f       	adc	r26, r26
 7f4:	bb 1f       	adc	r27, r27
 7f6:	a6 17       	cp	r26, r22
 7f8:	b7 07       	cpc	r27, r23
 7fa:	10 f0       	brcs	.+4      	; 0x800 <__udivmodhi4_ep>
 7fc:	a6 1b       	sub	r26, r22
 7fe:	b7 0b       	sbc	r27, r23

00000800 <__udivmodhi4_ep>:
 800:	88 1f       	adc	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	5a 95       	dec	r21
 806:	a9 f7       	brne	.-22     	; 0x7f2 <__udivmodhi4_loop>
 808:	80 95       	com	r24
 80a:	90 95       	com	r25
 80c:	bc 01       	movw	r22, r24
 80e:	cd 01       	movw	r24, r26
 810:	08 95       	ret

00000812 <_exit>:
 812:	f8 94       	cli

00000814 <__stop_program>:
 814:	ff cf       	rjmp	.-2      	; 0x814 <__stop_program>
