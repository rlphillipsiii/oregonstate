
graph_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000ee8  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008c2  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <graph_driver.h>

int main()
{     
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
	uint8_t i; //dummy counter

	enable_graph();  //initalize SPI port
  c4:	0e 94 ab 00 	call	0x156	; 0x156 <enable_graph>

	while (1) {
		for (i = 0; i < NUM_COUNT; i++) {
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	19 30       	cpi	r17, 0x09	; 9
  cc:	e0 f0       	brcs	.+56     	; 0x106 <main+0x48>
  ce:	c8 e0       	ldi	r28, 0x08	; 8
  d0:	d1 e0       	ldi	r29, 0x01	; 1
			_delay_ms(250);
			_delay_ms(250);
		}

		for (i = NUM_COUNT-2; i > 0; i--) {
			update_graph(GRAPH_NUMS[i]);
  d2:	8a 91       	ld	r24, -Y
  d4:	0e 94 b0 00 	call	0x160	; 0x160 <update_graph>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	94 e3       	ldi	r25, 0x34	; 52
  dc:	ac e0       	ldi	r26, 0x0C	; 12
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	a0 40       	sbci	r26, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x20>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x2a>
  e8:	00 00       	nop
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	94 e3       	ldi	r25, 0x34	; 52
  ee:	ac e0       	ldi	r26, 0x0C	; 12
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	a0 40       	sbci	r26, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x32>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x3c>
  fa:	00 00       	nop

			_delay_ms(250);
			_delay_ms(250);
		}

		for (i = NUM_COUNT-2; i > 0; i--) {
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	c1 30       	cpi	r28, 0x01	; 1
 100:	d9 07       	cpc	r29, r25
 102:	39 f7       	brne	.-50     	; 0xd2 <main+0x14>
	uint8_t i; //dummy counter

	enable_graph();  //initalize SPI port

	while (1) {
		for (i = 0; i < NUM_COUNT; i++) {
 104:	10 e0       	ldi	r17, 0x00	; 0
			update_graph(GRAPH_NUMS[i]);
 106:	e1 2f       	mov	r30, r17
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	e0 50       	subi	r30, 0x00	; 0
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	80 81       	ld	r24, Z
 110:	0e 94 b0 00 	call	0x160	; 0x160 <update_graph>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	94 e3       	ldi	r25, 0x34	; 52
 118:	ac e0       	ldi	r26, 0x0C	; 12
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	a0 40       	sbci	r26, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x5c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x66>
 124:	00 00       	nop
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	94 e3       	ldi	r25, 0x34	; 52
 12a:	ac e0       	ldi	r26, 0x0C	; 12
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	a0 40       	sbci	r26, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x6e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x78>
 136:	00 00       	nop
	uint8_t i; //dummy counter

	enable_graph();  //initalize SPI port

	while (1) {
		for (i = 0; i < NUM_COUNT; i++) {
 138:	1f 5f       	subi	r17, 0xFF	; 255
 13a:	c7 cf       	rjmp	.-114    	; 0xca <main+0xc>

0000013c <spi_init>:
#include <avr/io.h>
#include "macros.h"

void spi_init()
{
	DDRB |= 0x07;  //set output mode for SS, MOSI, SCLK
 13c:	87 b3       	in	r24, 0x17	; 23
 13e:	87 60       	ori	r24, 0x07	; 7
 140:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR); //set master mode, clk low on idle, leading edge sample
 142:	80 e5       	ldi	r24, 0x50	; 80
 144:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);  //set choos
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	8e b9       	out	0x0e, r24	; 14
}
 14a:	08 95       	ret

0000014c <spi_send>:

char spi_send(char msg)
{
	SPDR = msg;
 14c:	8f b9       	out	0x0f, r24	; 15

	while (!ISSET(SPSR, SPIF));
 14e:	77 9b       	sbis	0x0e, 7	; 14
 150:	fe cf       	rjmp	.-4      	; 0x14e <spi_send+0x2>
	
	return SPDR;
 152:	8f b1       	in	r24, 0x0f	; 15
}
 154:	08 95       	ret

00000156 <enable_graph>:
#include "spi_driver.h"
#include "macros.h"

void enable_graph()
{
	DDRD |= 0x01;
 156:	88 9a       	sbi	0x11, 0	; 17
	
	CLRBIT(PORTD, PD0);
 158:	90 98       	cbi	0x12, 0	; 18
	spi_init();
 15a:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_init>
}
 15e:	08 95       	ret

00000160 <update_graph>:

char update_graph(char value)
{
	char result = spi_send(value);
 160:	0e 94 a6 00 	call	0x14c	; 0x14c <spi_send>
	strobel(PORTD, PD0);
 164:	90 9a       	sbi	0x12, 0	; 18
 166:	90 98       	cbi	0x12, 0	; 18

	return result;
}
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
