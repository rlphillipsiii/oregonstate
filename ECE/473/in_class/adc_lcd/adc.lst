
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000510  000005a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800112  00800112  000005b6  2**0
                  ALLOC
  3 .stab         000018d8  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b5b  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 34       	cpi	r26, 0x4B	; 75
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  c6:	0c 94 86 02 	jmp	0x50c	; 0x50c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
div_t fp_adc_result, fp_low_result; //double fp_adc_result; 

/*******************************************************/
void spi_init(void){
	/* Run this code before attempting to write to the LCD.*/
	DDRF  |= 0x08;  //port F bit 3 is enable for LCD
  ce:	e1 e6       	ldi	r30, 0x61	; 97
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	PORTF &= 0xF7;  //port F bit 3 is initially low
  d8:	e2 e6       	ldi	r30, 0x62	; 98
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	80 83       	st	Z, r24
	DDRB  |= 0x07;  //Turn on SS, MOSI, SCLK
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x01;  //port B initalization for SPI, SS_n off
  e8:	c0 9a       	sbi	0x18, 0	; 24
	//Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first
	SPCR=0x50;
  ea:	80 e5       	ldi	r24, 0x50	; 80
  ec:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x00;
  ee:	1e b8       	out	0x0e, r1	; 14
}
  f0:	08 95       	ret

000000f2 <main>:
/*******************************************************/

int main() {
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
	uint16_t adc_result;  //holds the result from the ADC

	//initalize the SPI port and then the LCD
	spi_init();
  f6:	0e 94 67 00 	call	0xce	; 0xce <spi_init>
	lcd_init(); 
  fa:	0e 94 99 01 	call	0x332	; 0x332 <lcd_init>
	clear_display();
  fe:	0e 94 ef 00 	call	0x1de	; 0x1de <clear_display>

	//Initalize ADC and its ports
	DDRF  = 0x7F; //port F bit 7 is ADC input  
 102:	8f e7       	ldi	r24, 0x7F	; 127
 104:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0x00; //poft F bit 7 pullups are off
 108:	10 92 62 00 	sts	0x0062, r1

	ADMUX  = (1 << REFS0) | (7 & ADC_MUX_MASK);    //single-ended port F bit 7, right adjusted for 10 bits
 10c:	87 e4       	ldi	r24, 0x47	; 71
 10e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);    //ADC enabled, don't start yet, single shot mode 
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	86 b9       	out	0x06, r24	; 6
		//remainder in a structure called div_t that contains two members, quot and rem. 
  
		//now determine Vin, where Vin = (adc_result/204.8)
		fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
		itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
		fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 114:	c4 e6       	ldi	r28, 0x64	; 100
 116:	d0 e0       	ldi	r29, 0x00	; 0
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);    //ADC enabled, don't start yet, single shot mode 
                  //division factor is 128 (125khz)

	while(1){ 

		ADCSRA |= (1 << ADSC);
 118:	36 9a       	sbi	0x06, 6	; 6
		while(bit_is_clear(ADCSRA, ADSC));  //spin while interrupt flag not set
 11a:	36 9b       	sbis	0x06, 6	; 6
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x28>
		ADCSRA |= (1 << ADIF);              //its done, clear flag by writing a one 
 11e:	34 9a       	sbi	0x06, 4	; 6
		adc_result = ADC;                   //read the ADC output as 16 bits
 120:	84 b1       	in	r24, 0x04	; 4
 122:	95 b1       	in	r25, 0x05	; 5

		//div() function computes the value num/denom and returns the quotient and
		//remainder in a structure called div_t that contains two members, quot and rem. 
  
		//now determine Vin, where Vin = (adc_result/204.8)
		fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
 124:	6d ec       	ldi	r22, 0xCD	; 205
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 2e 02 	call	0x45c	; 0x45c <__divmodhi4>
 12c:	60 93 37 01 	sts	0x0137, r22
 130:	70 93 38 01 	sts	0x0138, r23
 134:	80 93 39 01 	sts	0x0139, r24
 138:	90 93 3a 01 	sts	0x013A, r25
		itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
 13c:	80 91 37 01 	lds	r24, 0x0137
 140:	90 91 38 01 	lds	r25, 0x0138
 144:	67 e2       	ldi	r22, 0x27	; 39
 146:	71 e0       	ldi	r23, 0x01	; 1
 148:	4a e0       	ldi	r20, 0x0A	; 10
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	0e 94 55 02 	call	0x4aa	; 0x4aa <itoa>
		fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 150:	80 91 39 01 	lds	r24, 0x0139
 154:	90 91 3a 01 	lds	r25, 0x013A
 158:	9c 01       	movw	r18, r24
 15a:	2c 9f       	mul	r18, r28
 15c:	c0 01       	movw	r24, r0
 15e:	2d 9f       	mul	r18, r29
 160:	90 0d       	add	r25, r0
 162:	3c 9f       	mul	r19, r28
 164:	90 0d       	add	r25, r0
 166:	11 24       	eor	r1, r1
 168:	6d ec       	ldi	r22, 0xCD	; 205
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	0e 94 2e 02 	call	0x45c	; 0x45c <__divmodhi4>
 170:	60 93 23 01 	sts	0x0123, r22
 174:	70 93 24 01 	sts	0x0124, r23
 178:	80 93 25 01 	sts	0x0125, r24
 17c:	90 93 26 01 	sts	0x0126, r25
		itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string
 180:	80 91 23 01 	lds	r24, 0x0123
 184:	90 91 24 01 	lds	r25, 0x0124
 188:	62 e1       	ldi	r22, 0x12	; 18
 18a:	71 e0       	ldi	r23, 0x01	; 1
 18c:	4a e0       	ldi	r20, 0x0A	; 10
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	0e 94 55 02 	call	0x4aa	; 0x4aa <itoa>

		//send string to LCD
		string2lcd(lcd_str_h);  //write upper half
 194:	87 e2       	ldi	r24, 0x27	; 39
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <string2lcd>
		char2lcd('.');          //write decimal point
 19c:	8e e2       	ldi	r24, 0x2E	; 46
 19e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <char2lcd>
		string2lcd(lcd_str_l);  //write lower half
 1a2:	82 e1       	ldi	r24, 0x12	; 18
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <string2lcd>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	ef e3       	ldi	r30, 0x3F	; 63
 1ae:	fc e9       	ldi	r31, 0x9C	; 156
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xbe>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xc4>
 1b6:	00 00       	nop

		for(i=0;i<=10;i++){ _delay_ms(10);}  //delay 0.1 sec
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 22 01 	sts	0x0122, r24
 1be:	8b 30       	cpi	r24, 0x0B	; 11
 1c0:	a8 f3       	brcs	.-22     	; 0x1ac <main+0xba>
		clear_display();
 1c2:	0e 94 ef 00 	call	0x1de	; 0x1de <clear_display>
		cursor_home();
 1c6:	0e 94 07 01 	call	0x20e	; 0x20e <cursor_home>
	} //while
 1ca:	a6 cf       	rjmp	.-180    	; 0x118 <main+0x26>

000001cc <strobe_lcd>:
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 1cc:	e2 e6       	ldi	r30, 0x62	; 98
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	80 83       	st	Z, r24
	PORTF &= ~0x08;
 1d6:	80 81       	ld	r24, Z
 1d8:	87 7f       	andi	r24, 0xF7	; 247
 1da:	80 83       	st	Z, r24
}          
 1dc:	08 95       	ret

000001de <clear_display>:
 
void clear_display(void){
	SPDR = 0x00;    //command, not data
 1de:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 1e0:	77 9b       	sbis	0x0e, 7	; 14
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <clear_display+0x2>
	SPDR = 0x01;    //clear display command
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 1e8:	77 9b       	sbis	0x0e, 7	; 14
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <clear_display+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 1ec:	80 91 62 00 	lds	r24, 0x0062
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 1f6:	80 91 62 00 	lds	r24, 0x0062
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	80 93 62 00 	sts	0x0062, r24
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	9f e1       	ldi	r25, 0x1F	; 31
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <clear_display+0x26>
 208:	00 c0       	rjmp	.+0      	; 0x20a <clear_display+0x2c>
 20a:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x01;    //clear display command
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();   //strobe the LCD enable pin
	_delay_ms(2);   //obligatory waiting for slow LCD
}         
 20c:	08 95       	ret

0000020e <cursor_home>:

void cursor_home(void){
	SPDR = 0x00;    //command, not data
 20e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 210:	77 9b       	sbis	0x0e, 7	; 14
 212:	fe cf       	rjmp	.-4      	; 0x210 <cursor_home+0x2>
	SPDR = 0x02;   // cursor go home position
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 218:	77 9b       	sbis	0x0e, 7	; 14
 21a:	fe cf       	rjmp	.-4      	; 0x218 <cursor_home+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 21c:	80 91 62 00 	lds	r24, 0x0062
 220:	88 60       	ori	r24, 0x08	; 8
 222:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 226:	80 91 62 00 	lds	r24, 0x0062
 22a:	87 7f       	andi	r24, 0xF7	; 247
 22c:	80 93 62 00 	sts	0x0062, r24
 230:	8f e9       	ldi	r24, 0x9F	; 159
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <cursor_home+0x26>
 238:	00 c0       	rjmp	.+0      	; 0x23a <cursor_home+0x2c>
 23a:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x02;   // cursor go home position
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(1);
}         
 23c:	08 95       	ret

0000023e <home_line2>:
  
void home_line2(void){
	SPDR = 0x00;    //command, not data
 23e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 240:	77 9b       	sbis	0x0e, 7	; 14
 242:	fe cf       	rjmp	.-4      	; 0x240 <home_line2+0x2>
	SPDR = 0xC0;   // cursor go home on line 2
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 248:	77 9b       	sbis	0x0e, 7	; 14
 24a:	fe cf       	rjmp	.-4      	; 0x248 <home_line2+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 24c:	80 91 62 00 	lds	r24, 0x0062
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 256:	80 91 62 00 	lds	r24, 0x0062
 25a:	87 7f       	andi	r24, 0xF7	; 247
 25c:	80 93 62 00 	sts	0x0062, r24
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	9f e0       	ldi	r25, 0x0F	; 15
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <home_line2+0x26>
 268:	00 c0       	rjmp	.+0      	; 0x26a <home_line2+0x2c>
 26a:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0xC0;   // cursor go home on line 2
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd(); 
	_delay_ms(1);  
}                           
 26c:	08 95       	ret

0000026e <fill_spaces>:
 
void fill_spaces(void){
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	90 e0       	ldi	r25, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 272:	41 e0       	ldi	r20, 0x01	; 1
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		SPDR = 0x20; 
 274:	30 e2       	ldi	r19, 0x20	; 32
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 276:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 278:	77 9b       	sbis	0x0e, 7	; 14
 27a:	fe cf       	rjmp	.-4      	; 0x278 <fill_spaces+0xa>
		SPDR = 0x20; 
 27c:	3f b9       	out	0x0f, r19	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 27e:	77 9b       	sbis	0x0e, 7	; 14
 280:	fe cf       	rjmp	.-4      	; 0x27e <fill_spaces+0x10>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 282:	20 91 62 00 	lds	r18, 0x0062
 286:	28 60       	ori	r18, 0x08	; 8
 288:	20 93 62 00 	sts	0x0062, r18
	PORTF &= ~0x08;
 28c:	20 91 62 00 	lds	r18, 0x0062
 290:	27 7f       	andi	r18, 0xF7	; 247
 292:	20 93 62 00 	sts	0x0062, r18
 296:	ef e9       	ldi	r30, 0x9F	; 159
 298:	ff e0       	ldi	r31, 0x0F	; 15
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <fill_spaces+0x2c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <fill_spaces+0x32>
 2a0:	00 00       	nop
 2a2:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(1);  
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
 2a4:	41 f7       	brne	.-48     	; 0x276 <fill_spaces+0x8>
		SPDR = 0x20; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_ms(1);
	}
}  
 2a6:	08 95       	ret

000002a8 <char2lcd>:
   
void char2lcd(char a_char){
	//sends a char to the LCD
	//usage: char2lcd('H');  // send an H to the LCD
	SPDR = 0x01;   //set SR for data xfer with LSB=1
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2ac:	77 9b       	sbis	0x0e, 7	; 14
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <char2lcd+0x4>
	SPDR = a_char; //send the char to the SPI port
 2b0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2b2:	77 9b       	sbis	0x0e, 7	; 14
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <char2lcd+0xa>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 2b6:	80 91 62 00 	lds	r24, 0x0062
 2ba:	88 60       	ori	r24, 0x08	; 8
 2bc:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 2c0:	80 91 62 00 	lds	r24, 0x0062
 2c4:	87 7f       	andi	r24, 0xF7	; 247
 2c6:	80 93 62 00 	sts	0x0062, r24
 2ca:	8f e9       	ldi	r24, 0x9F	; 159
 2cc:	9f e0       	ldi	r25, 0x0F	; 15
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <char2lcd+0x26>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <char2lcd+0x2c>
 2d4:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = a_char; //send the char to the SPI port
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();  //toggle the enable bit
	_delay_ms(1); //wait the prescribed time for the LCD to process
}
 2d6:	08 95       	ret

000002d8 <string2lcd>:
  
void string2lcd(char *lcd_str){

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
		SPDR = 0x01; //set SR for data
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	6f b9       	out	0x0f, r22	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2e4:	77 9b       	sbis	0x0e, 7	; 14
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <string2lcd+0xc>
		SPDR = lcd_str[count]; 
 2e8:	48 0f       	add	r20, r24
 2ea:	59 1f       	adc	r21, r25
 2ec:	fa 01       	movw	r30, r20
 2ee:	40 81       	ld	r20, Z
 2f0:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 2f2:	77 9b       	sbis	0x0e, 7	; 14
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <string2lcd+0x1a>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 2f6:	40 91 62 00 	lds	r20, 0x0062
 2fa:	48 60       	ori	r20, 0x08	; 8
 2fc:	40 93 62 00 	sts	0x0062, r20
	PORTF &= ~0x08;
 300:	40 91 62 00 	lds	r20, 0x0062
 304:	47 7f       	andi	r20, 0xF7	; 247
 306:	40 93 62 00 	sts	0x0062, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	ef e8       	ldi	r30, 0x8F	; 143
 30c:	f1 e0       	ldi	r31, 0x01	; 1
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <string2lcd+0x36>
 312:	00 c0       	rjmp	.+0      	; 0x314 <string2lcd+0x3c>
 314:	00 00       	nop
  
void string2lcd(char *lcd_str){

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	a9 01       	movw	r20, r18
 31c:	fc 01       	movw	r30, r24
 31e:	01 90       	ld	r0, Z+
 320:	00 20       	and	r0, r0
 322:	e9 f7       	brne	.-6      	; 0x31e <string2lcd+0x46>
 324:	e8 1b       	sub	r30, r24
 326:	f9 0b       	sbc	r31, r25
 328:	32 97       	sbiw	r30, 0x02	; 2
 32a:	e2 17       	cp	r30, r18
 32c:	f3 07       	cpc	r31, r19
 32e:	c8 f6       	brcc	.-78     	; 0x2e2 <string2lcd+0xa>
		SPDR = lcd_str[count]; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_us(100);
	}                  
} 
 330:	08 95       	ret

00000332 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	8f e5       	ldi	r24, 0x5F	; 95
 334:	9a ee       	ldi	r25, 0xEA	; 234
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_init+0x4>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init+0xa>
 33c:	00 00       	nop
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	90 e0       	ldi	r25, 0x00	; 0
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
		SPDR = 0x00;
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		SPDR = 0x30;
 342:	30 e3       	ldi	r19, 0x30	; 48
void lcd_init(void){
	int i;
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
		SPDR = 0x00;
 344:	1f b8       	out	0x0f, r1	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 346:	77 9b       	sbis	0x0e, 7	; 14
 348:	fe cf       	rjmp	.-4      	; 0x346 <lcd_init+0x14>
		SPDR = 0x30;
 34a:	3f b9       	out	0x0f, r19	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 34c:	77 9b       	sbis	0x0e, 7	; 14
 34e:	fe cf       	rjmp	.-4      	; 0x34c <lcd_init+0x1a>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 350:	20 91 62 00 	lds	r18, 0x0062
 354:	28 60       	ori	r18, 0x08	; 8
 356:	20 93 62 00 	sts	0x0062, r18
	PORTF &= ~0x08;
 35a:	20 91 62 00 	lds	r18, 0x0062
 35e:	27 7f       	andi	r18, 0xF7	; 247
 360:	20 93 62 00 	sts	0x0062, r18
 364:	ef e5       	ldi	r30, 0x5F	; 95
 366:	fd e6       	ldi	r31, 0x6D	; 109
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_init+0x36>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_init+0x3c>
 36e:	00 00       	nop
 370:	01 97       	sbiw	r24, 0x01	; 1

void lcd_init(void){
	int i;
	//initalize the LCD to receive data
	_delay_ms(15);   
	for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 372:	41 f7       	brne	.-48     	; 0x344 <lcd_init+0x12>
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_ms(7);
	}

	SPDR = 0x00;
 374:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 376:	77 9b       	sbis	0x0e, 7	; 14
 378:	fe cf       	rjmp	.-4      	; 0x376 <lcd_init+0x44>
	SPDR = 0x38;
 37a:	88 e3       	ldi	r24, 0x38	; 56
 37c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 37e:	77 9b       	sbis	0x0e, 7	; 14
 380:	fe cf       	rjmp	.-4      	; 0x37e <lcd_init+0x4c>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 382:	80 91 62 00 	lds	r24, 0x0062
 386:	88 60       	ori	r24, 0x08	; 8
 388:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 38c:	80 91 62 00 	lds	r24, 0x0062
 390:	87 7f       	andi	r24, 0xF7	; 247
 392:	80 93 62 00 	sts	0x0062, r24
 396:	8f e1       	ldi	r24, 0x1F	; 31
 398:	9e e4       	ldi	r25, 0x4E	; 78
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_init+0x68>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <lcd_init+0x6e>
 3a0:	00 00       	nop
	SPDR = 0x38;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);   

	SPDR = 0x00;
 3a2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3a4:	77 9b       	sbis	0x0e, 7	; 14
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <lcd_init+0x72>
	SPDR = 0x08;
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3ac:	77 9b       	sbis	0x0e, 7	; 14
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <lcd_init+0x7a>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3b0:	80 91 62 00 	lds	r24, 0x0062
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 3ba:	80 91 62 00 	lds	r24, 0x0062
 3be:	87 7f       	andi	r24, 0xF7	; 247
 3c0:	80 93 62 00 	sts	0x0062, r24
 3c4:	ef e1       	ldi	r30, 0x1F	; 31
 3c6:	fe e4       	ldi	r31, 0x4E	; 78
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_init+0x96>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcd_init+0x9c>
 3ce:	00 00       	nop
	SPDR = 0x08;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);

	SPDR = 0x00;
 3d0:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3d2:	77 9b       	sbis	0x0e, 7	; 14
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <lcd_init+0xa0>
	SPDR = 0x01;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3da:	77 9b       	sbis	0x0e, 7	; 14
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <lcd_init+0xa8>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3de:	80 91 62 00 	lds	r24, 0x0062
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 3e8:	80 91 62 00 	lds	r24, 0x0062
 3ec:	87 7f       	andi	r24, 0xF7	; 247
 3ee:	80 93 62 00 	sts	0x0062, r24
 3f2:	8f e1       	ldi	r24, 0x1F	; 31
 3f4:	9e e4       	ldi	r25, 0x4E	; 78
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <lcd_init+0xc4>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <lcd_init+0xca>
 3fc:	00 00       	nop
	SPDR = 0x01;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);   

	SPDR = 0x00;
 3fe:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 400:	77 9b       	sbis	0x0e, 7	; 14
 402:	fe cf       	rjmp	.-4      	; 0x400 <lcd_init+0xce>
	SPDR = 0x06;
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 408:	77 9b       	sbis	0x0e, 7	; 14
 40a:	fe cf       	rjmp	.-4      	; 0x408 <lcd_init+0xd6>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 40c:	80 91 62 00 	lds	r24, 0x0062
 410:	88 60       	ori	r24, 0x08	; 8
 412:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 416:	80 91 62 00 	lds	r24, 0x0062
 41a:	87 7f       	andi	r24, 0xF7	; 247
 41c:	80 93 62 00 	sts	0x0062, r24
 420:	ef e1       	ldi	r30, 0x1F	; 31
 422:	fe e4       	ldi	r31, 0x4E	; 78
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <lcd_init+0xf2>
 428:	00 c0       	rjmp	.+0      	; 0x42a <lcd_init+0xf8>
 42a:	00 00       	nop
	SPDR = 0x06;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);

	SPDR = 0x00;
 42c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 42e:	77 9b       	sbis	0x0e, 7	; 14
 430:	fe cf       	rjmp	.-4      	; 0x42e <lcd_init+0xfc>
	SPDR = 0x0E;
 432:	8e e0       	ldi	r24, 0x0E	; 14
 434:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 436:	77 9b       	sbis	0x0e, 7	; 14
 438:	fe cf       	rjmp	.-4      	; 0x436 <lcd_init+0x104>
char lcd_str[16];  //holds string to send to lcd  
char lcd_test[17]  = {"***-LCD_Test-***"};

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 43a:	80 91 62 00 	lds	r24, 0x0062
 43e:	88 60       	ori	r24, 0x08	; 8
 440:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 444:	80 91 62 00 	lds	r24, 0x0062
 448:	87 7f       	andi	r24, 0xF7	; 247
 44a:	80 93 62 00 	sts	0x0062, r24
 44e:	8f e1       	ldi	r24, 0x1F	; 31
 450:	9e e4       	ldi	r25, 0x4E	; 78
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <lcd_init+0x120>
 456:	00 c0       	rjmp	.+0      	; 0x458 <lcd_init+0x126>
 458:	00 00       	nop
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	SPDR = 0x0E;
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();
	_delay_ms(5);
} 
 45a:	08 95       	ret

0000045c <__divmodhi4>:
 45c:	97 fb       	bst	r25, 7
 45e:	09 2e       	mov	r0, r25
 460:	07 26       	eor	r0, r23
 462:	0a d0       	rcall	.+20     	; 0x478 <__divmodhi4_neg1>
 464:	77 fd       	sbrc	r23, 7
 466:	04 d0       	rcall	.+8      	; 0x470 <__divmodhi4_neg2>
 468:	0c d0       	rcall	.+24     	; 0x482 <__udivmodhi4>
 46a:	06 d0       	rcall	.+12     	; 0x478 <__divmodhi4_neg1>
 46c:	00 20       	and	r0, r0
 46e:	1a f4       	brpl	.+6      	; 0x476 <__divmodhi4_exit>

00000470 <__divmodhi4_neg2>:
 470:	70 95       	com	r23
 472:	61 95       	neg	r22
 474:	7f 4f       	sbci	r23, 0xFF	; 255

00000476 <__divmodhi4_exit>:
 476:	08 95       	ret

00000478 <__divmodhi4_neg1>:
 478:	f6 f7       	brtc	.-4      	; 0x476 <__divmodhi4_exit>
 47a:	90 95       	com	r25
 47c:	81 95       	neg	r24
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <__udivmodhi4>:
 482:	aa 1b       	sub	r26, r26
 484:	bb 1b       	sub	r27, r27
 486:	51 e1       	ldi	r21, 0x11	; 17
 488:	07 c0       	rjmp	.+14     	; 0x498 <__udivmodhi4_ep>

0000048a <__udivmodhi4_loop>:
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	a6 17       	cp	r26, r22
 490:	b7 07       	cpc	r27, r23
 492:	10 f0       	brcs	.+4      	; 0x498 <__udivmodhi4_ep>
 494:	a6 1b       	sub	r26, r22
 496:	b7 0b       	sbc	r27, r23

00000498 <__udivmodhi4_ep>:
 498:	88 1f       	adc	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	5a 95       	dec	r21
 49e:	a9 f7       	brne	.-22     	; 0x48a <__udivmodhi4_loop>
 4a0:	80 95       	com	r24
 4a2:	90 95       	com	r25
 4a4:	bc 01       	movw	r22, r24
 4a6:	cd 01       	movw	r24, r26
 4a8:	08 95       	ret

000004aa <itoa>:
 4aa:	fb 01       	movw	r30, r22
 4ac:	9f 01       	movw	r18, r30
 4ae:	e8 94       	clt
 4b0:	42 30       	cpi	r20, 0x02	; 2
 4b2:	c4 f0       	brlt	.+48     	; 0x4e4 <itoa+0x3a>
 4b4:	45 32       	cpi	r20, 0x25	; 37
 4b6:	b4 f4       	brge	.+44     	; 0x4e4 <itoa+0x3a>
 4b8:	4a 30       	cpi	r20, 0x0A	; 10
 4ba:	29 f4       	brne	.+10     	; 0x4c6 <itoa+0x1c>
 4bc:	97 fb       	bst	r25, 7
 4be:	1e f4       	brtc	.+6      	; 0x4c6 <itoa+0x1c>
 4c0:	90 95       	com	r25
 4c2:	81 95       	neg	r24
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	64 2f       	mov	r22, r20
 4c8:	77 27       	eor	r23, r23
 4ca:	0e 94 41 02 	call	0x482	; 0x482 <__udivmodhi4>
 4ce:	80 5d       	subi	r24, 0xD0	; 208
 4d0:	8a 33       	cpi	r24, 0x3A	; 58
 4d2:	0c f0       	brlt	.+2      	; 0x4d6 <itoa+0x2c>
 4d4:	89 5d       	subi	r24, 0xD9	; 217
 4d6:	81 93       	st	Z+, r24
 4d8:	cb 01       	movw	r24, r22
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	a1 f7       	brne	.-24     	; 0x4c6 <itoa+0x1c>
 4de:	16 f4       	brtc	.+4      	; 0x4e4 <itoa+0x3a>
 4e0:	5d e2       	ldi	r21, 0x2D	; 45
 4e2:	51 93       	st	Z+, r21
 4e4:	10 82       	st	Z, r1
 4e6:	c9 01       	movw	r24, r18
 4e8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <strrev>

000004ec <strrev>:
 4ec:	dc 01       	movw	r26, r24
 4ee:	fc 01       	movw	r30, r24
 4f0:	67 2f       	mov	r22, r23
 4f2:	71 91       	ld	r23, Z+
 4f4:	77 23       	and	r23, r23
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <strrev+0x4>
 4f8:	32 97       	sbiw	r30, 0x02	; 2
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <strrev+0x18>
 4fc:	7c 91       	ld	r23, X
 4fe:	6d 93       	st	X+, r22
 500:	70 83       	st	Z, r23
 502:	62 91       	ld	r22, -Z
 504:	ae 17       	cp	r26, r30
 506:	bf 07       	cpc	r27, r31
 508:	c8 f3       	brcs	.-14     	; 0x4fc <strrev+0x10>
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
