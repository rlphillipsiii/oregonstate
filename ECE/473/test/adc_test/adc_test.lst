
adc_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  0000108c  00001120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041a  00800214  00800214  00001234  2**0
                  ALLOC
  3 .stab         00001d58  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bdc  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e8       	ldi	r30, 0x8C	; 140
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 31       	cpi	r26, 0x14	; 20
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	16 e0       	ldi	r17, 0x06	; 6
      b4:	a4 e1       	ldi	r26, 0x14	; 20
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 32       	cpi	r26, 0x2E	; 46
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 44 08 	jmp	0x1088	; 0x1088 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#include <adc_driver.h>
#include <led_driver.h>
#include <macros.h>

int main()
{   
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	df 93       	push	r29
      d8:	cf 93       	push	r28
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	27 97       	sbiw	r28, 0x07	; 7
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	f8 94       	cli
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xF0;
      ea:	80 ef       	ldi	r24, 0xF0	; 240
      ec:	87 bb       	out	0x17, r24	; 23

	TCCR2 = (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << COM20) | (1 << CS22);
      ee:	8c e7       	ldi	r24, 0x7C	; 124
      f0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
      f2:	8a e0       	ldi	r24, 0x0A	; 10
      f4:	83 bd       	out	0x23, r24	; 35

	struct display output;
	init_display_struct(&output);
      f6:	7e 01       	movw	r14, r28
      f8:	08 94       	sec
      fa:	e1 1c       	adc	r14, r1
      fc:	f1 1c       	adc	r15, r1
      fe:	c7 01       	movw	r24, r14
     100:	0e 94 13 01 	call	0x226	; 0x226 <init_display_struct>
	update_colon(&output, 1, 0);
     104:	c7 01       	movw	r24, r14
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	0e 94 1d 01 	call	0x23a	; 0x23a <update_colon>
	
	uint16_t number = 0;
 
	enable_leds();
     10e:	0e 94 06 01 	call	0x20c	; 0x20c <enable_leds>
	enable_adc();
     112:	0e 94 a7 00 	call	0x14e	; 0x14e <enable_adc>

	number = poll_adc();
     116:	0e 94 e6 00 	call	0x1cc	; 0x1cc <poll_adc>
     11a:	8c 01       	movw	r16, r24
	start_adc();
     11c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <start_adc>
     120:	04 c0       	rjmp	.+8      	; 0x12a <main+0x5c>

			OCR2 = get_adc_adjusted(number);
			start_adc();
		}

		update_segment(&output, number);
     122:	c7 01       	movw	r24, r14
     124:	b8 01       	movw	r22, r16
     126:	0e 94 a4 01 	call	0x348	; 0x348 <update_segment>

	number = poll_adc();
	start_adc();
	
	while (1) {
		if (!is_adc_running()) {
     12a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <is_adc_running>
     12e:	88 23       	and	r24, r24
     130:	c1 f7       	brne	.-16     	; 0x122 <main+0x54>
			update_segment(&output, number);
     132:	c7 01       	movw	r24, r14
     134:	b8 01       	movw	r22, r16
     136:	0e 94 a4 01 	call	0x348	; 0x348 <update_segment>
			SETBIT(ADCSRA, ADIF);
     13a:	34 9a       	sbi	0x06, 4	; 6
			number = get_adc();
     13c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <get_adc>
     140:	8c 01       	movw	r16, r24

			OCR2 = get_adc_adjusted(number);
     142:	0e 94 f6 00 	call	0x1ec	; 0x1ec <get_adc_adjusted>
     146:	83 bd       	out	0x23, r24	; 35
			start_adc();
     148:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <start_adc>
     14c:	ea cf       	rjmp	.-44     	; 0x122 <main+0x54>

0000014e <enable_adc>:
	for (i = 0; i < SIZE; i++)
		lookup[i] = (uint8_t) round((-49.0f/195.0f)*i+(3560.0f/13.0f));
}

void enable_adc()
{
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
	CLRBIT(DDRF, PF7);
     156:	80 91 61 00 	lds	r24, 0x0061
     15a:	8f 77       	andi	r24, 0x7F	; 127
     15c:	80 93 61 00 	sts	0x0061, r24
	CLRBIT(PORTF, PF7);
     160:	80 91 62 00 	lds	r24, 0x0062
     164:	8f 77       	andi	r24, 0x7F	; 127
     166:	80 93 62 00 	sts	0x0062, r24

	ADMUX  = (1 << REFS0) | (PF7 & ADC_MUX_MASK);    //single-ended port F bit 7, right adjusted for 10 bits
     16a:	87 e4       	ldi	r24, 0x47	; 71
     16c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);    //ADC enabled, don't start yet, single shot mode	
     16e:	87 e8       	ldi	r24, 0x87	; 135
     170:	86 b9       	out	0x06, r24	; 6
     172:	04 e1       	ldi	r16, 0x14	; 20
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	89 e8       	ldi	r24, 0x89	; 137
     17c:	93 e4       	ldi	r25, 0x43	; 67
{
	// (1050, 10)
	// (75, 255)
	
	uint16_t i;
	for (i = 0; i < SIZE; i++)
     17e:	c0 e0       	ldi	r28, 0x00	; 0
     180:	d0 e0       	ldi	r29, 0x00	; 0
     182:	13 c0       	rjmp	.+38     	; 0x1aa <enable_adc+0x5c>
     184:	be 01       	movw	r22, r28
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 25 05 	call	0xa4a	; 0xa4a <__floatunsisf>
     18e:	2b e0       	ldi	r18, 0x0B	; 11
     190:	38 ea       	ldi	r19, 0xA8	; 168
     192:	40 e8       	ldi	r20, 0x80	; 128
     194:	5e eb       	ldi	r21, 0xBE	; 190
     196:	0e 94 a9 03 	call	0x752	; 0x752 <__mulsf3>
		lookup[i] = (uint8_t) round((-49.0f/195.0f)*i+(3560.0f/13.0f));
}

void enable_adc()
     19a:	2f e4       	ldi	r18, 0x4F	; 79
     19c:	3c ee       	ldi	r19, 0xEC	; 236
     19e:	48 e8       	ldi	r20, 0x88	; 136
     1a0:	53 e4       	ldi	r21, 0x43	; 67
     1a2:	0e 94 4b 03 	call	0x696	; 0x696 <__addsf3>
     1a6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <round>
	// (1050, 10)
	// (75, 255)
	
	uint16_t i;
	for (i = 0; i < SIZE; i++)
		lookup[i] = (uint8_t) round((-49.0f/195.0f)*i+(3560.0f/13.0f));
     1aa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__fixunssfsi>
     1ae:	f8 01       	movw	r30, r16
     1b0:	61 93       	st	Z+, r22
     1b2:	8f 01       	movw	r16, r30
{
	// (1050, 10)
	// (75, 255)
	
	uint16_t i;
	for (i = 0; i < SIZE; i++)
     1b4:	21 96       	adiw	r28, 0x01	; 1
     1b6:	f4 e0       	ldi	r31, 0x04	; 4
     1b8:	ca 31       	cpi	r28, 0x1A	; 26
     1ba:	df 07       	cpc	r29, r31
     1bc:	19 f7       	brne	.-58     	; 0x184 <enable_adc+0x36>

	ADMUX  = (1 << REFS0) | (PF7 & ADC_MUX_MASK);    //single-ended port F bit 7, right adjusted for 10 bits
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);    //ADC enabled, don't start yet, single shot mode	

	init_lookup_table();
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <start_adc>:

void start_adc()
{
	SETBIT(ADCSRA, ADSC);
     1c8:	36 9a       	sbi	0x06, 6	; 6
}
     1ca:	08 95       	ret

000001cc <poll_adc>:
	init_lookup_table();
}

void start_adc()
{
	SETBIT(ADCSRA, ADSC);
     1cc:	36 9a       	sbi	0x06, 6	; 6

uint16_t poll_adc()
{
	start_adc();

	while (!ISSET(ADCSRA, ADIF));
     1ce:	34 9b       	sbis	0x06, 4	; 6
     1d0:	fe cf       	rjmp	.-4      	; 0x1ce <poll_adc+0x2>
	SETBIT(ADCSRA, ADIF);
     1d2:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
     1d4:	24 b1       	in	r18, 0x04	; 4
     1d6:	35 b1       	in	r19, 0x05	; 5
}
     1d8:	c9 01       	movw	r24, r18
     1da:	08 95       	ret

000001dc <is_adc_running>:

uint8_t is_adc_running()
{
	if (!ISSET(ADCSRA, ADIF))
		return 1;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	34 99       	sbic	0x06, 4	; 6
     1e0:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
     1e2:	08 95       	ret

000001e4 <get_adc>:

uint16_t get_adc()
{
	return ADC;
     1e4:	24 b1       	in	r18, 0x04	; 4
     1e6:	35 b1       	in	r19, 0x05	; 5
}
     1e8:	c9 01       	movw	r24, r18
     1ea:	08 95       	ret

000001ec <get_adc_adjusted>:

uint8_t get_adc_adjusted(uint16_t raw)
{
	if (raw > 1049)
     1ec:	24 e0       	ldi	r18, 0x04	; 4
     1ee:	8a 31       	cpi	r24, 0x1A	; 26
     1f0:	92 07       	cpc	r25, r18
     1f2:	50 f4       	brcc	.+20     	; 0x208 <get_adc_adjusted+0x1c>
		return 10;
	
	if (raw < 76)
     1f4:	8c 34       	cpi	r24, 0x4C	; 76
     1f6:	91 05       	cpc	r25, r1
     1f8:	28 f0       	brcs	.+10     	; 0x204 <get_adc_adjusted+0x18>
		return 255;

	return lookup[raw];
     1fa:	8c 5e       	subi	r24, 0xEC	; 236
     1fc:	9d 4f       	sbci	r25, 0xFD	; 253
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	08 95       	ret
{
	if (raw > 1049)
		return 10;
	
	if (raw < 76)
		return 255;
     204:	8f ef       	ldi	r24, 0xFF	; 255

	return lookup[raw];
}
     206:	08 95       	ret
}

uint8_t get_adc_adjusted(uint16_t raw)
{
	if (raw > 1049)
		return 10;
     208:	8a e0       	ldi	r24, 0x0A	; 10
     20a:	08 95       	ret

0000020c <enable_leds>:
							 SIX, SEVEN, EIGHT, NINE, OFF };

void enable_leds()
{
	// disable the tristate buffer without enabling a segment
	PORTB &= ~(1 << PB4);
     20c:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1 << PB6) | (1 << PB5);
     20e:	88 b3       	in	r24, 0x18	; 24
     210:	80 66       	ori	r24, 0x60	; 96
     212:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; // make PORTA all outputs
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
     218:	8b bb       	out	0x1b, r24	; 27
}
     21a:	08 95       	ret

0000021c <disable_leds>:

void disable_leds()
{
	PORTB &= ~(1 << PB4);
     21c:	c4 98       	cbi	0x18, 4	; 24
    PORTB |= (1 << PB6) | (1 << PB5);
     21e:	88 b3       	in	r24, 0x18	; 24
     220:	80 66       	ori	r24, 0x60	; 96
     222:	88 bb       	out	0x18, r24	; 24
}
     224:	08 95       	ret

00000226 <init_display_struct>:

void init_display_struct(volatile struct display *output)
{
     226:	fc 01       	movw	r30, r24
	output->ones = 0;
     228:	10 82       	st	Z, r1
	output->tens = 0;
     22a:	11 82       	std	Z+1, r1	; 0x01
	output->hundreds = 0;
     22c:	12 82       	std	Z+2, r1	; 0x02
	output->thousands = 0;
     22e:	13 82       	std	Z+3, r1	; 0x03

	output->colon = COLON_ONLY;
     230:	8c ef       	ldi	r24, 0xFC	; 252
     232:	84 83       	std	Z+4, r24	; 0x04
	output->mode = ZERO_BLANK;
     234:	15 82       	std	Z+5, r1	; 0x05
	output->cycle = 0;
     236:	16 82       	std	Z+6, r1	; 0x06
}
     238:	08 95       	ret

0000023a <update_colon>:

void update_colon(volatile struct display *output, uint8_t off, uint8_t all)
{
	if (!off) {
     23a:	66 23       	and	r22, r22
     23c:	31 f4       	brne	.+12     	; 0x24a <update_colon+0x10>
		if (all)
     23e:	44 23       	and	r20, r20
     240:	51 f0       	breq	.+20     	; 0x256 <update_colon+0x1c>
			output->colon = COLON_ALL;
     242:	28 ef       	ldi	r18, 0xF8	; 248
     244:	fc 01       	movw	r30, r24
     246:	24 83       	std	Z+4, r18	; 0x04
     248:	08 95       	ret
		else
			output->colon = COLON_ONLY;
	} else {
		if (all)
     24a:	44 23       	and	r20, r20
     24c:	41 f4       	brne	.+16     	; 0x25e <update_colon+0x24>
			output->colon = DOT_ONLY;
		else
			output->colon = OFF;
     24e:	2f ef       	ldi	r18, 0xFF	; 255
     250:	fc 01       	movw	r30, r24
     252:	24 83       	std	Z+4, r18	; 0x04
     254:	08 95       	ret
{
	if (!off) {
		if (all)
			output->colon = COLON_ALL;
		else
			output->colon = COLON_ONLY;
     256:	2c ef       	ldi	r18, 0xFC	; 252
     258:	fc 01       	movw	r30, r24
     25a:	24 83       	std	Z+4, r18	; 0x04
     25c:	08 95       	ret
	} else {
		if (all)
			output->colon = DOT_ONLY;
     25e:	2b ef       	ldi	r18, 0xFB	; 251
     260:	fc 01       	movw	r30, r24
     262:	24 83       	std	Z+4, r18	; 0x04
     264:	08 95       	ret

00000266 <toggle_dot>:
			output->colon = OFF;
	}
}

void toggle_dot(volatile struct display *output)
{
     266:	fc 01       	movw	r30, r24
	output->colon ^= 0x04;
     268:	84 81       	ldd	r24, Z+4	; 0x04
     26a:	94 e0       	ldi	r25, 0x04	; 4
     26c:	89 27       	eor	r24, r25
     26e:	84 83       	std	Z+4, r24	; 0x04
}
     270:	08 95       	ret

00000272 <set_colon>:

void set_colon(volatile struct display *output)
{
	PORTA = output->colon;
     272:	fc 01       	movw	r30, r24
     274:	84 81       	ldd	r24, Z+4	; 0x04
     276:	8b bb       	out	0x1b, r24	; 27
}
     278:	08 95       	ret

0000027a <set_zero_filled>:

void set_zero_filled(volatile struct display *output)
{
	output->mode = ZERO_FILLED;
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	fc 01       	movw	r30, r24
     27e:	25 83       	std	Z+5, r18	; 0x05
}
     280:	08 95       	ret

00000282 <decode_number>:

void decode_number(volatile struct display *output, uint16_t number)
{
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	fc 01       	movw	r30, r24
     28c:	9b 01       	movw	r18, r22
	output->ones = (number%10);
     28e:	ca e0       	ldi	r28, 0x0A	; 10
     290:	d0 e0       	ldi	r29, 0x00	; 0
     292:	cb 01       	movw	r24, r22
     294:	be 01       	movw	r22, r28
     296:	0e 94 87 07 	call	0xf0e	; 0xf0e <__udivmodhi4>
     29a:	80 83       	st	Z, r24
	output->tens = (number%100)/10;
     29c:	04 e6       	ldi	r16, 0x64	; 100
     29e:	10 e0       	ldi	r17, 0x00	; 0
     2a0:	c9 01       	movw	r24, r18
     2a2:	b8 01       	movw	r22, r16
     2a4:	0e 94 87 07 	call	0xf0e	; 0xf0e <__udivmodhi4>
     2a8:	be 01       	movw	r22, r28
     2aa:	0e 94 87 07 	call	0xf0e	; 0xf0e <__udivmodhi4>
     2ae:	61 83       	std	Z+1, r22	; 0x01
	output->hundreds = (number%1000)/100;
     2b0:	c9 01       	movw	r24, r18
     2b2:	68 ee       	ldi	r22, 0xE8	; 232
     2b4:	73 e0       	ldi	r23, 0x03	; 3
     2b6:	0e 94 87 07 	call	0xf0e	; 0xf0e <__udivmodhi4>
     2ba:	26 2f       	mov	r18, r22
     2bc:	b8 01       	movw	r22, r16
     2be:	0e 94 87 07 	call	0xf0e	; 0xf0e <__udivmodhi4>
     2c2:	62 83       	std	Z+2, r22	; 0x02
	output->thousands = number/1000;
     2c4:	23 83       	std	Z+3, r18	; 0x03

	if (output->mode == ZERO_FILLED)
     2c6:	85 81       	ldd	r24, Z+5	; 0x05
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	69 f0       	breq	.+26     	; 0x2e6 <decode_number+0x64>
		return;

	if (output->thousands != 0)
     2cc:	83 81       	ldd	r24, Z+3	; 0x03
     2ce:	88 23       	and	r24, r24
     2d0:	51 f4       	brne	.+20     	; 0x2e6 <decode_number+0x64>
		return;

	output->thousands = BLANK; // turn of digit 4 if thousands is 0
     2d2:	8a e0       	ldi	r24, 0x0A	; 10
     2d4:	83 83       	std	Z+3, r24	; 0x03
	if (output->hundreds != 0)
     2d6:	92 81       	ldd	r25, Z+2	; 0x02
     2d8:	99 23       	and	r25, r25
     2da:	29 f4       	brne	.+10     	; 0x2e6 <decode_number+0x64>
		return;

	output->hundreds = BLANK; // turn of digit 3 if hundreds is 0
     2dc:	82 83       	std	Z+2, r24	; 0x02
	if (output->tens != 0)
     2de:	91 81       	ldd	r25, Z+1	; 0x01
     2e0:	99 23       	and	r25, r25
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <decode_number+0x64>
		return;

	output->tens = BLANK; // turn of digit 2 if tens is 0
     2e4:	81 83       	std	Z+1, r24	; 0x01
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <enable_segment>:

void enable_segment(uint8_t segment)
{
	switch (segment) {
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	c9 f0       	breq	.+50     	; 0x326 <enable_segment+0x36>
     2f4:	83 30       	cpi	r24, 0x03	; 3
     2f6:	28 f0       	brcs	.+10     	; 0x302 <enable_segment+0x12>
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	d1 f0       	breq	.+52     	; 0x330 <enable_segment+0x40>
     2fc:	84 30       	cpi	r24, 0x04	; 4
     2fe:	71 f0       	breq	.+28     	; 0x31c <enable_segment+0x2c>
     300:	08 95       	ret
     302:	88 23       	and	r24, r24
     304:	39 f0       	breq	.+14     	; 0x314 <enable_segment+0x24>
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	d9 f7       	brne	.-10     	; 0x300 <enable_segment+0x10>
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
		break;

	case 1: // digit 2 enabled: PORTB = 0b?001????
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
     30a:	88 b3       	in	r24, 0x18	; 24
     30c:	8f 79       	andi	r24, 0x9F	; 159
     30e:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB4);
     310:	c4 9a       	sbi	0x18, 4	; 24
		break;
     312:	08 95       	ret

void enable_segment(uint8_t segment)
{
	switch (segment) {
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
     314:	88 b3       	in	r24, 0x18	; 24
     316:	8f 78       	andi	r24, 0x8F	; 143
     318:	88 bb       	out	0x18, r24	; 24
		break;
     31a:	08 95       	ret
		PORTB &= ~(1 << PB6);
		PORTB |= (1 << PB4) | (1 << PB5);
		break;

	case 4: // digit 4 enabled: PORTB = 0b?100????
		PORTB &= ~(1 << PB4) & ~(1 << PB5);		
     31c:	88 b3       	in	r24, 0x18	; 24
     31e:	8f 7c       	andi	r24, 0xCF	; 207
     320:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB6);
     322:	c6 9a       	sbi	0x18, 6	; 24
     324:	08 95       	ret
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
		PORTB |= (1 << PB4);
		break;

	case 2: // colons enabled: PORTB = 0b?010????
		PORTB &= ~(1 << PB4) & ~(1 << PB6);
     326:	88 b3       	in	r24, 0x18	; 24
     328:	8f 7a       	andi	r24, 0xAF	; 175
     32a:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB5);
     32c:	c5 9a       	sbi	0x18, 5	; 24
		break;
     32e:	08 95       	ret

	case 3: // digit 3 enabled: PORTB = 0b?011????
		PORTB &= ~(1 << PB6);
     330:	c6 98       	cbi	0x18, 6	; 24
		PORTB |= (1 << PB4) | (1 << PB5);
     332:	88 b3       	in	r24, 0x18	; 24
     334:	80 63       	ori	r24, 0x30	; 48
     336:	88 bb       	out	0x18, r24	; 24
		break;
     338:	08 95       	ret

0000033a <set_digit>:
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
     33a:	e0 e0       	ldi	r30, 0x00	; 0
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	e8 0f       	add	r30, r24
     340:	f1 1d       	adc	r31, r1
     342:	80 81       	ld	r24, Z
     344:	8b bb       	out	0x1b, r24	; 27
}
     346:	08 95       	ret

00000348 <update_segment>:
 
void update_segment(volatile struct display *output, uint16_t number)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	ec 01       	movw	r28, r24
	decode_number(output, number); // get the 4 digits 
     34e:	0e 94 41 01 	call	0x282	; 0x282 <decode_number>
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	8b bb       	out	0x1b, r24	; 27
void update_segment(volatile struct display *output, uint16_t number)
{
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit
     356:	8e 81       	ldd	r24, Y+6	; 0x06
     358:	0e 94 78 01 	call	0x2f0	; 0x2f0 <enable_segment>

	switch(output->cycle) { // display the digit based on the segment enabled
     35c:	8e 81       	ldd	r24, Y+6	; 0x06
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	f9 f0       	breq	.+62     	; 0x3a0 <update_segment+0x58>
     362:	83 30       	cpi	r24, 0x03	; 3
     364:	70 f0       	brcs	.+28     	; 0x382 <update_segment+0x3a>
     366:	83 30       	cpi	r24, 0x03	; 3
     368:	f1 f0       	breq	.+60     	; 0x3a6 <update_segment+0x5e>
     36a:	84 30       	cpi	r24, 0x04	; 4
     36c:	b9 f0       	breq	.+46     	; 0x39c <update_segment+0x54>
	case 2: set_colon(output);            break; // colons
	case 3: set_digit(output->hundreds);  break; // hundreds digit
	case 4: set_digit(output->thousands); break; // thousands digit
	}

	output->cycle++; // go to the next segment
     36e:	8e 81       	ldd	r24, Y+6	; 0x06
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	8e 83       	std	Y+6, r24	; 0x06
	if (output->cycle > 4)
     374:	8e 81       	ldd	r24, Y+6	; 0x06
     376:	85 30       	cpi	r24, 0x05	; 5
     378:	08 f0       	brcs	.+2      	; 0x37c <update_segment+0x34>
		output->cycle = 0; // go back to the beginning if at the last segment	
     37a:	1e 82       	std	Y+6, r1	; 0x06
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
     382:	88 23       	and	r24, r24
     384:	49 f0       	breq	.+18     	; 0x398 <update_segment+0x50>
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	91 f7       	brne	.-28     	; 0x36e <update_segment+0x26>
	case 0: set_digit(output->ones);      break; // ones digit
	case 1: set_digit(output->tens);      break; // tens digit
     38a:	e9 81       	ldd	r30, Y+1	; 0x01
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	e0 50       	subi	r30, 0x00	; 0
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	80 81       	ld	r24, Z
     394:	8b bb       	out	0x1b, r24	; 27
     396:	eb cf       	rjmp	.-42     	; 0x36e <update_segment+0x26>

	set_digit(BLANK); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones);      break; // ones digit
     398:	e8 81       	ld	r30, Y
     39a:	f8 cf       	rjmp	.-16     	; 0x38c <update_segment+0x44>
	case 1: set_digit(output->tens);      break; // tens digit
	case 2: set_colon(output);            break; // colons
	case 3: set_digit(output->hundreds);  break; // hundreds digit
	case 4: set_digit(output->thousands); break; // thousands digit
     39c:	eb 81       	ldd	r30, Y+3	; 0x03
     39e:	f6 cf       	rjmp	.-20     	; 0x38c <update_segment+0x44>
	output->colon ^= 0x04;
}

void set_colon(volatile struct display *output)
{
	PORTA = output->colon;
     3a0:	8c 81       	ldd	r24, Y+4	; 0x04
     3a2:	8b bb       	out	0x1b, r24	; 27
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones);      break; // ones digit
	case 1: set_digit(output->tens);      break; // tens digit
	case 2: set_colon(output);            break; // colons
     3a4:	e4 cf       	rjmp	.-56     	; 0x36e <update_segment+0x26>
	case 3: set_digit(output->hundreds);  break; // hundreds digit
     3a6:	ea 81       	ldd	r30, Y+2	; 0x02
     3a8:	f1 cf       	rjmp	.-30     	; 0x38c <update_segment+0x44>

000003aa <__fixunssfsi>:
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	7b 01       	movw	r14, r22
     3b4:	8c 01       	movw	r16, r24
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	5f e4       	ldi	r21, 0x4F	; 79
     3be:	0e 94 a3 04 	call	0x946	; 0x946 <__gesf2>
     3c2:	87 fd       	sbrc	r24, 7
     3c4:	11 c0       	rjmp	.+34     	; 0x3e8 <__fixunssfsi+0x3e>
     3c6:	c8 01       	movw	r24, r16
     3c8:	b7 01       	movw	r22, r14
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	5f e4       	ldi	r21, 0x4F	; 79
     3d2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__subsf3>
     3d6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fixsfsi>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	20 50       	subi	r18, 0x00	; 0
     3e0:	30 40       	sbci	r19, 0x00	; 0
     3e2:	40 40       	sbci	r20, 0x00	; 0
     3e4:	50 48       	sbci	r21, 0x80	; 128
     3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <__fixunssfsi+0x4a>
     3e8:	c8 01       	movw	r24, r16
     3ea:	b7 01       	movw	r22, r14
     3ec:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fixsfsi>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	b9 01       	movw	r22, r18
     3f6:	ca 01       	movw	r24, r20
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	08 95       	ret

00000402 <_fpadd_parts>:
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e7 e0       	ldi	r30, 0x07	; 7
     408:	f2 e0       	ldi	r31, 0x02	; 2
     40a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__prologue_saves__+0x8>
     40e:	fc 01       	movw	r30, r24
     410:	ea 01       	movw	r28, r20
     412:	80 81       	ld	r24, Z
     414:	82 30       	cpi	r24, 0x02	; 2
     416:	08 f4       	brcc	.+2      	; 0x41a <_fpadd_parts+0x18>
     418:	38 c1       	rjmp	.+624    	; 0x68a <_fpadd_parts+0x288>
     41a:	db 01       	movw	r26, r22
     41c:	9c 91       	ld	r25, X
     41e:	92 30       	cpi	r25, 0x02	; 2
     420:	08 f4       	brcc	.+2      	; 0x424 <_fpadd_parts+0x22>
     422:	30 c1       	rjmp	.+608    	; 0x684 <_fpadd_parts+0x282>
     424:	84 30       	cpi	r24, 0x04	; 4
     426:	59 f4       	brne	.+22     	; 0x43e <_fpadd_parts+0x3c>
     428:	94 30       	cpi	r25, 0x04	; 4
     42a:	09 f0       	breq	.+2      	; 0x42e <_fpadd_parts+0x2c>
     42c:	2e c1       	rjmp	.+604    	; 0x68a <_fpadd_parts+0x288>
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	11 96       	adiw	r26, 0x01	; 1
     432:	8c 91       	ld	r24, X
     434:	11 97       	sbiw	r26, 0x01	; 1
     436:	98 17       	cp	r25, r24
     438:	09 f0       	breq	.+2      	; 0x43c <_fpadd_parts+0x3a>
     43a:	21 c1       	rjmp	.+578    	; 0x67e <_fpadd_parts+0x27c>
     43c:	26 c1       	rjmp	.+588    	; 0x68a <_fpadd_parts+0x288>
     43e:	94 30       	cpi	r25, 0x04	; 4
     440:	09 f4       	brne	.+2      	; 0x444 <_fpadd_parts+0x42>
     442:	20 c1       	rjmp	.+576    	; 0x684 <_fpadd_parts+0x282>
     444:	92 30       	cpi	r25, 0x02	; 2
     446:	b1 f4       	brne	.+44     	; 0x474 <_fpadd_parts+0x72>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	09 f0       	breq	.+2      	; 0x44e <_fpadd_parts+0x4c>
     44c:	1e c1       	rjmp	.+572    	; 0x68a <_fpadd_parts+0x288>
     44e:	ca 01       	movw	r24, r20
     450:	af 01       	movw	r20, r30
     452:	28 e0       	ldi	r18, 0x08	; 8
     454:	da 01       	movw	r26, r20
     456:	0d 90       	ld	r0, X+
     458:	ad 01       	movw	r20, r26
     45a:	dc 01       	movw	r26, r24
     45c:	0d 92       	st	X+, r0
     45e:	cd 01       	movw	r24, r26
     460:	21 50       	subi	r18, 0x01	; 1
     462:	c1 f7       	brne	.-16     	; 0x454 <_fpadd_parts+0x52>
     464:	db 01       	movw	r26, r22
     466:	11 96       	adiw	r26, 0x01	; 1
     468:	8c 91       	ld	r24, X
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	91 81       	ldd	r25, Z+1	; 0x01
     46e:	89 23       	and	r24, r25
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	0a c1       	rjmp	.+532    	; 0x688 <_fpadd_parts+0x286>
     474:	82 30       	cpi	r24, 0x02	; 2
     476:	09 f4       	brne	.+2      	; 0x47a <_fpadd_parts+0x78>
     478:	05 c1       	rjmp	.+522    	; 0x684 <_fpadd_parts+0x282>
     47a:	c2 80       	ldd	r12, Z+2	; 0x02
     47c:	d3 80       	ldd	r13, Z+3	; 0x03
     47e:	db 01       	movw	r26, r22
     480:	12 96       	adiw	r26, 0x02	; 2
     482:	6d 90       	ld	r6, X+
     484:	7c 90       	ld	r7, X
     486:	13 97       	sbiw	r26, 0x03	; 3
     488:	24 81       	ldd	r18, Z+4	; 0x04
     48a:	35 81       	ldd	r19, Z+5	; 0x05
     48c:	46 81       	ldd	r20, Z+6	; 0x06
     48e:	57 81       	ldd	r21, Z+7	; 0x07
     490:	14 96       	adiw	r26, 0x04	; 4
     492:	ed 90       	ld	r14, X+
     494:	fd 90       	ld	r15, X+
     496:	0d 91       	ld	r16, X+
     498:	1c 91       	ld	r17, X
     49a:	17 97       	sbiw	r26, 0x07	; 7
     49c:	c6 01       	movw	r24, r12
     49e:	86 19       	sub	r24, r6
     4a0:	97 09       	sbc	r25, r7
     4a2:	5c 01       	movw	r10, r24
     4a4:	97 ff       	sbrs	r25, 7
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <_fpadd_parts+0xae>
     4a8:	aa 24       	eor	r10, r10
     4aa:	bb 24       	eor	r11, r11
     4ac:	a8 1a       	sub	r10, r24
     4ae:	b9 0a       	sbc	r11, r25
     4b0:	b0 e2       	ldi	r27, 0x20	; 32
     4b2:	ab 16       	cp	r10, r27
     4b4:	b1 04       	cpc	r11, r1
     4b6:	0c f0       	brlt	.+2      	; 0x4ba <_fpadd_parts+0xb8>
     4b8:	61 c0       	rjmp	.+194    	; 0x57c <_fpadd_parts+0x17a>
     4ba:	18 16       	cp	r1, r24
     4bc:	19 06       	cpc	r1, r25
     4be:	6c f5       	brge	.+90     	; 0x51a <_fpadd_parts+0x118>
     4c0:	37 01       	movw	r6, r14
     4c2:	48 01       	movw	r8, r16
     4c4:	0a 2c       	mov	r0, r10
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <_fpadd_parts+0xce>
     4c8:	96 94       	lsr	r9
     4ca:	87 94       	ror	r8
     4cc:	77 94       	ror	r7
     4ce:	67 94       	ror	r6
     4d0:	0a 94       	dec	r0
     4d2:	d2 f7       	brpl	.-12     	; 0x4c8 <_fpadd_parts+0xc6>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	a0 e0       	ldi	r26, 0x00	; 0
     4da:	b0 e0       	ldi	r27, 0x00	; 0
     4dc:	0a 2c       	mov	r0, r10
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <_fpadd_parts+0xe6>
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	aa 1f       	adc	r26, r26
     4e6:	bb 1f       	adc	r27, r27
     4e8:	0a 94       	dec	r0
     4ea:	d2 f7       	brpl	.-12     	; 0x4e0 <_fpadd_parts+0xde>
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	a1 09       	sbc	r26, r1
     4f0:	b1 09       	sbc	r27, r1
     4f2:	8e 21       	and	r24, r14
     4f4:	9f 21       	and	r25, r15
     4f6:	a0 23       	and	r26, r16
     4f8:	b1 23       	and	r27, r17
     4fa:	ee 24       	eor	r14, r14
     4fc:	ff 24       	eor	r15, r15
     4fe:	87 01       	movw	r16, r14
     500:	e3 94       	inc	r14
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	a1 05       	cpc	r26, r1
     506:	b1 05       	cpc	r27, r1
     508:	19 f4       	brne	.+6      	; 0x510 <_fpadd_parts+0x10e>
     50a:	ee 24       	eor	r14, r14
     50c:	ff 24       	eor	r15, r15
     50e:	87 01       	movw	r16, r14
     510:	e6 28       	or	r14, r6
     512:	f7 28       	or	r15, r7
     514:	08 29       	or	r16, r8
     516:	19 29       	or	r17, r9
     518:	3c c0       	rjmp	.+120    	; 0x592 <_fpadd_parts+0x190>
     51a:	00 97       	sbiw	r24, 0x00	; 0
     51c:	d1 f1       	breq	.+116    	; 0x592 <_fpadd_parts+0x190>
     51e:	ca 0c       	add	r12, r10
     520:	db 1c       	adc	r13, r11
     522:	39 01       	movw	r6, r18
     524:	4a 01       	movw	r8, r20
     526:	0a 2c       	mov	r0, r10
     528:	04 c0       	rjmp	.+8      	; 0x532 <_fpadd_parts+0x130>
     52a:	96 94       	lsr	r9
     52c:	87 94       	ror	r8
     52e:	77 94       	ror	r7
     530:	67 94       	ror	r6
     532:	0a 94       	dec	r0
     534:	d2 f7       	brpl	.-12     	; 0x52a <_fpadd_parts+0x128>
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	a0 e0       	ldi	r26, 0x00	; 0
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	0a 2c       	mov	r0, r10
     540:	04 c0       	rjmp	.+8      	; 0x54a <_fpadd_parts+0x148>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	aa 1f       	adc	r26, r26
     548:	bb 1f       	adc	r27, r27
     54a:	0a 94       	dec	r0
     54c:	d2 f7       	brpl	.-12     	; 0x542 <_fpadd_parts+0x140>
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	a1 09       	sbc	r26, r1
     552:	b1 09       	sbc	r27, r1
     554:	82 23       	and	r24, r18
     556:	93 23       	and	r25, r19
     558:	a4 23       	and	r26, r20
     55a:	b5 23       	and	r27, r21
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	00 97       	sbiw	r24, 0x00	; 0
     566:	a1 05       	cpc	r26, r1
     568:	b1 05       	cpc	r27, r1
     56a:	19 f4       	brne	.+6      	; 0x572 <_fpadd_parts+0x170>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	a9 01       	movw	r20, r18
     572:	26 29       	or	r18, r6
     574:	37 29       	or	r19, r7
     576:	48 29       	or	r20, r8
     578:	59 29       	or	r21, r9
     57a:	0b c0       	rjmp	.+22     	; 0x592 <_fpadd_parts+0x190>
     57c:	6c 14       	cp	r6, r12
     57e:	7d 04       	cpc	r7, r13
     580:	24 f4       	brge	.+8      	; 0x58a <_fpadd_parts+0x188>
     582:	ee 24       	eor	r14, r14
     584:	ff 24       	eor	r15, r15
     586:	87 01       	movw	r16, r14
     588:	04 c0       	rjmp	.+8      	; 0x592 <_fpadd_parts+0x190>
     58a:	63 01       	movw	r12, r6
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	a9 01       	movw	r20, r18
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	fb 01       	movw	r30, r22
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	89 17       	cp	r24, r25
     59a:	09 f4       	brne	.+2      	; 0x59e <_fpadd_parts+0x19c>
     59c:	45 c0       	rjmp	.+138    	; 0x628 <_fpadd_parts+0x226>
     59e:	88 23       	and	r24, r24
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <_fpadd_parts+0x1b2>
     5a2:	d8 01       	movw	r26, r16
     5a4:	c7 01       	movw	r24, r14
     5a6:	82 1b       	sub	r24, r18
     5a8:	93 0b       	sbc	r25, r19
     5aa:	a4 0b       	sbc	r26, r20
     5ac:	b5 0b       	sbc	r27, r21
     5ae:	9c 01       	movw	r18, r24
     5b0:	ad 01       	movw	r20, r26
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <_fpadd_parts+0x1ba>
     5b4:	2e 19       	sub	r18, r14
     5b6:	3f 09       	sbc	r19, r15
     5b8:	40 0b       	sbc	r20, r16
     5ba:	51 0b       	sbc	r21, r17
     5bc:	57 fd       	sbrc	r21, 7
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <_fpadd_parts+0x1c6>
     5c0:	19 82       	std	Y+1, r1	; 0x01
     5c2:	db 82       	std	Y+3, r13	; 0x03
     5c4:	ca 82       	std	Y+2, r12	; 0x02
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <_fpadd_parts+0x1dc>
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	db 82       	std	Y+3, r13	; 0x03
     5ce:	ca 82       	std	Y+2, r12	; 0x02
     5d0:	50 95       	com	r21
     5d2:	40 95       	com	r20
     5d4:	30 95       	com	r19
     5d6:	21 95       	neg	r18
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
     5da:	4f 4f       	sbci	r20, 0xFF	; 255
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	2c 83       	std	Y+4, r18	; 0x04
     5e0:	3d 83       	std	Y+5, r19	; 0x05
     5e2:	4e 83       	std	Y+6, r20	; 0x06
     5e4:	5f 83       	std	Y+7, r21	; 0x07
     5e6:	0d c0       	rjmp	.+26     	; 0x602 <_fpadd_parts+0x200>
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	aa 1f       	adc	r26, r26
     5ee:	bb 1f       	adc	r27, r27
     5f0:	8c 83       	std	Y+4, r24	; 0x04
     5f2:	9d 83       	std	Y+5, r25	; 0x05
     5f4:	ae 83       	std	Y+6, r26	; 0x06
     5f6:	bf 83       	std	Y+7, r27	; 0x07
     5f8:	8a 81       	ldd	r24, Y+2	; 0x02
     5fa:	9b 81       	ldd	r25, Y+3	; 0x03
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	9b 83       	std	Y+3, r25	; 0x03
     600:	8a 83       	std	Y+2, r24	; 0x02
     602:	8c 81       	ldd	r24, Y+4	; 0x04
     604:	9d 81       	ldd	r25, Y+5	; 0x05
     606:	ae 81       	ldd	r26, Y+6	; 0x06
     608:	bf 81       	ldd	r27, Y+7	; 0x07
     60a:	9c 01       	movw	r18, r24
     60c:	ad 01       	movw	r20, r26
     60e:	21 50       	subi	r18, 0x01	; 1
     610:	30 40       	sbci	r19, 0x00	; 0
     612:	40 40       	sbci	r20, 0x00	; 0
     614:	50 40       	sbci	r21, 0x00	; 0
     616:	2f 3f       	cpi	r18, 0xFF	; 255
     618:	ef ef       	ldi	r30, 0xFF	; 255
     61a:	3e 07       	cpc	r19, r30
     61c:	ef ef       	ldi	r30, 0xFF	; 255
     61e:	4e 07       	cpc	r20, r30
     620:	ef e3       	ldi	r30, 0x3F	; 63
     622:	5e 07       	cpc	r21, r30
     624:	08 f3       	brcs	.-62     	; 0x5e8 <_fpadd_parts+0x1e6>
     626:	0b c0       	rjmp	.+22     	; 0x63e <_fpadd_parts+0x23c>
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	db 82       	std	Y+3, r13	; 0x03
     62c:	ca 82       	std	Y+2, r12	; 0x02
     62e:	2e 0d       	add	r18, r14
     630:	3f 1d       	adc	r19, r15
     632:	40 1f       	adc	r20, r16
     634:	51 1f       	adc	r21, r17
     636:	2c 83       	std	Y+4, r18	; 0x04
     638:	3d 83       	std	Y+5, r19	; 0x05
     63a:	4e 83       	std	Y+6, r20	; 0x06
     63c:	5f 83       	std	Y+7, r21	; 0x07
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	88 83       	st	Y, r24
     642:	2c 81       	ldd	r18, Y+4	; 0x04
     644:	3d 81       	ldd	r19, Y+5	; 0x05
     646:	4e 81       	ldd	r20, Y+6	; 0x06
     648:	5f 81       	ldd	r21, Y+7	; 0x07
     64a:	57 ff       	sbrs	r21, 7
     64c:	1d c0       	rjmp	.+58     	; 0x688 <_fpadd_parts+0x286>
     64e:	da 01       	movw	r26, r20
     650:	c9 01       	movw	r24, r18
     652:	81 70       	andi	r24, 0x01	; 1
     654:	90 70       	andi	r25, 0x00	; 0
     656:	a0 70       	andi	r26, 0x00	; 0
     658:	b0 70       	andi	r27, 0x00	; 0
     65a:	56 95       	lsr	r21
     65c:	47 95       	ror	r20
     65e:	37 95       	ror	r19
     660:	27 95       	ror	r18
     662:	82 2b       	or	r24, r18
     664:	93 2b       	or	r25, r19
     666:	a4 2b       	or	r26, r20
     668:	b5 2b       	or	r27, r21
     66a:	8c 83       	std	Y+4, r24	; 0x04
     66c:	9d 83       	std	Y+5, r25	; 0x05
     66e:	ae 83       	std	Y+6, r26	; 0x06
     670:	bf 83       	std	Y+7, r27	; 0x07
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	9b 81       	ldd	r25, Y+3	; 0x03
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	9b 83       	std	Y+3, r25	; 0x03
     67a:	8a 83       	std	Y+2, r24	; 0x02
     67c:	05 c0       	rjmp	.+10     	; 0x688 <_fpadd_parts+0x286>
     67e:	eb e0       	ldi	r30, 0x0B	; 11
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	03 c0       	rjmp	.+6      	; 0x68a <_fpadd_parts+0x288>
     684:	fb 01       	movw	r30, r22
     686:	01 c0       	rjmp	.+2      	; 0x68a <_fpadd_parts+0x288>
     688:	fe 01       	movw	r30, r28
     68a:	cf 01       	movw	r24, r30
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	ee e0       	ldi	r30, 0x0E	; 14
     692:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__epilogue_restores__+0x8>

00000696 <__addsf3>:
     696:	a0 e2       	ldi	r26, 0x20	; 32
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__prologue_saves__+0x18>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	2d 83       	std	Y+5, r18	; 0x05
     6ac:	3e 83       	std	Y+6, r19	; 0x06
     6ae:	4f 83       	std	Y+7, r20	; 0x07
     6b0:	58 87       	std	Y+8, r21	; 0x08
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	e8 2e       	mov	r14, r24
     6b6:	f1 2c       	mov	r15, r1
     6b8:	ec 0e       	add	r14, r28
     6ba:	fd 1e       	adc	r15, r29
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	b7 01       	movw	r22, r14
     6c2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5e       	subi	r16, 0xEF	; 239
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	05 96       	adiw	r24, 0x05	; 5
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     6d6:	c7 01       	movw	r24, r14
     6d8:	b8 01       	movw	r22, r16
     6da:	ae 01       	movw	r20, r28
     6dc:	47 5e       	subi	r20, 0xE7	; 231
     6de:	5f 4f       	sbci	r21, 0xFF	; 255
     6e0:	0e 94 01 02 	call	0x402	; 0x402 <_fpadd_parts>
     6e4:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     6e8:	a0 96       	adiw	r28, 0x20	; 32
     6ea:	e6 e0       	ldi	r30, 0x06	; 6
     6ec:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__epilogue_restores__+0x18>

000006f0 <__subsf3>:
     6f0:	a0 e2       	ldi	r26, 0x20	; 32
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	ee e7       	ldi	r30, 0x7E	; 126
     6f6:	f3 e0       	ldi	r31, 0x03	; 3
     6f8:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__prologue_saves__+0x18>
     6fc:	69 83       	std	Y+1, r22	; 0x01
     6fe:	7a 83       	std	Y+2, r23	; 0x02
     700:	8b 83       	std	Y+3, r24	; 0x03
     702:	9c 83       	std	Y+4, r25	; 0x04
     704:	2d 83       	std	Y+5, r18	; 0x05
     706:	3e 83       	std	Y+6, r19	; 0x06
     708:	4f 83       	std	Y+7, r20	; 0x07
     70a:	58 87       	std	Y+8, r21	; 0x08
     70c:	8e 01       	movw	r16, r28
     70e:	07 5f       	subi	r16, 0xF7	; 247
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	b8 01       	movw	r22, r16
     718:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     71c:	91 e1       	ldi	r25, 0x11	; 17
     71e:	e9 2e       	mov	r14, r25
     720:	f1 2c       	mov	r15, r1
     722:	ec 0e       	add	r14, r28
     724:	fd 1e       	adc	r15, r29
     726:	ce 01       	movw	r24, r28
     728:	05 96       	adiw	r24, 0x05	; 5
     72a:	b7 01       	movw	r22, r14
     72c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     730:	8a 89       	ldd	r24, Y+18	; 0x12
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	89 27       	eor	r24, r25
     736:	8a 8b       	std	Y+18, r24	; 0x12
     738:	c8 01       	movw	r24, r16
     73a:	b7 01       	movw	r22, r14
     73c:	ae 01       	movw	r20, r28
     73e:	47 5e       	subi	r20, 0xE7	; 231
     740:	5f 4f       	sbci	r21, 0xFF	; 255
     742:	0e 94 01 02 	call	0x402	; 0x402 <_fpadd_parts>
     746:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     74a:	a0 96       	adiw	r28, 0x20	; 32
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__epilogue_restores__+0x18>

00000752 <__mulsf3>:
     752:	a0 e2       	ldi	r26, 0x20	; 32
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__prologue_saves__>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	be 01       	movw	r22, r28
     774:	67 5f       	subi	r22, 0xF7	; 247
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     77c:	ce 01       	movw	r24, r28
     77e:	05 96       	adiw	r24, 0x05	; 5
     780:	be 01       	movw	r22, r28
     782:	6f 5e       	subi	r22, 0xEF	; 239
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     78a:	99 85       	ldd	r25, Y+9	; 0x09
     78c:	92 30       	cpi	r25, 0x02	; 2
     78e:	78 f0       	brcs	.+30     	; 0x7ae <__mulsf3+0x5c>
     790:	89 89       	ldd	r24, Y+17	; 0x11
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	c0 f0       	brcs	.+48     	; 0x7c6 <__mulsf3+0x74>
     796:	94 30       	cpi	r25, 0x04	; 4
     798:	19 f4       	brne	.+6      	; 0x7a0 <__mulsf3+0x4e>
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	41 f4       	brne	.+16     	; 0x7ae <__mulsf3+0x5c>
     79e:	cb c0       	rjmp	.+406    	; 0x936 <__mulsf3+0x1e4>
     7a0:	84 30       	cpi	r24, 0x04	; 4
     7a2:	19 f4       	brne	.+6      	; 0x7aa <__mulsf3+0x58>
     7a4:	92 30       	cpi	r25, 0x02	; 2
     7a6:	79 f4       	brne	.+30     	; 0x7c6 <__mulsf3+0x74>
     7a8:	c6 c0       	rjmp	.+396    	; 0x936 <__mulsf3+0x1e4>
     7aa:	92 30       	cpi	r25, 0x02	; 2
     7ac:	51 f4       	brne	.+20     	; 0x7c2 <__mulsf3+0x70>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	2a 85       	ldd	r18, Y+10	; 0x0a
     7b2:	9a 89       	ldd	r25, Y+18	; 0x12
     7b4:	29 17       	cp	r18, r25
     7b6:	09 f4       	brne	.+2      	; 0x7ba <__mulsf3+0x68>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	8a 87       	std	Y+10, r24	; 0x0a
     7bc:	ce 01       	movw	r24, r28
     7be:	09 96       	adiw	r24, 0x09	; 9
     7c0:	bc c0       	rjmp	.+376    	; 0x93a <__mulsf3+0x1e8>
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	51 f4       	brne	.+20     	; 0x7da <__mulsf3+0x88>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	2a 85       	ldd	r18, Y+10	; 0x0a
     7ca:	9a 89       	ldd	r25, Y+18	; 0x12
     7cc:	29 17       	cp	r18, r25
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <__mulsf3+0x80>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	8a 8b       	std	Y+18, r24	; 0x12
     7d4:	ce 01       	movw	r24, r28
     7d6:	41 96       	adiw	r24, 0x11	; 17
     7d8:	b0 c0       	rjmp	.+352    	; 0x93a <__mulsf3+0x1e8>
     7da:	6d 84       	ldd	r6, Y+13	; 0x0d
     7dc:	7e 84       	ldd	r7, Y+14	; 0x0e
     7de:	8f 84       	ldd	r8, Y+15	; 0x0f
     7e0:	98 88       	ldd	r9, Y+16	; 0x10
     7e2:	ed 88       	ldd	r14, Y+21	; 0x15
     7e4:	fe 88       	ldd	r15, Y+22	; 0x16
     7e6:	0f 89       	ldd	r16, Y+23	; 0x17
     7e8:	18 8d       	ldd	r17, Y+24	; 0x18
     7ea:	e0 e2       	ldi	r30, 0x20	; 32
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	dc 01       	movw	r26, r24
     7f4:	aa 24       	eor	r10, r10
     7f6:	bb 24       	eor	r11, r11
     7f8:	65 01       	movw	r12, r10
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	a9 01       	movw	r20, r18
     800:	b3 01       	movw	r22, r6
     802:	61 70       	andi	r22, 0x01	; 1
     804:	70 70       	andi	r23, 0x00	; 0
     806:	61 15       	cp	r22, r1
     808:	71 05       	cpc	r23, r1
     80a:	d1 f0       	breq	.+52     	; 0x840 <__mulsf3+0xee>
     80c:	2e 0d       	add	r18, r14
     80e:	3f 1d       	adc	r19, r15
     810:	40 1f       	adc	r20, r16
     812:	51 1f       	adc	r21, r17
     814:	15 01       	movw	r2, r10
     816:	26 01       	movw	r4, r12
     818:	28 0e       	add	r2, r24
     81a:	39 1e       	adc	r3, r25
     81c:	4a 1e       	adc	r4, r26
     81e:	5b 1e       	adc	r5, r27
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	a0 e0       	ldi	r26, 0x00	; 0
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	2e 15       	cp	r18, r14
     82a:	3f 05       	cpc	r19, r15
     82c:	40 07       	cpc	r20, r16
     82e:	51 07       	cpc	r21, r17
     830:	18 f0       	brcs	.+6      	; 0x838 <__mulsf3+0xe6>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	dc 01       	movw	r26, r24
     838:	82 0d       	add	r24, r2
     83a:	93 1d       	adc	r25, r3
     83c:	a4 1d       	adc	r26, r4
     83e:	b5 1d       	adc	r27, r5
     840:	aa 0c       	add	r10, r10
     842:	bb 1c       	adc	r11, r11
     844:	cc 1c       	adc	r12, r12
     846:	dd 1c       	adc	r13, r13
     848:	17 ff       	sbrs	r17, 7
     84a:	09 c0       	rjmp	.+18     	; 0x85e <__mulsf3+0x10c>
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	26 2e       	mov	r2, r22
     850:	31 2c       	mov	r3, r1
     852:	41 2c       	mov	r4, r1
     854:	51 2c       	mov	r5, r1
     856:	a2 28       	or	r10, r2
     858:	b3 28       	or	r11, r3
     85a:	c4 28       	or	r12, r4
     85c:	d5 28       	or	r13, r5
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	49 f0       	breq	.+18     	; 0x874 <__mulsf3+0x122>
     862:	ee 0c       	add	r14, r14
     864:	ff 1c       	adc	r15, r15
     866:	00 1f       	adc	r16, r16
     868:	11 1f       	adc	r17, r17
     86a:	96 94       	lsr	r9
     86c:	87 94       	ror	r8
     86e:	77 94       	ror	r7
     870:	67 94       	ror	r6
     872:	c6 cf       	rjmp	.-116    	; 0x800 <__mulsf3+0xae>
     874:	6b 89       	ldd	r22, Y+19	; 0x13
     876:	7c 89       	ldd	r23, Y+20	; 0x14
     878:	eb 85       	ldd	r30, Y+11	; 0x0b
     87a:	fc 85       	ldd	r31, Y+12	; 0x0c
     87c:	6e 0f       	add	r22, r30
     87e:	7f 1f       	adc	r23, r31
     880:	6e 5f       	subi	r22, 0xFE	; 254
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	7c 8f       	std	Y+28, r23	; 0x1c
     886:	6b 8f       	std	Y+27, r22	; 0x1b
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	ea 85       	ldd	r30, Y+10	; 0x0a
     88c:	7a 89       	ldd	r23, Y+18	; 0x12
     88e:	e7 17       	cp	r30, r23
     890:	09 f4       	brne	.+2      	; 0x894 <__mulsf3+0x142>
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	6a 8f       	std	Y+26, r22	; 0x1a
     896:	6b 8d       	ldd	r22, Y+27	; 0x1b
     898:	7c 8d       	ldd	r23, Y+28	; 0x1c
     89a:	10 c0       	rjmp	.+32     	; 0x8bc <__mulsf3+0x16a>
     89c:	fc 01       	movw	r30, r24
     89e:	e1 70       	andi	r30, 0x01	; 1
     8a0:	f0 70       	andi	r31, 0x00	; 0
     8a2:	30 97       	sbiw	r30, 0x00	; 0
     8a4:	29 f0       	breq	.+10     	; 0x8b0 <__mulsf3+0x15e>
     8a6:	56 95       	lsr	r21
     8a8:	47 95       	ror	r20
     8aa:	37 95       	ror	r19
     8ac:	27 95       	ror	r18
     8ae:	50 68       	ori	r21, 0x80	; 128
     8b0:	b6 95       	lsr	r27
     8b2:	a7 95       	ror	r26
     8b4:	97 95       	ror	r25
     8b6:	87 95       	ror	r24
     8b8:	6f 5f       	subi	r22, 0xFF	; 255
     8ba:	7f 4f       	sbci	r23, 0xFF	; 255
     8bc:	b7 fd       	sbrc	r27, 7
     8be:	ee cf       	rjmp	.-36     	; 0x89c <__mulsf3+0x14a>
     8c0:	0c c0       	rjmp	.+24     	; 0x8da <__mulsf3+0x188>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	57 fd       	sbrc	r21, 7
     8cc:	81 60       	ori	r24, 0x01	; 1
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	44 1f       	adc	r20, r20
     8d4:	55 1f       	adc	r21, r21
     8d6:	61 50       	subi	r22, 0x01	; 1
     8d8:	70 40       	sbci	r23, 0x00	; 0
     8da:	80 30       	cpi	r24, 0x00	; 0
     8dc:	e0 e0       	ldi	r30, 0x00	; 0
     8de:	9e 07       	cpc	r25, r30
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	ae 07       	cpc	r26, r30
     8e4:	e0 e4       	ldi	r30, 0x40	; 64
     8e6:	be 07       	cpc	r27, r30
     8e8:	60 f3       	brcs	.-40     	; 0x8c2 <__mulsf3+0x170>
     8ea:	6b 8f       	std	Y+27, r22	; 0x1b
     8ec:	7c 8f       	std	Y+28, r23	; 0x1c
     8ee:	6f e7       	ldi	r22, 0x7F	; 127
     8f0:	e6 2e       	mov	r14, r22
     8f2:	f1 2c       	mov	r15, r1
     8f4:	01 2d       	mov	r16, r1
     8f6:	11 2d       	mov	r17, r1
     8f8:	e8 22       	and	r14, r24
     8fa:	f9 22       	and	r15, r25
     8fc:	0a 23       	and	r16, r26
     8fe:	1b 23       	and	r17, r27
     900:	60 e4       	ldi	r22, 0x40	; 64
     902:	e6 16       	cp	r14, r22
     904:	f1 04       	cpc	r15, r1
     906:	01 05       	cpc	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	61 f4       	brne	.+24     	; 0x924 <__mulsf3+0x1d2>
     90c:	87 fd       	sbrc	r24, 7
     90e:	0a c0       	rjmp	.+20     	; 0x924 <__mulsf3+0x1d2>
     910:	21 15       	cp	r18, r1
     912:	31 05       	cpc	r19, r1
     914:	41 05       	cpc	r20, r1
     916:	51 05       	cpc	r21, r1
     918:	29 f0       	breq	.+10     	; 0x924 <__mulsf3+0x1d2>
     91a:	80 5c       	subi	r24, 0xC0	; 192
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	af 4f       	sbci	r26, 0xFF	; 255
     920:	bf 4f       	sbci	r27, 0xFF	; 255
     922:	80 78       	andi	r24, 0x80	; 128
     924:	8d 8f       	std	Y+29, r24	; 0x1d
     926:	9e 8f       	std	Y+30, r25	; 0x1e
     928:	af 8f       	std	Y+31, r26	; 0x1f
     92a:	b8 a3       	std	Y+32, r27	; 0x20
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	89 8f       	std	Y+25, r24	; 0x19
     930:	ce 01       	movw	r24, r28
     932:	49 96       	adiw	r24, 0x19	; 25
     934:	02 c0       	rjmp	.+4      	; 0x93a <__mulsf3+0x1e8>
     936:	8b e0       	ldi	r24, 0x0B	; 11
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     93e:	a0 96       	adiw	r28, 0x20	; 32
     940:	e2 e1       	ldi	r30, 0x12	; 18
     942:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__epilogue_restores__>

00000946 <__gesf2>:
     946:	a8 e1       	ldi	r26, 0x18	; 24
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e9 ea       	ldi	r30, 0xA9	; 169
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__prologue_saves__+0x18>
     952:	69 83       	std	Y+1, r22	; 0x01
     954:	7a 83       	std	Y+2, r23	; 0x02
     956:	8b 83       	std	Y+3, r24	; 0x03
     958:	9c 83       	std	Y+4, r25	; 0x04
     95a:	2d 83       	std	Y+5, r18	; 0x05
     95c:	3e 83       	std	Y+6, r19	; 0x06
     95e:	4f 83       	std	Y+7, r20	; 0x07
     960:	58 87       	std	Y+8, r21	; 0x08
     962:	8e 01       	movw	r16, r28
     964:	07 5f       	subi	r16, 0xF7	; 247
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	b8 01       	movw	r22, r16
     96e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     972:	81 e1       	ldi	r24, 0x11	; 17
     974:	e8 2e       	mov	r14, r24
     976:	f1 2c       	mov	r15, r1
     978:	ec 0e       	add	r14, r28
     97a:	fd 1e       	adc	r15, r29
     97c:	ce 01       	movw	r24, r28
     97e:	05 96       	adiw	r24, 0x05	; 5
     980:	b7 01       	movw	r22, r14
     982:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     986:	89 85       	ldd	r24, Y+9	; 0x09
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	40 f0       	brcs	.+16     	; 0x99c <__gesf2+0x56>
     98c:	89 89       	ldd	r24, Y+17	; 0x11
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	28 f0       	brcs	.+10     	; 0x99c <__gesf2+0x56>
     992:	c8 01       	movw	r24, r16
     994:	b7 01       	movw	r22, r14
     996:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fpcmp_parts_f>
     99a:	01 c0       	rjmp	.+2      	; 0x99e <__gesf2+0x58>
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	68 96       	adiw	r28, 0x18	; 24
     9a0:	e6 e0       	ldi	r30, 0x06	; 6
     9a2:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__epilogue_restores__+0x18>

000009a6 <__fixsfsi>:
     9a6:	ac e0       	ldi	r26, 0x0C	; 12
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	e9 ed       	ldi	r30, 0xD9	; 217
     9ac:	f4 e0       	ldi	r31, 0x04	; 4
     9ae:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__prologue_saves__+0x20>
     9b2:	69 83       	std	Y+1, r22	; 0x01
     9b4:	7a 83       	std	Y+2, r23	; 0x02
     9b6:	8b 83       	std	Y+3, r24	; 0x03
     9b8:	9c 83       	std	Y+4, r25	; 0x04
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	be 01       	movw	r22, r28
     9c0:	6b 5f       	subi	r22, 0xFB	; 251
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__unpack_f>
     9c8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	81 f1       	breq	.+96     	; 0xa2e <__fixsfsi+0x88>
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	70 f1       	brcs	.+92     	; 0xa2e <__fixsfsi+0x88>
     9d2:	84 30       	cpi	r24, 0x04	; 4
     9d4:	21 f4       	brne	.+8      	; 0x9de <__fixsfsi+0x38>
     9d6:	8e 81       	ldd	r24, Y+6	; 0x06
     9d8:	88 23       	and	r24, r24
     9da:	69 f1       	breq	.+90     	; 0xa36 <__fixsfsi+0x90>
     9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <__fixsfsi+0x4c>
     9de:	2f 81       	ldd	r18, Y+7	; 0x07
     9e0:	38 85       	ldd	r19, Y+8	; 0x08
     9e2:	37 fd       	sbrc	r19, 7
     9e4:	24 c0       	rjmp	.+72     	; 0xa2e <__fixsfsi+0x88>
     9e6:	6e 81       	ldd	r22, Y+6	; 0x06
     9e8:	2f 31       	cpi	r18, 0x1F	; 31
     9ea:	31 05       	cpc	r19, r1
     9ec:	3c f0       	brlt	.+14     	; 0x9fc <__fixsfsi+0x56>
     9ee:	66 23       	and	r22, r22
     9f0:	11 f1       	breq	.+68     	; 0xa36 <__fixsfsi+0x90>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e8       	ldi	r21, 0x80	; 128
     9fa:	21 c0       	rjmp	.+66     	; 0xa3e <__fixsfsi+0x98>
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	82 1b       	sub	r24, r18
     a02:	93 0b       	sbc	r25, r19
     a04:	29 85       	ldd	r18, Y+9	; 0x09
     a06:	3a 85       	ldd	r19, Y+10	; 0x0a
     a08:	4b 85       	ldd	r20, Y+11	; 0x0b
     a0a:	5c 85       	ldd	r21, Y+12	; 0x0c
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__fixsfsi+0x70>
     a0e:	56 95       	lsr	r21
     a10:	47 95       	ror	r20
     a12:	37 95       	ror	r19
     a14:	27 95       	ror	r18
     a16:	8a 95       	dec	r24
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__fixsfsi+0x68>
     a1a:	66 23       	and	r22, r22
     a1c:	81 f0       	breq	.+32     	; 0xa3e <__fixsfsi+0x98>
     a1e:	50 95       	com	r21
     a20:	40 95       	com	r20
     a22:	30 95       	com	r19
     a24:	21 95       	neg	r18
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	4f 4f       	sbci	r20, 0xFF	; 255
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	08 c0       	rjmp	.+16     	; 0xa3e <__fixsfsi+0x98>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	a9 01       	movw	r20, r18
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__fixsfsi+0x98>
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	3f ef       	ldi	r19, 0xFF	; 255
     a3a:	4f ef       	ldi	r20, 0xFF	; 255
     a3c:	5f e7       	ldi	r21, 0x7F	; 127
     a3e:	b9 01       	movw	r22, r18
     a40:	ca 01       	movw	r24, r20
     a42:	2c 96       	adiw	r28, 0x0c	; 12
     a44:	e2 e0       	ldi	r30, 0x02	; 2
     a46:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__epilogue_restores__+0x20>

00000a4a <__floatunsisf>:
     a4a:	a8 e0       	ldi	r26, 0x08	; 8
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	eb e2       	ldi	r30, 0x2B	; 43
     a50:	f5 e0       	ldi	r31, 0x05	; 5
     a52:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__prologue_saves__+0x14>
     a56:	7b 01       	movw	r14, r22
     a58:	8c 01       	movw	r16, r24
     a5a:	1a 82       	std	Y+2, r1	; 0x02
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x22>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	5f c0       	rjmp	.+190    	; 0xb2a <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3a c0       	rjmp	.+116    	; 0xb06 <__floatunsisf+0xbc>
     a92:	aa 27       	eor	r26, r26
     a94:	bb 27       	eor	r27, r27
     a96:	ae 1b       	sub	r26, r30
     a98:	bf 0b       	sbc	r27, r31
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	0a 2e       	mov	r0, r26
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <__floatunsisf+0x64>
     aa6:	22 0f       	add	r18, r18
     aa8:	33 1f       	adc	r19, r19
     aaa:	44 1f       	adc	r20, r20
     aac:	55 1f       	adc	r21, r21
     aae:	0a 94       	dec	r0
     ab0:	d2 f7       	brpl	.-12     	; 0xaa6 <__floatunsisf+0x5c>
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	30 40       	sbci	r19, 0x00	; 0
     ab6:	40 40       	sbci	r20, 0x00	; 0
     ab8:	50 40       	sbci	r21, 0x00	; 0
     aba:	2e 21       	and	r18, r14
     abc:	3f 21       	and	r19, r15
     abe:	40 23       	and	r20, r16
     ac0:	51 23       	and	r21, r17
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	21 15       	cp	r18, r1
     acc:	31 05       	cpc	r19, r1
     ace:	41 05       	cpc	r20, r1
     ad0:	51 05       	cpc	r21, r1
     ad2:	19 f4       	brne	.+6      	; 0xada <__floatunsisf+0x90>
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	cb 01       	movw	r24, r22
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <__floatunsisf+0x9a>
     adc:	16 95       	lsr	r17
     ade:	07 95       	ror	r16
     ae0:	f7 94       	ror	r15
     ae2:	e7 94       	ror	r14
     ae4:	aa 95       	dec	r26
     ae6:	d2 f7       	brpl	.-12     	; 0xadc <__floatunsisf+0x92>
     ae8:	e6 2a       	or	r14, r22
     aea:	f7 2a       	or	r15, r23
     aec:	08 2b       	or	r16, r24
     aee:	19 2b       	or	r17, r25
     af0:	ed 82       	std	Y+5, r14	; 0x05
     af2:	fe 82       	std	Y+6, r15	; 0x06
     af4:	0f 83       	std	Y+7, r16	; 0x07
     af6:	18 87       	std	Y+8, r17	; 0x08
     af8:	8e e1       	ldi	r24, 0x1E	; 30
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	8e 1b       	sub	r24, r30
     afe:	9f 0b       	sbc	r25, r31
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	12 c0       	rjmp	.+36     	; 0xb2a <__floatunsisf+0xe0>
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	81 f0       	breq	.+32     	; 0xb2a <__floatunsisf+0xe0>
     b0a:	0e 2e       	mov	r0, r30
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__floatunsisf+0xcc>
     b0e:	ee 0c       	add	r14, r14
     b10:	ff 1c       	adc	r15, r15
     b12:	00 1f       	adc	r16, r16
     b14:	11 1f       	adc	r17, r17
     b16:	0a 94       	dec	r0
     b18:	d2 f7       	brpl	.-12     	; 0xb0e <__floatunsisf+0xc4>
     b1a:	ed 82       	std	Y+5, r14	; 0x05
     b1c:	fe 82       	std	Y+6, r15	; 0x06
     b1e:	0f 83       	std	Y+7, r16	; 0x07
     b20:	18 87       	std	Y+8, r17	; 0x08
     b22:	ce 1a       	sub	r12, r30
     b24:	df 0a       	sbc	r13, r31
     b26:	dc 82       	std	Y+4, r13	; 0x04
     b28:	cb 82       	std	Y+3, r12	; 0x03
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     b32:	28 96       	adiw	r28, 0x08	; 8
     b34:	e8 e0       	ldi	r30, 0x08	; 8
     b36:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__epilogue_restores__+0x14>

00000b3a <__clzsi2>:
     b3a:	af 92       	push	r10
     b3c:	bf 92       	push	r11
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	7b 01       	movw	r14, r22
     b4c:	8c 01       	movw	r16, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	e8 16       	cp	r14, r24
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	f8 06       	cpc	r15, r24
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	08 07       	cpc	r16, r24
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	18 07       	cpc	r17, r24
     b5e:	58 f4       	brcc	.+22     	; 0xb76 <__clzsi2+0x3c>
     b60:	ef ef       	ldi	r30, 0xFF	; 255
     b62:	ee 16       	cp	r14, r30
     b64:	f1 04       	cpc	r15, r1
     b66:	01 05       	cpc	r16, r1
     b68:	11 05       	cpc	r17, r1
     b6a:	09 f0       	breq	.+2      	; 0xb6e <__clzsi2+0x34>
     b6c:	90 f4       	brcc	.+36     	; 0xb92 <__clzsi2+0x58>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	dc 01       	movw	r26, r24
     b74:	17 c0       	rjmp	.+46     	; 0xba4 <__clzsi2+0x6a>
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	ef 16       	cp	r14, r31
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	ff 06       	cpc	r15, r31
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	0f 07       	cpc	r16, r31
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	1f 07       	cpc	r17, r31
     b86:	50 f4       	brcc	.+20     	; 0xb9c <__clzsi2+0x62>
     b88:	80 e1       	ldi	r24, 0x10	; 16
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	09 c0       	rjmp	.+18     	; 0xba4 <__clzsi2+0x6a>
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__clzsi2+0x6a>
     b9c:	88 e1       	ldi	r24, 0x18	; 24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a0 e0       	ldi	r26, 0x00	; 0
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	20 e2       	ldi	r18, 0x20	; 32
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	28 1b       	sub	r18, r24
     bae:	39 0b       	sbc	r19, r25
     bb0:	4a 0b       	sbc	r20, r26
     bb2:	5b 0b       	sbc	r21, r27
     bb4:	57 01       	movw	r10, r14
     bb6:	68 01       	movw	r12, r16
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <__clzsi2+0x88>
     bba:	d6 94       	lsr	r13
     bbc:	c7 94       	ror	r12
     bbe:	b7 94       	ror	r11
     bc0:	a7 94       	ror	r10
     bc2:	8a 95       	dec	r24
     bc4:	d2 f7       	brpl	.-12     	; 0xbba <__clzsi2+0x80>
     bc6:	d6 01       	movw	r26, r12
     bc8:	c5 01       	movw	r24, r10
     bca:	8d 5e       	subi	r24, 0xED	; 237
     bcc:	9e 4f       	sbci	r25, 0xFE	; 254
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	28 1b       	sub	r18, r24
     bd4:	31 09       	sbc	r19, r1
     bd6:	41 09       	sbc	r20, r1
     bd8:	51 09       	sbc	r21, r1
     bda:	c9 01       	movw	r24, r18
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	08 95       	ret

00000bee <__pack_f>:
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	fc 01       	movw	r30, r24
     bfc:	24 81       	ldd	r18, Z+4	; 0x04
     bfe:	35 81       	ldd	r19, Z+5	; 0x05
     c00:	46 81       	ldd	r20, Z+6	; 0x06
     c02:	57 81       	ldd	r21, Z+7	; 0x07
     c04:	61 81       	ldd	r22, Z+1	; 0x01
     c06:	80 81       	ld	r24, Z
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	20 f4       	brcc	.+8      	; 0xc14 <__pack_f+0x26>
     c0c:	40 61       	ori	r20, 0x10	; 16
     c0e:	ef ef       	ldi	r30, 0xFF	; 255
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	a3 c0       	rjmp	.+326    	; 0xd5a <__pack_f+0x16c>
     c14:	84 30       	cpi	r24, 0x04	; 4
     c16:	09 f4       	brne	.+2      	; 0xc1a <__pack_f+0x2c>
     c18:	9b c0       	rjmp	.+310    	; 0xd50 <__pack_f+0x162>
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	09 f4       	brne	.+2      	; 0xc20 <__pack_f+0x32>
     c1e:	92 c0       	rjmp	.+292    	; 0xd44 <__pack_f+0x156>
     c20:	21 15       	cp	r18, r1
     c22:	31 05       	cpc	r19, r1
     c24:	41 05       	cpc	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <__pack_f+0x3e>
     c2a:	8f c0       	rjmp	.+286    	; 0xd4a <__pack_f+0x15c>
     c2c:	02 80       	ldd	r0, Z+2	; 0x02
     c2e:	f3 81       	ldd	r31, Z+3	; 0x03
     c30:	e0 2d       	mov	r30, r0
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	e2 38       	cpi	r30, 0x82	; 130
     c36:	f8 07       	cpc	r31, r24
     c38:	0c f0       	brlt	.+2      	; 0xc3c <__pack_f+0x4e>
     c3a:	5a c0       	rjmp	.+180    	; 0xcf0 <__pack_f+0x102>
     c3c:	c2 e8       	ldi	r28, 0x82	; 130
     c3e:	df ef       	ldi	r29, 0xFF	; 255
     c40:	ce 1b       	sub	r28, r30
     c42:	df 0b       	sbc	r29, r31
     c44:	ca 31       	cpi	r28, 0x1A	; 26
     c46:	d1 05       	cpc	r29, r1
     c48:	6c f5       	brge	.+90     	; 0xca4 <__pack_f+0xb6>
     c4a:	79 01       	movw	r14, r18
     c4c:	8a 01       	movw	r16, r20
     c4e:	0c 2e       	mov	r0, r28
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <__pack_f+0x6c>
     c52:	16 95       	lsr	r17
     c54:	07 95       	ror	r16
     c56:	f7 94       	ror	r15
     c58:	e7 94       	ror	r14
     c5a:	0a 94       	dec	r0
     c5c:	d2 f7       	brpl	.-12     	; 0xc52 <__pack_f+0x64>
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	0c 2e       	mov	r0, r28
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <__pack_f+0x84>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	aa 1f       	adc	r26, r26
     c70:	bb 1f       	adc	r27, r27
     c72:	0a 94       	dec	r0
     c74:	d2 f7       	brpl	.-12     	; 0xc6a <__pack_f+0x7c>
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	a1 09       	sbc	r26, r1
     c7a:	b1 09       	sbc	r27, r1
     c7c:	82 23       	and	r24, r18
     c7e:	93 23       	and	r25, r19
     c80:	a4 23       	and	r26, r20
     c82:	b5 23       	and	r27, r21
     c84:	21 e0       	ldi	r18, 0x01	; 1
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	a1 05       	cpc	r26, r1
     c90:	b1 05       	cpc	r27, r1
     c92:	19 f4       	brne	.+6      	; 0xc9a <__pack_f+0xac>
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	a9 01       	movw	r20, r18
     c9a:	2e 29       	or	r18, r14
     c9c:	3f 29       	or	r19, r15
     c9e:	40 2b       	or	r20, r16
     ca0:	51 2b       	or	r21, r17
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <__pack_f+0xbc>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	a9 01       	movw	r20, r18
     caa:	da 01       	movw	r26, r20
     cac:	c9 01       	movw	r24, r18
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	90 70       	andi	r25, 0x00	; 0
     cb2:	a0 70       	andi	r26, 0x00	; 0
     cb4:	b0 70       	andi	r27, 0x00	; 0
     cb6:	80 34       	cpi	r24, 0x40	; 64
     cb8:	91 05       	cpc	r25, r1
     cba:	a1 05       	cpc	r26, r1
     cbc:	b1 05       	cpc	r27, r1
     cbe:	39 f4       	brne	.+14     	; 0xcce <__pack_f+0xe0>
     cc0:	27 ff       	sbrs	r18, 7
     cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <__pack_f+0xe8>
     cc4:	20 5c       	subi	r18, 0xC0	; 192
     cc6:	3f 4f       	sbci	r19, 0xFF	; 255
     cc8:	4f 4f       	sbci	r20, 0xFF	; 255
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <__pack_f+0xe8>
     cce:	21 5c       	subi	r18, 0xC1	; 193
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	4f 4f       	sbci	r20, 0xFF	; 255
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	e1 e0       	ldi	r30, 0x01	; 1
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	20 30       	cpi	r18, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	38 07       	cpc	r19, r24
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	48 07       	cpc	r20, r24
     ce4:	80 e4       	ldi	r24, 0x40	; 64
     ce6:	58 07       	cpc	r21, r24
     ce8:	28 f5       	brcc	.+74     	; 0xd34 <__pack_f+0x146>
     cea:	e0 e0       	ldi	r30, 0x00	; 0
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	22 c0       	rjmp	.+68     	; 0xd34 <__pack_f+0x146>
     cf0:	e0 38       	cpi	r30, 0x80	; 128
     cf2:	f1 05       	cpc	r31, r1
     cf4:	6c f5       	brge	.+90     	; 0xd50 <__pack_f+0x162>
     cf6:	e1 58       	subi	r30, 0x81	; 129
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	da 01       	movw	r26, r20
     cfc:	c9 01       	movw	r24, r18
     cfe:	8f 77       	andi	r24, 0x7F	; 127
     d00:	90 70       	andi	r25, 0x00	; 0
     d02:	a0 70       	andi	r26, 0x00	; 0
     d04:	b0 70       	andi	r27, 0x00	; 0
     d06:	80 34       	cpi	r24, 0x40	; 64
     d08:	91 05       	cpc	r25, r1
     d0a:	a1 05       	cpc	r26, r1
     d0c:	b1 05       	cpc	r27, r1
     d0e:	39 f4       	brne	.+14     	; 0xd1e <__pack_f+0x130>
     d10:	27 ff       	sbrs	r18, 7
     d12:	09 c0       	rjmp	.+18     	; 0xd26 <__pack_f+0x138>
     d14:	20 5c       	subi	r18, 0xC0	; 192
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	4f 4f       	sbci	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__pack_f+0x138>
     d1e:	21 5c       	subi	r18, 0xC1	; 193
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	4f 4f       	sbci	r20, 0xFF	; 255
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	57 ff       	sbrs	r21, 7
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <__pack_f+0x146>
     d2a:	56 95       	lsr	r21
     d2c:	47 95       	ror	r20
     d2e:	37 95       	ror	r19
     d30:	27 95       	ror	r18
     d32:	31 96       	adiw	r30, 0x01	; 1
     d34:	87 e0       	ldi	r24, 0x07	; 7
     d36:	56 95       	lsr	r21
     d38:	47 95       	ror	r20
     d3a:	37 95       	ror	r19
     d3c:	27 95       	ror	r18
     d3e:	8a 95       	dec	r24
     d40:	d1 f7       	brne	.-12     	; 0xd36 <__pack_f+0x148>
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <__pack_f+0x16c>
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <__pack_f+0x166>
     d4a:	e0 e0       	ldi	r30, 0x00	; 0
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <__pack_f+0x16c>
     d50:	ef ef       	ldi	r30, 0xFF	; 255
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	a9 01       	movw	r20, r18
     d5a:	8e 2f       	mov	r24, r30
     d5c:	87 95       	ror	r24
     d5e:	88 27       	eor	r24, r24
     d60:	87 95       	ror	r24
     d62:	94 2f       	mov	r25, r20
     d64:	9f 77       	andi	r25, 0x7F	; 127
     d66:	67 95       	ror	r22
     d68:	66 27       	eor	r22, r22
     d6a:	67 95       	ror	r22
     d6c:	e6 95       	lsr	r30
     d6e:	e2 2e       	mov	r14, r18
     d70:	a9 2f       	mov	r26, r25
     d72:	a8 2b       	or	r26, r24
     d74:	fe 2f       	mov	r31, r30
     d76:	f6 2b       	or	r31, r22
     d78:	62 2f       	mov	r22, r18
     d7a:	73 2f       	mov	r23, r19
     d7c:	8a 2f       	mov	r24, r26
     d7e:	9f 2f       	mov	r25, r31
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	e6 e0       	ldi	r30, 0x06	; 6
     d86:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__epilogue_restores__+0x18>

00000d8a <__unpack_f>:
     d8a:	dc 01       	movw	r26, r24
     d8c:	fb 01       	movw	r30, r22
     d8e:	2c 91       	ld	r18, X
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	3c 91       	ld	r19, X
     d94:	11 97       	sbiw	r26, 0x01	; 1
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	8c 91       	ld	r24, X
     d9a:	12 97       	sbiw	r26, 0x02	; 2
     d9c:	48 2f       	mov	r20, r24
     d9e:	4f 77       	andi	r20, 0x7F	; 127
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	98 2f       	mov	r25, r24
     da4:	99 1f       	adc	r25, r25
     da6:	99 27       	eor	r25, r25
     da8:	99 1f       	adc	r25, r25
     daa:	13 96       	adiw	r26, 0x03	; 3
     dac:	6c 91       	ld	r22, X
     dae:	13 97       	sbiw	r26, 0x03	; 3
     db0:	86 2f       	mov	r24, r22
     db2:	88 0f       	add	r24, r24
     db4:	89 2b       	or	r24, r25
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	66 1f       	adc	r22, r22
     dba:	66 27       	eor	r22, r22
     dbc:	66 1f       	adc	r22, r22
     dbe:	61 83       	std	Z+1, r22	; 0x01
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	39 f5       	brne	.+78     	; 0xe12 <__unpack_f+0x88>
     dc4:	21 15       	cp	r18, r1
     dc6:	31 05       	cpc	r19, r1
     dc8:	41 05       	cpc	r20, r1
     dca:	51 05       	cpc	r21, r1
     dcc:	11 f4       	brne	.+4      	; 0xdd2 <__unpack_f+0x48>
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	29 c0       	rjmp	.+82     	; 0xe24 <__unpack_f+0x9a>
     dd2:	82 e8       	ldi	r24, 0x82	; 130
     dd4:	9f ef       	ldi	r25, 0xFF	; 255
     dd6:	93 83       	std	Z+3, r25	; 0x03
     dd8:	82 83       	std	Z+2, r24	; 0x02
     dda:	67 e0       	ldi	r22, 0x07	; 7
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	6a 95       	dec	r22
     de6:	d1 f7       	brne	.-12     	; 0xddc <__unpack_f+0x52>
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	80 83       	st	Z, r24
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <__unpack_f+0x76>
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	44 1f       	adc	r20, r20
     df4:	55 1f       	adc	r21, r21
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	93 83       	std	Z+3, r25	; 0x03
     dfe:	82 83       	std	Z+2, r24	; 0x02
     e00:	20 30       	cpi	r18, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	38 07       	cpc	r19, r24
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	48 07       	cpc	r20, r24
     e0a:	80 e4       	ldi	r24, 0x40	; 64
     e0c:	58 07       	cpc	r21, r24
     e0e:	78 f3       	brcs	.-34     	; 0xdee <__unpack_f+0x64>
     e10:	20 c0       	rjmp	.+64     	; 0xe52 <__unpack_f+0xc8>
     e12:	8f 3f       	cpi	r24, 0xFF	; 255
     e14:	91 05       	cpc	r25, r1
     e16:	79 f4       	brne	.+30     	; 0xe36 <__unpack_f+0xac>
     e18:	21 15       	cp	r18, r1
     e1a:	31 05       	cpc	r19, r1
     e1c:	41 05       	cpc	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	19 f4       	brne	.+6      	; 0xe28 <__unpack_f+0x9e>
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	80 83       	st	Z, r24
     e26:	08 95       	ret
     e28:	44 ff       	sbrs	r20, 4
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <__unpack_f+0xa8>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 83       	st	Z, r24
     e30:	10 c0       	rjmp	.+32     	; 0xe52 <__unpack_f+0xc8>
     e32:	10 82       	st	Z, r1
     e34:	0e c0       	rjmp	.+28     	; 0xe52 <__unpack_f+0xc8>
     e36:	8f 57       	subi	r24, 0x7F	; 127
     e38:	90 40       	sbci	r25, 0x00	; 0
     e3a:	93 83       	std	Z+3, r25	; 0x03
     e3c:	82 83       	std	Z+2, r24	; 0x02
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	80 83       	st	Z, r24
     e42:	87 e0       	ldi	r24, 0x07	; 7
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	44 1f       	adc	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	8a 95       	dec	r24
     e4e:	d1 f7       	brne	.-12     	; 0xe44 <__unpack_f+0xba>
     e50:	50 64       	ori	r21, 0x40	; 64
     e52:	24 83       	std	Z+4, r18	; 0x04
     e54:	35 83       	std	Z+5, r19	; 0x05
     e56:	46 83       	std	Z+6, r20	; 0x06
     e58:	57 83       	std	Z+7, r21	; 0x07
     e5a:	08 95       	ret

00000e5c <__fpcmp_parts_f>:
     e5c:	fc 01       	movw	r30, r24
     e5e:	db 01       	movw	r26, r22
     e60:	90 81       	ld	r25, Z
     e62:	92 30       	cpi	r25, 0x02	; 2
     e64:	08 f4       	brcc	.+2      	; 0xe68 <__fpcmp_parts_f+0xc>
     e66:	49 c0       	rjmp	.+146    	; 0xefa <__fpcmp_parts_f+0x9e>
     e68:	8c 91       	ld	r24, X
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	08 f4       	brcc	.+2      	; 0xe70 <__fpcmp_parts_f+0x14>
     e6e:	45 c0       	rjmp	.+138    	; 0xefa <__fpcmp_parts_f+0x9e>
     e70:	94 30       	cpi	r25, 0x04	; 4
     e72:	51 f4       	brne	.+20     	; 0xe88 <__fpcmp_parts_f+0x2c>
     e74:	61 81       	ldd	r22, Z+1	; 0x01
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	b1 f5       	brne	.+108    	; 0xee6 <__fpcmp_parts_f+0x8a>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	2c 91       	ld	r18, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	26 1b       	sub	r18, r22
     e84:	31 09       	sbc	r19, r1
     e86:	41 c0       	rjmp	.+130    	; 0xf0a <__fpcmp_parts_f+0xae>
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	21 f0       	breq	.+8      	; 0xe94 <__fpcmp_parts_f+0x38>
     e8c:	92 30       	cpi	r25, 0x02	; 2
     e8e:	41 f4       	brne	.+16     	; 0xea0 <__fpcmp_parts_f+0x44>
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	b1 f1       	breq	.+108    	; 0xf00 <__fpcmp_parts_f+0xa4>
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	8c 91       	ld	r24, X
     e98:	11 97       	sbiw	r26, 0x01	; 1
     e9a:	88 23       	and	r24, r24
     e9c:	a1 f1       	breq	.+104    	; 0xf06 <__fpcmp_parts_f+0xaa>
     e9e:	2d c0       	rjmp	.+90     	; 0xefa <__fpcmp_parts_f+0x9e>
     ea0:	61 81       	ldd	r22, Z+1	; 0x01
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	01 f1       	breq	.+64     	; 0xee6 <__fpcmp_parts_f+0x8a>
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	8c 91       	ld	r24, X
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	68 17       	cp	r22, r24
     eae:	d9 f4       	brne	.+54     	; 0xee6 <__fpcmp_parts_f+0x8a>
     eb0:	22 81       	ldd	r18, Z+2	; 0x02
     eb2:	33 81       	ldd	r19, Z+3	; 0x03
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	8d 91       	ld	r24, X+
     eb8:	9c 91       	ld	r25, X
     eba:	13 97       	sbiw	r26, 0x03	; 3
     ebc:	82 17       	cp	r24, r18
     ebe:	93 07       	cpc	r25, r19
     ec0:	94 f0       	brlt	.+36     	; 0xee6 <__fpcmp_parts_f+0x8a>
     ec2:	28 17       	cp	r18, r24
     ec4:	39 07       	cpc	r19, r25
     ec6:	bc f0       	brlt	.+46     	; 0xef6 <__fpcmp_parts_f+0x9a>
     ec8:	24 81       	ldd	r18, Z+4	; 0x04
     eca:	35 81       	ldd	r19, Z+5	; 0x05
     ecc:	46 81       	ldd	r20, Z+6	; 0x06
     ece:	57 81       	ldd	r21, Z+7	; 0x07
     ed0:	14 96       	adiw	r26, 0x04	; 4
     ed2:	8d 91       	ld	r24, X+
     ed4:	9d 91       	ld	r25, X+
     ed6:	0d 90       	ld	r0, X+
     ed8:	bc 91       	ld	r27, X
     eda:	a0 2d       	mov	r26, r0
     edc:	82 17       	cp	r24, r18
     ede:	93 07       	cpc	r25, r19
     ee0:	a4 07       	cpc	r26, r20
     ee2:	b5 07       	cpc	r27, r21
     ee4:	18 f4       	brcc	.+6      	; 0xeec <__fpcmp_parts_f+0x90>
     ee6:	66 23       	and	r22, r22
     ee8:	41 f0       	breq	.+16     	; 0xefa <__fpcmp_parts_f+0x9e>
     eea:	0d c0       	rjmp	.+26     	; 0xf06 <__fpcmp_parts_f+0xaa>
     eec:	28 17       	cp	r18, r24
     eee:	39 07       	cpc	r19, r25
     ef0:	4a 07       	cpc	r20, r26
     ef2:	5b 07       	cpc	r21, r27
     ef4:	28 f4       	brcc	.+10     	; 0xf00 <__fpcmp_parts_f+0xa4>
     ef6:	66 23       	and	r22, r22
     ef8:	31 f0       	breq	.+12     	; 0xf06 <__fpcmp_parts_f+0xaa>
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <__fpcmp_parts_f+0xae>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <__fpcmp_parts_f+0xae>
     f06:	2f ef       	ldi	r18, 0xFF	; 255
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	c9 01       	movw	r24, r18
     f0c:	08 95       	ret

00000f0e <__udivmodhi4>:
     f0e:	aa 1b       	sub	r26, r26
     f10:	bb 1b       	sub	r27, r27
     f12:	51 e1       	ldi	r21, 0x11	; 17
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <__udivmodhi4_ep>

00000f16 <__udivmodhi4_loop>:
     f16:	aa 1f       	adc	r26, r26
     f18:	bb 1f       	adc	r27, r27
     f1a:	a6 17       	cp	r26, r22
     f1c:	b7 07       	cpc	r27, r23
     f1e:	10 f0       	brcs	.+4      	; 0xf24 <__udivmodhi4_ep>
     f20:	a6 1b       	sub	r26, r22
     f22:	b7 0b       	sbc	r27, r23

00000f24 <__udivmodhi4_ep>:
     f24:	88 1f       	adc	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	5a 95       	dec	r21
     f2a:	a9 f7       	brne	.-22     	; 0xf16 <__udivmodhi4_loop>
     f2c:	80 95       	com	r24
     f2e:	90 95       	com	r25
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	08 95       	ret

00000f36 <__prologue_saves__>:
     f36:	2f 92       	push	r2
     f38:	3f 92       	push	r3
     f3a:	4f 92       	push	r4
     f3c:	5f 92       	push	r5
     f3e:	6f 92       	push	r6
     f40:	7f 92       	push	r7
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	ca 1b       	sub	r28, r26
     f60:	db 0b       	sbc	r29, r27
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	09 94       	ijmp

00000f6e <__epilogue_restores__>:
     f6e:	2a 88       	ldd	r2, Y+18	; 0x12
     f70:	39 88       	ldd	r3, Y+17	; 0x11
     f72:	48 88       	ldd	r4, Y+16	; 0x10
     f74:	5f 84       	ldd	r5, Y+15	; 0x0f
     f76:	6e 84       	ldd	r6, Y+14	; 0x0e
     f78:	7d 84       	ldd	r7, Y+13	; 0x0d
     f7a:	8c 84       	ldd	r8, Y+12	; 0x0c
     f7c:	9b 84       	ldd	r9, Y+11	; 0x0b
     f7e:	aa 84       	ldd	r10, Y+10	; 0x0a
     f80:	b9 84       	ldd	r11, Y+9	; 0x09
     f82:	c8 84       	ldd	r12, Y+8	; 0x08
     f84:	df 80       	ldd	r13, Y+7	; 0x07
     f86:	ee 80       	ldd	r14, Y+6	; 0x06
     f88:	fd 80       	ldd	r15, Y+5	; 0x05
     f8a:	0c 81       	ldd	r16, Y+4	; 0x04
     f8c:	1b 81       	ldd	r17, Y+3	; 0x03
     f8e:	aa 81       	ldd	r26, Y+2	; 0x02
     f90:	b9 81       	ldd	r27, Y+1	; 0x01
     f92:	ce 0f       	add	r28, r30
     f94:	d1 1d       	adc	r29, r1
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	ed 01       	movw	r28, r26
     fa2:	08 95       	ret

00000fa4 <round>:
     fa4:	50 d0       	rcall	.+160    	; 0x1046 <__fp_splitA>
     fa6:	e0 f0       	brcs	.+56     	; 0xfe0 <round+0x3c>
     fa8:	9e 37       	cpi	r25, 0x7E	; 126
     faa:	d8 f0       	brcs	.+54     	; 0xfe2 <round+0x3e>
     fac:	96 39       	cpi	r25, 0x96	; 150
     fae:	b8 f4       	brcc	.+46     	; 0xfde <round+0x3a>
     fb0:	9e 38       	cpi	r25, 0x8E	; 142
     fb2:	48 f4       	brcc	.+18     	; 0xfc6 <round+0x22>
     fb4:	67 2f       	mov	r22, r23
     fb6:	78 2f       	mov	r23, r24
     fb8:	88 27       	eor	r24, r24
     fba:	98 5f       	subi	r25, 0xF8	; 248
     fbc:	f9 cf       	rjmp	.-14     	; 0xfb0 <round+0xc>
     fbe:	86 95       	lsr	r24
     fc0:	77 95       	ror	r23
     fc2:	67 95       	ror	r22
     fc4:	93 95       	inc	r25
     fc6:	95 39       	cpi	r25, 0x95	; 149
     fc8:	d0 f3       	brcs	.-12     	; 0xfbe <round+0x1a>
     fca:	b6 2f       	mov	r27, r22
     fcc:	b1 70       	andi	r27, 0x01	; 1
     fce:	6b 0f       	add	r22, r27
     fd0:	71 1d       	adc	r23, r1
     fd2:	81 1d       	adc	r24, r1
     fd4:	20 f4       	brcc	.+8      	; 0xfde <round+0x3a>
     fd6:	87 95       	ror	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	93 95       	inc	r25
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <__fp_mintl>
     fe0:	1c c0       	rjmp	.+56     	; 0x101a <__fp_mpack>
     fe2:	4c c0       	rjmp	.+152    	; 0x107c <__fp_szero>

00000fe4 <__fp_mintl>:
     fe4:	88 23       	and	r24, r24
     fe6:	71 f4       	brne	.+28     	; 0x1004 <__fp_mintl+0x20>
     fe8:	77 23       	and	r23, r23
     fea:	21 f0       	breq	.+8      	; 0xff4 <__fp_mintl+0x10>
     fec:	98 50       	subi	r25, 0x08	; 8
     fee:	87 2b       	or	r24, r23
     ff0:	76 2f       	mov	r23, r22
     ff2:	07 c0       	rjmp	.+14     	; 0x1002 <__fp_mintl+0x1e>
     ff4:	66 23       	and	r22, r22
     ff6:	11 f4       	brne	.+4      	; 0xffc <__fp_mintl+0x18>
     ff8:	99 27       	eor	r25, r25
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <__fp_mintl+0x32>
     ffc:	90 51       	subi	r25, 0x10	; 16
     ffe:	86 2b       	or	r24, r22
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	2a f0       	brmi	.+10     	; 0x1010 <__fp_mintl+0x2c>
    1006:	9a 95       	dec	r25
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	da f7       	brpl	.-10     	; 0x1006 <__fp_mintl+0x22>
    1010:	88 0f       	add	r24, r24
    1012:	96 95       	lsr	r25
    1014:	87 95       	ror	r24
    1016:	97 f9       	bld	r25, 7
    1018:	08 95       	ret

0000101a <__fp_mpack>:
    101a:	9f 3f       	cpi	r25, 0xFF	; 255
    101c:	31 f0       	breq	.+12     	; 0x102a <__fp_mpack_finite+0xc>

0000101e <__fp_mpack_finite>:
    101e:	91 50       	subi	r25, 0x01	; 1
    1020:	20 f4       	brcc	.+8      	; 0x102a <__fp_mpack_finite+0xc>
    1022:	87 95       	ror	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	b7 95       	ror	r27
    102a:	88 0f       	add	r24, r24
    102c:	91 1d       	adc	r25, r1
    102e:	96 95       	lsr	r25
    1030:	87 95       	ror	r24
    1032:	97 f9       	bld	r25, 7
    1034:	08 95       	ret

00001036 <__fp_split3>:
    1036:	57 fd       	sbrc	r21, 7
    1038:	90 58       	subi	r25, 0x80	; 128
    103a:	44 0f       	add	r20, r20
    103c:	55 1f       	adc	r21, r21
    103e:	59 f0       	breq	.+22     	; 0x1056 <__fp_splitA+0x10>
    1040:	5f 3f       	cpi	r21, 0xFF	; 255
    1042:	71 f0       	breq	.+28     	; 0x1060 <__fp_splitA+0x1a>
    1044:	47 95       	ror	r20

00001046 <__fp_splitA>:
    1046:	88 0f       	add	r24, r24
    1048:	97 fb       	bst	r25, 7
    104a:	99 1f       	adc	r25, r25
    104c:	61 f0       	breq	.+24     	; 0x1066 <__fp_splitA+0x20>
    104e:	9f 3f       	cpi	r25, 0xFF	; 255
    1050:	79 f0       	breq	.+30     	; 0x1070 <__fp_splitA+0x2a>
    1052:	87 95       	ror	r24
    1054:	08 95       	ret
    1056:	12 16       	cp	r1, r18
    1058:	13 06       	cpc	r1, r19
    105a:	14 06       	cpc	r1, r20
    105c:	55 1f       	adc	r21, r21
    105e:	f2 cf       	rjmp	.-28     	; 0x1044 <__fp_split3+0xe>
    1060:	46 95       	lsr	r20
    1062:	f1 df       	rcall	.-30     	; 0x1046 <__fp_splitA>
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <__fp_splitA+0x30>
    1066:	16 16       	cp	r1, r22
    1068:	17 06       	cpc	r1, r23
    106a:	18 06       	cpc	r1, r24
    106c:	99 1f       	adc	r25, r25
    106e:	f1 cf       	rjmp	.-30     	; 0x1052 <__fp_splitA+0xc>
    1070:	86 95       	lsr	r24
    1072:	71 05       	cpc	r23, r1
    1074:	61 05       	cpc	r22, r1
    1076:	08 94       	sec
    1078:	08 95       	ret

0000107a <__fp_zero>:
    107a:	e8 94       	clt

0000107c <__fp_szero>:
    107c:	bb 27       	eor	r27, r27
    107e:	66 27       	eor	r22, r22
    1080:	77 27       	eor	r23, r23
    1082:	cb 01       	movw	r24, r22
    1084:	97 f9       	bld	r25, 7
    1086:	08 95       	ret

00001088 <_exit>:
    1088:	f8 94       	cli

0000108a <__stop_program>:
    108a:	ff cf       	rjmp	.-2      	; 0x108a <__stop_program>
