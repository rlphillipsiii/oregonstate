
lab1_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001ea  2**0
                  ALLOC
  2 .stab         00000bc4  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000860  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  ac:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <debounce_switch>:
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() 
{
	static uint16_t state = 0; //holds present state
	state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  b4:	80 b3       	in	r24, 0x10	; 16
  b6:	20 91 00 01 	lds	r18, 0x0100
  ba:	30 91 01 01 	lds	r19, 0x0101
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	30 6e       	ori	r19, 0xE0	; 224
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	90 70       	andi	r25, 0x00	; 0
  ca:	28 2b       	or	r18, r24
  cc:	39 2b       	or	r19, r25
  ce:	30 93 01 01 	sts	0x0101, r19
  d2:	20 93 00 01 	sts	0x0100, r18

	if (state == 0xF000) 
		return 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 ef       	ldi	r25, 0xF0	; 240
  da:	20 30       	cpi	r18, 0x00	; 0
  dc:	39 07       	cpc	r19, r25
  de:	09 f0       	breq	.+2      	; 0xe2 <debounce_switch+0x2e>
  e0:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
  e2:	08 95       	ret

000000e4 <get_digits>:

void get_digits(struct segment *seg, uint8_t count)
{
  e4:	fc 01       	movw	r30, r24
  e6:	86 2f       	mov	r24, r22
	seg->ones = count%10;
  e8:	6a e0       	ldi	r22, 0x0A	; 10
  ea:	0e 94 ad 00 	call	0x15a	; 0x15a <__udivmodqi4>
  ee:	90 83       	st	Z, r25
	seg->tens = count/10;
  f0:	81 83       	std	Z+1, r24	; 0x01
}
  f2:	08 95       	ret

000000f4 <main>:
// Check switch S0.  When found low for 12 passes of "debounc_switch(), increment
// PORTB.  This will make an incrementing count on the port B LEDS. 
//*******************************************************************************
int main()
{
	DDRB = 0xFF;  //set port B to all outputs
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bb       	out	0x17, r24	; 23

	uint8_t count = 0;
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	20 91 00 01 	lds	r18, 0x0100
  fe:	30 91 01 01 	lds	r19, 0x0101
	while (1) {     //do forever
		if (debounce_switch()) {
			PORTB = 0; // zero out portb
		   
			count++; // increment the count
			if (count == 100)
 102:	fa e0       	ldi	r31, 0x0A	; 10
 104:	06 c0       	rjmp	.+12     	; 0x112 <main+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f e3       	ldi	r24, 0x3F	; 63
 108:	9f e1       	ldi	r25, 0x1F	; 31
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x1c>
 110:	00 00       	nop
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() 
{
	static uint16_t state = 0; //holds present state
	state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
 112:	40 b3       	in	r20, 0x10	; 16
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	30 6e       	ori	r19, 0xE0	; 224
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	41 70       	andi	r20, 0x01	; 1
 11e:	50 70       	andi	r21, 0x00	; 0
 120:	24 2b       	or	r18, r20
 122:	35 2b       	or	r19, r21
 124:	30 93 01 01 	sts	0x0101, r19
 128:	20 93 00 01 	sts	0x0100, r18

	if (state == 0xF000) 
 12c:	80 ef       	ldi	r24, 0xF0	; 240
 12e:	20 30       	cpi	r18, 0x00	; 0
 130:	38 07       	cpc	r19, r24
 132:	49 f7       	brne	.-46     	; 0x106 <main+0x12>

	struct segment seg;

	while (1) {     //do forever
		if (debounce_switch()) {
			PORTB = 0; // zero out portb
 134:	18 ba       	out	0x18, r1	; 24
		   
			count++; // increment the count
 136:	ef 5f       	subi	r30, 0xFF	; 255
			if (count == 100)
 138:	e4 36       	cpi	r30, 0x64	; 100
 13a:	59 f0       	breq	.+22     	; 0x152 <main+0x5e>
 13c:	8e 2f       	mov	r24, r30
 13e:	6f 2f       	mov	r22, r31
 140:	0e 94 ad 00 	call	0x15a	; 0x15a <__udivmodqi4>
 144:	82 95       	swap	r24
 146:	80 7f       	andi	r24, 0xF0	; 240
				count = 0;

			get_digits(&seg, count); //get the digits that are to be displayed

			PORTB |= (seg.tens << 4) | (seg.ones); // display the digits
 148:	48 b3       	in	r20, 0x18	; 24
 14a:	89 2b       	or	r24, r25
 14c:	84 2b       	or	r24, r20
 14e:	88 bb       	out	0x18, r24	; 24
 150:	da cf       	rjmp	.-76     	; 0x106 <main+0x12>
	while (1) {     //do forever
		if (debounce_switch()) {
			PORTB = 0; // zero out portb
		   
			count++; // increment the count
			if (count == 100)
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
				count = 0;
 156:	e0 e0       	ldi	r30, 0x00	; 0
 158:	f7 cf       	rjmp	.-18     	; 0x148 <main+0x54>

0000015a <__udivmodqi4>:
 15a:	99 1b       	sub	r25, r25
 15c:	79 e0       	ldi	r23, 0x09	; 9
 15e:	04 c0       	rjmp	.+8      	; 0x168 <__udivmodqi4_ep>

00000160 <__udivmodqi4_loop>:
 160:	99 1f       	adc	r25, r25
 162:	96 17       	cp	r25, r22
 164:	08 f0       	brcs	.+2      	; 0x168 <__udivmodqi4_ep>
 166:	96 1b       	sub	r25, r22

00000168 <__udivmodqi4_ep>:
 168:	88 1f       	adc	r24, r24
 16a:	7a 95       	dec	r23
 16c:	c9 f7       	brne	.-14     	; 0x160 <__udivmodqi4_loop>
 16e:	80 95       	com	r24
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
