
SolarPanelControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003f4  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800062  00800062  0000048a  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b93  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000041d  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000704  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  0000235c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062e  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	2f c1       	rjmp	.+606    	; 0x270 <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 ef       	ldi	r30, 0xF4	; 244
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ad 36       	cpi	r26, 0x6D	; 109
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	89 d1       	rcall	.+786    	; 0x368 <main>
  56:	cc c1       	rjmp	.+920    	; 0x3f0 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <ADCSetChannel>:
#include "adc.h"
#include "pins.h"

void ADCSetChannel(uint8_t channel)
{
	CLEARPINS(ADMUX, ADC_MUX_MASK);
  5a:	97 b1       	in	r25, 0x07	; 7
  5c:	90 7e       	andi	r25, 0xE0	; 224
  5e:	97 b9       	out	0x07, r25	; 7
	SETPINS(ADMUX, (channel & ADC_MUX_MASK));
  60:	97 b1       	in	r25, 0x07	; 7
  62:	8f 71       	andi	r24, 0x1F	; 31
  64:	98 2b       	or	r25, r24
  66:	97 b9       	out	0x07, r25	; 7
}
  68:	08 95       	ret

0000006a <ADCSetAdjust>:

void ADCSetAdjust(BOOL leftAdjust)
{
	if (leftAdjust == 1)
  6a:	81 30       	cpi	r24, 0x01	; 1
  6c:	11 f4       	brne	.+4      	; 0x72 <ADCSetAdjust+0x8>
	{
		SETPIN(ADMUX, ADLAR);
  6e:	3d 9a       	sbi	0x07, 5	; 7
  70:	08 95       	ret
	}
	else
	{
		CLEARPIN(ADMUX, ADLAR);	// See pins.h
  72:	3d 98       	cbi	0x07, 5	; 7
  74:	08 95       	ret

00000076 <ADCSetPrescaler>:
	}
}

void ADCSetPrescaler(uint8_t prescale)
{
	CLEARPINS(ADCSRA, ADC_PRESCALER_MASK);
  76:	96 b1       	in	r25, 0x06	; 6
  78:	98 7f       	andi	r25, 0xF8	; 248
  7a:	96 b9       	out	0x06, r25	; 6
	SETPINS(ADCSRA, (prescale & ADC_PRESCALER_MASK));
  7c:	96 b1       	in	r25, 0x06	; 6
  7e:	87 70       	andi	r24, 0x07	; 7
  80:	98 2b       	or	r25, r24
  82:	96 b9       	out	0x06, r25	; 6
}
  84:	08 95       	ret

00000086 <ADCSetFreeRunning>:

void ADCSetFreeRunning(BOOL freeRun)
{
	if (freeRun)
  86:	88 23       	and	r24, r24
  88:	29 f0       	breq	.+10     	; 0x94 <ADCSetFreeRunning+0xe>
	{
		SETPIN(ADCSRA, ADATE);
  8a:	35 9a       	sbi	0x06, 5	; 6
		ADCSRB &= ~(1 << ADTS2) & ~(1 << ADTS1) & ~(1 << ADTS0);
  8c:	83 b1       	in	r24, 0x03	; 3
  8e:	88 7f       	andi	r24, 0xF8	; 248
  90:	83 b9       	out	0x03, r24	; 3
  92:	08 95       	ret
	}
	else
	{
		CLEARPIN(ADCSRA, ADATE);
  94:	35 98       	cbi	0x06, 5	; 6
  96:	08 95       	ret

00000098 <ADCEnableInterrupt>:
	ADCFinish();
}

void ADCEnableInterrupt(void)
{
	SETPIN(ADCSRA, ADIE);
  98:	33 9a       	sbi	0x06, 3	; 6
}
  9a:	08 95       	ret

0000009c <ADCDisableInterrupt>:

void ADCDisableInterrupt(void)
{
	CLEARPIN(ADCSRA, ADIE);
  9c:	33 98       	cbi	0x06, 3	; 6
}
  9e:	08 95       	ret

000000a0 <ADCEnable>:

void ADCEnable(void)
{
	SETPIN(ADCSRA, ADEN);
  a0:	37 9a       	sbi	0x06, 7	; 6
}
  a2:	08 95       	ret

000000a4 <ADCDisable>:

void ADCDisable(void)
{
	CLEARPIN(ADCSRA, ADEN);
  a4:	37 98       	cbi	0x06, 7	; 6
}
  a6:	08 95       	ret

000000a8 <ADCStart>:

void ADCStart(void)
{
	SETPIN(ADCSRA, ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
}
  aa:	08 95       	ret

000000ac <ADCFinish>:

void ADCFinish(void)
{
	SETPIN(ADCSRA, ADIF);
  ac:	34 9a       	sbi	0x06, 4	; 6
}
  ae:	08 95       	ret

000000b0 <ADCDone>:

BOOL ADCDone(void)
{
	return BOOL(GETPIN(ADCSRA, ADIF));
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	34 9b       	sbis	0x06, 4	; 6
  b4:	80 e0       	ldi	r24, 0x00	; 0
}
  b6:	08 95       	ret

000000b8 <ADCSetReference>:
	}
}

void ADCSetReference(uint8_t reference)
{
	CLEARPINS(ADMUX, ADC_REF_MASK);
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	9f 73       	andi	r25, 0x3F	; 63
  bc:	97 b9       	out	0x07, r25	; 7
	SETPINS(ADMUX, (reference & ADC_REF_MASK));
  be:	97 b1       	in	r25, 0x07	; 7
  c0:	80 7c       	andi	r24, 0xC0	; 192
  c2:	98 2b       	or	r25, r24
  c4:	97 b9       	out	0x07, r25	; 7
	
	// First read after changing reference is probably garbage
	ADCStart();
  c6:	f0 df       	rcall	.-32     	; 0xa8 <ADCStart>
	// Wait for the AD conversion to complete
	while (!ADCDone());
  c8:	f3 df       	rcall	.-26     	; 0xb0 <ADCDone>
  ca:	88 23       	and	r24, r24
  cc:	e9 f3       	breq	.-6      	; 0xc8 <ADCSetReference+0x10>
	
	ADCFinish();
  ce:	ee df       	rcall	.-36     	; 0xac <ADCFinish>
}
  d0:	08 95       	ret

000000d2 <SetupADC>:
{
	return BOOL(GETPIN(ADCSRA, ADIF));
}

void SetupADC(uint8_t prescale, BOOL freeRun)
{
  d2:	cf 93       	push	r28
  d4:	c6 2f       	mov	r28, r22
	ADCSetPrescaler(prescale);	// Set prescaler bits
  d6:	cf df       	rcall	.-98     	; 0x76 <ADCSetPrescaler>
	ADCSetFreeRunning(freeRun);		// Set free run bit
  d8:	8c 2f       	mov	r24, r28
  da:	d5 df       	rcall	.-86     	; 0x86 <ADCSetFreeRunning>
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <ReadADC>:

uint8_t ReadADC(uint8_t channel)
{	
	ADCSetChannel(channel);	// Set ADC channel select bits
  e0:	bc df       	rcall	.-136    	; 0x5a <ADCSetChannel>
	ADCSetAdjust(ADC_LEFTADJUST);	// Set left/right adjust bit
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	c2 df       	rcall	.-124    	; 0x6a <ADCSetAdjust>
	
	ADCStart();
  e6:	e0 df       	rcall	.-64     	; 0xa8 <ADCStart>
	// Wait for the AD conversion to complete
	while (!ADCDone());
  e8:	e3 df       	rcall	.-58     	; 0xb0 <ADCDone>
  ea:	88 23       	and	r24, r24
  ec:	e9 f3       	breq	.-6      	; 0xe8 <ReadADC+0x8>
	
	ADCFinish();
  ee:	de df       	rcall	.-68     	; 0xac <ADCFinish>
	
	return ADCH;
  f0:	85 b1       	in	r24, 0x05	; 5
}
  f2:	08 95       	ret

000000f4 <ReadADCAveraged>:

uint8_t ReadADCAveraged(uint8_t channel, uint8_t samples)
{
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	f8 2e       	mov	r15, r24
 100:	06 2f       	mov	r16, r22
	uint8_t i;
	uint16_t accumulator = 0;
	
	for(i = 0; i < samples; i++)
 102:	66 23       	and	r22, r22
 104:	59 f0       	breq	.+22     	; 0x11c <ReadADCAveraged+0x28>
}

uint8_t ReadADCAveraged(uint8_t channel, uint8_t samples)
{
	uint8_t i;
	uint16_t accumulator = 0;
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(i = 0; i < samples; i++)
 10a:	10 e0       	ldi	r17, 0x00	; 0
	{
		accumulator += ReadADC(channel);
 10c:	8f 2d       	mov	r24, r15
 10e:	e8 df       	rcall	.-48     	; 0xe0 <ReadADC>
 110:	c8 0f       	add	r28, r24
 112:	d1 1d       	adc	r29, r1
uint8_t ReadADCAveraged(uint8_t channel, uint8_t samples)
{
	uint8_t i;
	uint16_t accumulator = 0;
	
	for(i = 0; i < samples; i++)
 114:	1f 5f       	subi	r17, 0xFF	; 255
 116:	10 17       	cp	r17, r16
 118:	c9 f7       	brne	.-14     	; 0x10c <ReadADCAveraged+0x18>
 11a:	02 c0       	rjmp	.+4      	; 0x120 <ReadADCAveraged+0x2c>
}

uint8_t ReadADCAveraged(uint8_t channel, uint8_t samples)
{
	uint8_t i;
	uint16_t accumulator = 0;
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < samples; i++)
	{
		accumulator += ReadADC(channel);
	}
	
	return accumulator / samples;
 120:	60 2f       	mov	r22, r16
 122:	ce 01       	movw	r24, r28
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	50 d1       	rcall	.+672    	; 0x3c8 <__udivmodhi4>
 128:	86 2f       	mov	r24, r22
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	08 95       	ret

00000136 <ReadPreciseADC>:

uint16_t ReadPreciseADC(uint8_t channel)
{	
	ADCSetChannel(channel);	// Set ADC channel select bits
 136:	91 df       	rcall	.-222    	; 0x5a <ADCSetChannel>
	ADCSetAdjust(ADC_RIGHTADJUST);	// Set left/right adjust bit
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	97 df       	rcall	.-210    	; 0x6a <ADCSetAdjust>
	
	ADCStart();
 13c:	b5 df       	rcall	.-150    	; 0xa8 <ADCStart>
	// Wait for the AD conversion to complete
	while (!ADCDone())
 13e:	b8 df       	rcall	.-144    	; 0xb0 <ADCDone>
 140:	88 23       	and	r24, r24
 142:	e9 f3       	breq	.-6      	; 0x13e <ReadPreciseADC+0x8>
	{
	}
	ADCFinish();
 144:	b3 df       	rcall	.-154    	; 0xac <ADCFinish>
	
	return ADCW;
 146:	84 b1       	in	r24, 0x04	; 4
 148:	95 b1       	in	r25, 0x05	; 5
}
 14a:	08 95       	ret

0000014c <ReadPreciseADCAveraged>:

uint16_t ReadPreciseADCAveraged(uint8_t channel, uint8_t samples)
{
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	f8 2e       	mov	r15, r24
 158:	06 2f       	mov	r16, r22
	uint8_t i;
	uint16_t total = 0;
	uint16_t value;
	
	for (i = 0; i < samples; i++)
 15a:	66 23       	and	r22, r22
 15c:	59 f0       	breq	.+22     	; 0x174 <ReadPreciseADCAveraged+0x28>
}

uint16_t ReadPreciseADCAveraged(uint8_t channel, uint8_t samples)
{
	uint8_t i;
	uint16_t total = 0;
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t value;
	
	for (i = 0; i < samples; i++)
 162:	10 e0       	ldi	r17, 0x00	; 0
	{
		total += ReadPreciseADC(channel);
 164:	8f 2d       	mov	r24, r15
 166:	e7 df       	rcall	.-50     	; 0x136 <ReadPreciseADC>
 168:	c8 0f       	add	r28, r24
 16a:	d9 1f       	adc	r29, r25
{
	uint8_t i;
	uint16_t total = 0;
	uint16_t value;
	
	for (i = 0; i < samples; i++)
 16c:	1f 5f       	subi	r17, 0xFF	; 255
 16e:	10 17       	cp	r17, r16
 170:	c9 f7       	brne	.-14     	; 0x164 <ReadPreciseADCAveraged+0x18>
 172:	02 c0       	rjmp	.+4      	; 0x178 <ReadPreciseADCAveraged+0x2c>
}

uint16_t ReadPreciseADCAveraged(uint8_t channel, uint8_t samples)
{
	uint8_t i;
	uint16_t total = 0;
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < samples; i++)
	{
		total += ReadPreciseADC(channel);
	}
	
	value = total / samples;
 178:	60 2f       	mov	r22, r16
 17a:	ce 01       	movw	r24, r28
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	24 d1       	rcall	.+584    	; 0x3c8 <__udivmodhi4>
 180:	86 2f       	mov	r24, r22
 182:	97 2f       	mov	r25, r23
	
	return value;
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	08 95       	ret

00000190 <set_motor_forward>:
 */ 

#include "motor.h"

void set_motor_forward(){
	PORTA |= (1 << PA1);
 190:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA &= ~(1 << PA2);
 192:	da 98       	cbi	0x1b, 2	; 27
}
 194:	08 95       	ret

00000196 <set_motor_reverse>:

void set_motor_reverse(){
	PORTA &= ~(1 << PA1);
 196:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |= (1 << PA2);
 198:	da 9a       	sbi	0x1b, 2	; 27
}
 19a:	08 95       	ret

0000019c <set_motor_stop>:

void set_motor_stop(){
	PORTA &= ~(1 << PA1);
 19c:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= ~(1 << PA2);
 19e:	da 98       	cbi	0x1b, 2	; 27
}
 1a0:	08 95       	ret

000001a2 <set_direction>:

void set_direction(int direction){
	if(direction == FORWARD){
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	19 f4       	brne	.+6      	; 0x1ae <set_direction+0xc>
		PORTA |= (1 << PA1);
 1a8:	d9 9a       	sbi	0x1b, 1	; 27
		PORTA &= ~(1 << PA2);
 1aa:	da 98       	cbi	0x1b, 2	; 27
 1ac:	08 95       	ret
	}else{
		PORTA &= ~(1 << PA1);
 1ae:	d9 98       	cbi	0x1b, 1	; 27
		PORTA |= (1 << PA2);
 1b0:	da 9a       	sbi	0x1b, 2	; 27
 1b2:	08 95       	ret

000001b4 <move_motor>:
	}
}

void move_motor(int dir){
	if (dir == CCW){
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	91 05       	cpc	r25, r1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <move_motor+0xe>
		PWMD = SERVO_SPEED;
 1ba:	8f ea       	ldi	r24, 0xAF	; 175
 1bc:	8a bd       	out	0x2a, r24	; 42
		set_motor_reverse();
 1be:	eb df       	rcall	.-42     	; 0x196 <set_motor_reverse>
 1c0:	08 95       	ret
	}else if (dir == CW){
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	91 05       	cpc	r25, r1
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <move_motor+0x1c>
		PWMD = SERVO_SPEED;
 1c8:	8f ea       	ldi	r24, 0xAF	; 175
 1ca:	8a bd       	out	0x2a, r24	; 42
		set_motor_forward();
 1cc:	e1 df       	rcall	.-62     	; 0x190 <set_motor_forward>
 1ce:	08 95       	ret
	}else{
		PWMD = 0;
 1d0:	1a bc       	out	0x2a, r1	; 42
		set_motor_stop();
 1d2:	e4 df       	rcall	.-56     	; 0x19c <set_motor_stop>
 1d4:	08 95       	ret

000001d6 <get_error>:
	}
}

int get_error(uint8_t destination){
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
	uint8_t position;
	
	ADCSetReference(ADC_REF_VCC);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	6d df       	rcall	.-294    	; 0xb8 <ADCSetReference>
	position = ReadADC(POT_ADC);
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	7f df       	rcall	.-258    	; 0xe0 <ReadADC>
	if (destination > UPPER_BOUND)
		destination = UPPER_BOUND;	// Set it to the upper bound
	else if (destination < LOWER_BOUND)
		destination = LOWER_BOUND;	// Set it to the lower bound
	
	return position - destination;
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	c9 01       	movw	r24, r18
 1e8:	8c 1b       	sub	r24, r28
 1ea:	91 09       	sbc	r25, r1
}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <update_servo_position>:

void update_servo_position(uint8_t destination){
	int error = get_error(destination);
 1f0:	f2 df       	rcall	.-28     	; 0x1d6 <get_error>
	
	if (ABS(error) < DEADBAND)	// If the error is less than the deadband, just turn off the motor.
 1f2:	9c 01       	movw	r18, r24
 1f4:	22 5f       	subi	r18, 0xF2	; 242
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	2d 31       	cpi	r18, 0x1D	; 29
 1fa:	31 05       	cpc	r19, r1
 1fc:	20 f4       	brcc	.+8      	; 0x206 <update_servo_position+0x16>
		move_motor(STOP);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	d8 df       	rcall	.-80     	; 0x1b4 <move_motor>
 204:	08 95       	ret
	else if (error > 0)	// If the error is negative, turn the servo clockwise.
 206:	18 16       	cp	r1, r24
 208:	19 06       	cpc	r1, r25
 20a:	24 f4       	brge	.+8      	; 0x214 <update_servo_position+0x24>
		move_motor(CCW);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	d1 df       	rcall	.-94     	; 0x1b4 <move_motor>
 212:	08 95       	ret
	else	// Otherwise turn the servo counter-clockwise.
		move_motor(CW);
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	cd df       	rcall	.-102    	; 0x1b4 <move_motor>
 21a:	08 95       	ret

0000021c <set_servo_position>:
}

void set_servo_position(uint8_t destination, uint16_t seekTime){
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	f8 2e       	mov	r15, r24
 228:	eb 01       	movw	r28, r22
	if(destination == 0)
 22a:	88 23       	and	r24, r24
 22c:	89 f0       	breq	.+34     	; 0x250 <set_servo_position+0x34>
		return;
	
	uint16_t i;
	
	for (i = 0; i < seekTime; i++){
 22e:	20 97       	sbiw	r28, 0x00	; 0
 230:	79 f0       	breq	.+30     	; 0x250 <set_servo_position+0x34>
 232:	00 e0       	ldi	r16, 0x00	; 0
 234:	10 e0       	ldi	r17, 0x00	; 0
		update_servo_position(destination);
 236:	8f 2d       	mov	r24, r15
 238:	db df       	rcall	.-74     	; 0x1f0 <update_servo_position>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	89 ef       	ldi	r24, 0xF9	; 249
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <set_servo_position+0x22>
 242:	00 c0       	rjmp	.+0      	; 0x244 <set_servo_position+0x28>
 244:	00 00       	nop
	if(destination == 0)
		return;
	
	uint16_t i;
	
	for (i = 0; i < seekTime; i++){
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255
 24a:	0c 17       	cp	r16, r28
 24c:	1d 07       	cpc	r17, r29
 24e:	99 f7       	brne	.-26     	; 0x236 <set_servo_position+0x1a>
		update_servo_position(destination);
		
		_delay_ms(1);
	}
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	08 95       	ret

0000025c <enable_PWM>:

void enable_PWM(){
	TOP = 0xFF;
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	8b bd       	out	0x2b, r24	; 43
	
	TCCR1B = (1 << CS10);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	8f bd       	out	0x2f, r24	; 47
	TCCR1C = (1 << PWM1D) | (1 << COM1D1);
 264:	89 e0       	ldi	r24, 0x09	; 9
 266:	87 bd       	out	0x27, r24	; 39
	TCCR1D &= ~(1 << WGM10) & ~(1 << WGM11);
 268:	86 b5       	in	r24, 0x26	; 38
 26a:	8c 7f       	andi	r24, 0xFC	; 252
 26c:	86 bd       	out	0x26, r24	; 38
 26e:	08 95       	ret

00000270 <__vector_8>:
unsigned char solar_reading;
unsigned char position = 255;
unsigned char last = 255;

/* interrupt to indicate the end of serial transmission */
ISR(USI_OVF_vect){
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	data[count] = USIDR; // Data Register - currently holds input data
 292:	9f b1       	in	r25, 0x0f	; 15
 294:	80 91 6c 00 	lds	r24, 0x006C
 298:	e6 e6       	ldi	r30, 0x66	; 102
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	e8 0f       	add	r30, r24
 29e:	f1 1d       	adc	r31, r1
 2a0:	90 83       	st	Z, r25
	USIDR = data_out; // Set the output data to the data register
 2a2:	90 91 62 00 	lds	r25, 0x0062
 2a6:	9f b9       	out	0x0f, r25	; 15
	
	USISR = 1 << USIOIF; // Clear the interrupt flag
 2a8:	90 e4       	ldi	r25, 0x40	; 64
 2aa:	9e b9       	out	0x0e, r25	; 14
	
	if (count == 1){
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	31 f4       	brne	.+12     	; 0x2bc <__vector_8+0x4c>
		ADCSetReference(ADC_REF_25);
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	02 df       	rcall	.-508    	; 0xb8 <ADCSetReference>
		solar_reading = ReadADC(SOLAR_ADC);
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	14 df       	rcall	.-472    	; 0xe0 <ReadADC>
 2b8:	80 93 65 00 	sts	0x0065, r24
	}
	
	data_out = solar_reading;
 2bc:	80 91 65 00 	lds	r24, 0x0065
 2c0:	80 93 62 00 	sts	0x0062, r24
	
	position = data[0];
 2c4:	80 91 66 00 	lds	r24, 0x0066
 2c8:	80 93 61 00 	sts	0x0061, r24
	count++;
 2cc:	80 91 6c 00 	lds	r24, 0x006C
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	80 93 6c 00 	sts	0x006C, r24
		
	if (count == 5)
 2d6:	85 30       	cpi	r24, 0x05	; 5
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <__vector_8+0x72>
		data_out = 0xA9; // First byte out of next packet	
 2da:	89 ea       	ldi	r24, 0xA9	; 169
 2dc:	80 93 62 00 	sts	0x0062, r24
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <__vector_8+0x7a>
	
	if (count == 6)
 2e2:	86 30       	cpi	r24, 0x06	; 6
 2e4:	11 f4       	brne	.+4      	; 0x2ea <__vector_8+0x7a>
		count = 0;
 2e6:	10 92 6c 00 	sts	0x006C, r1
		
	connection = 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 64 00 	sts	0x0064, r25
 2f2:	80 93 63 00 	sts	0x0063, r24
	return;
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <SPI_SlaveInit>:


void SPI_SlaveInit(){
	USICR = (1 << USIWM0) | (1 << USICS1) | (1 << USIOIE);
 318:	88 e5       	ldi	r24, 0x58	; 88
 31a:	8d b9       	out	0x0d, r24	; 13
	
	USISR = 1 << USIOIF; // Clear the interrupt flag, reset the counter
 31c:	80 e4       	ldi	r24, 0x40	; 64
 31e:	8e b9       	out	0x0e, r24	; 14
}
 320:	08 95       	ret

00000322 <find_brightest_light>:

void find_brightest_light(){
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
	cli();
 32a:	f8 94       	cli
	
	uint8_t max = 0, tmp = 0;
	uint16_t pos, i;
	
	for(i = LOWER_BOUND; i < UPPER_BOUND; i += 20){
 32c:	c0 e0       	ldi	r28, 0x00	; 0
 32e:	d0 e0       	ldi	r29, 0x00	; 0
}

void find_brightest_light(){
	cli();
	
	uint8_t max = 0, tmp = 0;
 330:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t pos, i;
	
	for(i = LOWER_BOUND; i < UPPER_BOUND; i += 20){
		set_servo_position(i, SERVO_POSITION_TIMEOUT);
 332:	8c 2f       	mov	r24, r28
 334:	68 ee       	ldi	r22, 0xE8	; 232
 336:	73 e0       	ldi	r23, 0x03	; 3
 338:	71 df       	rcall	.-286    	; 0x21c <set_servo_position>
		
		ADCSetReference(ADC_REF_25);
 33a:	80 e8       	ldi	r24, 0x80	; 128
 33c:	bd de       	rcall	.-646    	; 0xb8 <ADCSetReference>
		if((tmp = ReadADC(SOLAR_ADC)) > max){
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	cf de       	rcall	.-610    	; 0xe0 <ReadADC>
 342:	18 17       	cp	r17, r24
 344:	10 f4       	brcc	.+4      	; 0x34a <find_brightest_light+0x28>
 346:	0c 2f       	mov	r16, r28
			max = tmp;
 348:	18 2f       	mov	r17, r24
	cli();
	
	uint8_t max = 0, tmp = 0;
	uint16_t pos, i;
	
	for(i = LOWER_BOUND; i < UPPER_BOUND; i += 20){
 34a:	64 96       	adiw	r28, 0x14	; 20
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	c4 30       	cpi	r28, 0x04	; 4
 350:	d8 07       	cpc	r29, r24
 352:	79 f7       	brne	.-34     	; 0x332 <find_brightest_light+0x10>
			max = tmp;
			pos = i;
		}			
	}		
	
	set_servo_position(pos, SERVO_POSITION_TIMEOUT);
 354:	80 2f       	mov	r24, r16
 356:	68 ee       	ldi	r22, 0xE8	; 232
 358:	73 e0       	ldi	r23, 0x03	; 3
 35a:	60 df       	rcall	.-320    	; 0x21c <set_servo_position>
	
	sei();
 35c:	78 94       	sei
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <main>:

int main (void) {
	DDRA = 0b00000111;
 368:	87 e0       	ldi	r24, 0x07	; 7
 36a:	8a bb       	out	0x1a, r24	; 26
	DDRB = (1 << PB1) | (1 << PB3) | (1 << PB5);
 36c:	8a e2       	ldi	r24, 0x2A	; 42
 36e:	87 bb       	out	0x17, r24	; 23
	
	SetupADC(ADC_PRESCALER_4, FALSE);
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	ae de       	rcall	.-676    	; 0xd2 <SetupADC>
 	ADCEnable();
 376:	94 de       	rcall	.-728    	; 0xa0 <ADCEnable>
		
	enable_PWM();
 378:	71 df       	rcall	.-286    	; 0x25c <enable_PWM>
	SPI_SlaveInit();
 37a:	ce df       	rcall	.-100    	; 0x318 <SPI_SlaveInit>
	
	sei();
 37c:	78 94       	sei
	
 	USIDR = 0xA9;
 37e:	89 ea       	ldi	r24, 0xA9	; 169
 380:	8f b9       	out	0x0f, r24	; 15
  	TCNT1 = 0x00;
 382:	1e bc       	out	0x2e, r1	; 46
	
	while(1){
		if(connection){
 384:	80 91 63 00 	lds	r24, 0x0063
 388:	90 91 64 00 	lds	r25, 0x0064
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	a9 f0       	breq	.+42     	; 0x3ba <main+0x52>
			if(position != last){
 390:	80 91 61 00 	lds	r24, 0x0061
 394:	90 91 60 00 	lds	r25, 0x0060
 398:	89 17       	cp	r24, r25
 39a:	79 f0       	breq	.+30     	; 0x3ba <main+0x52>
				if(position == 255){
 39c:	8f 3f       	cpi	r24, 0xFF	; 255
 39e:	11 f4       	brne	.+4      	; 0x3a4 <main+0x3c>
					find_brightest_light();
 3a0:	c0 df       	rcall	.-128    	; 0x322 <find_brightest_light>
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <main+0x4a>
				}else{
					cli();
 3a4:	f8 94       	cli
					
					set_servo_position(position, SERVO_POSITION_TIMEOUT);	
 3a6:	80 91 61 00 	lds	r24, 0x0061
 3aa:	68 ee       	ldi	r22, 0xE8	; 232
 3ac:	73 e0       	ldi	r23, 0x03	; 3
 3ae:	36 df       	rcall	.-404    	; 0x21c <set_servo_position>
					sei();		
 3b0:	78 94       	sei
				}
								
				last = position;
 3b2:	80 91 61 00 	lds	r24, 0x0061
 3b6:	80 93 60 00 	sts	0x0060, r24
 3ba:	89 ef       	ldi	r24, 0xF9	; 249
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x56>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x5c>
 3c4:	00 00       	nop
 3c6:	de cf       	rjmp	.-68     	; 0x384 <main+0x1c>

000003c8 <__udivmodhi4>:
 3c8:	aa 1b       	sub	r26, r26
 3ca:	bb 1b       	sub	r27, r27
 3cc:	51 e1       	ldi	r21, 0x11	; 17
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <__udivmodhi4_ep>

000003d0 <__udivmodhi4_loop>:
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	a6 17       	cp	r26, r22
 3d6:	b7 07       	cpc	r27, r23
 3d8:	10 f0       	brcs	.+4      	; 0x3de <__udivmodhi4_ep>
 3da:	a6 1b       	sub	r26, r22
 3dc:	b7 0b       	sbc	r27, r23

000003de <__udivmodhi4_ep>:
 3de:	88 1f       	adc	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	5a 95       	dec	r21
 3e4:	a9 f7       	brne	.-22     	; 0x3d0 <__udivmodhi4_loop>
 3e6:	80 95       	com	r24
 3e8:	90 95       	com	r25
 3ea:	bc 01       	movw	r22, r24
 3ec:	cd 01       	movw	r24, r26
 3ee:	08 95       	ret

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
