
siren_skeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000238  2**0
                  ALLOC
  3 .stab         00000b70  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ca  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_26>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  c6:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_26>:

#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER3_COMPA_vect) 
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
//OCR1A values that work well are from 10000 to 65000
//the values should increment and decrement by about 64
//
  static uint16_t count=0;
  static uint8_t up=1;
  if(up==1){ 
  de:	80 91 00 01 	lds	r24, 0x0100
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	e9 f0       	breq	.+58     	; 0x120 <__vector_26+0x52>
	  if(count < 62000){ count = count + 64;}
	  else {count = count - 64; up=0;} 
  }
  
  if(up==0){
  e6:	88 23       	and	r24, r24
  e8:	49 f5       	brne	.+82     	; 0x13c <__vector_26+0x6e>
  ea:	80 91 02 01 	lds	r24, 0x0102
  ee:	90 91 03 01 	lds	r25, 0x0103
	  if(count > 10096){ count = count - 64 ;}
  f2:	27 e2       	ldi	r18, 0x27	; 39
  f4:	81 37       	cpi	r24, 0x71	; 113
  f6:	92 07       	cpc	r25, r18
  f8:	50 f5       	brcc	.+84     	; 0x14e <__vector_26+0x80>
	  else{count = count + 64; up= 1;}
  fa:	80 5c       	subi	r24, 0xC0	; 192
  fc:	9f 4f       	sbci	r25, 0xFF	; 255
  fe:	90 93 03 01 	sts	0x0103, r25
 102:	80 93 02 01 	sts	0x0102, r24
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	20 93 00 01 	sts	0x0100, r18
  }
  OCR1A = count;
 10c:	9b bd       	out	0x2b, r25	; 43
 10e:	8a bd       	out	0x2a, r24	; 42
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti
//the values should increment and decrement by about 64
//
  static uint16_t count=0;
  static uint8_t up=1;
  if(up==1){ 
	  if(count < 62000){ count = count + 64;}
 120:	80 91 02 01 	lds	r24, 0x0102
 124:	90 91 03 01 	lds	r25, 0x0103
 128:	22 ef       	ldi	r18, 0xF2	; 242
 12a:	80 33       	cpi	r24, 0x30	; 48
 12c:	92 07       	cpc	r25, r18
 12e:	58 f4       	brcc	.+22     	; 0x146 <__vector_26+0x78>
 130:	80 5c       	subi	r24, 0xC0	; 192
 132:	9f 4f       	sbci	r25, 0xFF	; 255
 134:	90 93 03 01 	sts	0x0103, r25
 138:	80 93 02 01 	sts	0x0102, r24
	  else {count = count - 64; up=0;} 
  }
  
  if(up==0){
 13c:	80 91 02 01 	lds	r24, 0x0102
 140:	90 91 03 01 	lds	r25, 0x0103
 144:	e3 cf       	rjmp	.-58     	; 0x10c <__vector_26+0x3e>
//
  static uint16_t count=0;
  static uint8_t up=1;
  if(up==1){ 
	  if(count < 62000){ count = count + 64;}
	  else {count = count - 64; up=0;} 
 146:	80 54       	subi	r24, 0x40	; 64
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	10 92 00 01 	sts	0x0100, r1
  }
  
  if(up==0){
	  if(count > 10096){ count = count - 64 ;}
 14e:	80 54       	subi	r24, 0x40	; 64
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	90 93 03 01 	sts	0x0103, r25
 156:	80 93 02 01 	sts	0x0102, r24
 15a:	d8 cf       	rjmp	.-80     	; 0x10c <__vector_26+0x3e>

0000015c <main>:
}
                                   

int main(){

	DDRB   |= (1 << PB5) | (1 << PB7); //set port B bit five and seven as outputs
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	80 6a       	ori	r24, 0xA0	; 160
 160:	87 bb       	out	0x17, r24	; 23

//setup TCNT1

	TCCR1A |= (1 << COM1A0);                          //CTC mode with output pin on 
 162:	8f b5       	in	r24, 0x2f	; 47
 164:	80 64       	ori	r24, 0x40	; 64
 166:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)  | (1 << CS10);                          //use OCR1A as source for TOP, use clk/1
 168:	8e b5       	in	r24, 0x2e	; 46
 16a:	89 60       	ori	r24, 0x09	; 9
 16c:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0;                          //no forced compare 
 16e:	10 92 7a 00 	sts	0x007A, r1

	//setup TCNT3
	// siren update frequency = (16,000,000)/(OCR3A) ~ set to about 1000 cycles/sec

	TCCR3A = 0;                          //CTC mode, output pin does not toggle 
 172:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B = (1 << WGM32) | (1 << CS30);                          //no prescaling      
 176:	89 e0       	ldi	r24, 0x09	; 9
 178:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = 0;                          //no forced compare 
 17c:	10 92 8c 00 	sts	0x008C, r1

	OCR3A = 0xE380;                           //pick a speed from 0x1000 to 0xF000
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	93 ee       	ldi	r25, 0xE3	; 227
 184:	90 93 87 00 	sts	0x0087, r25
 188:	80 93 86 00 	sts	0x0086, r24

	ETIMSK = (1 << OCIE3A);                         //enable timer 3 interrupt on OCIE3A
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	80 93 7d 00 	sts	0x007D, r24
 
	//TCNT2 setup for providing the volume control
	//fast PWM mode, TOP=0xFF, clear on match, clk/128
	//output is on PORTB bit 7 
	TCCR2 =  (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (1<<CS20) | (1<<CS21);
 192:	8b e7       	ldi	r24, 0x7B	; 123
 194:	85 bd       	out	0x25, r24	; 37
	OCR2  = 0x90;  //set to adjust volume control 
 196:	80 e9       	ldi	r24, 0x90	; 144
 198:	83 bd       	out	0x23, r24	; 35

	sei();     //set GIE to enable interrupts
 19a:	78 94       	sei
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x40>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
