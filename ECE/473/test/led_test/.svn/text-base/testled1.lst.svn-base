
testled1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000003d0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800114  00800114  00000478  2**0
                  ALLOC
  3 .stab         000015b4  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b2e  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#define ISSET(byte, bit) (byte & (1 << bit))

uint8_t values[] = {1, 2, 4, 8, 16, 32, 64, 128};
                                  
int main()
{
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	27 97       	sbiw	r28, 0x07	; 7
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	DDRB  = 0xF0;   //set port bits 4-7 B as outputs
  ea:	80 ef       	ldi	r24, 0xF0	; 240
  ec:	87 bb       	out	0x17, r24	; 23
	DDRD  = 0x00;   //set port D all inputs 
  ee:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;   //set port D all pullups 
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	82 bb       	out	0x12, r24	; 18

	struct display output;
	init_display_struct(&output); // init the struct the holds the display state
  f4:	7e 01       	movw	r14, r28
  f6:	08 94       	sec
  f8:	e1 1c       	adc	r14, r1
  fa:	f1 1c       	adc	r15, r1
  fc:	c7 01       	movw	r24, r14
  fe:	0e 94 c3 00 	call	0x186	; 0x186 <init_display_struct>

	enable_leds(); // enable the display
 102:	0e 94 b6 00 	call	0x16c	; 0x16c <enable_leds>

	uint16_t number = 0; // init the number on the display to show 0
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f ea       	ldi	r24, 0xAF	; 175
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x40>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x46>
 114:	00 00       	nop

	while (1) {	
		_delay_us(300);

		enable_buttons(); // enable the buttons and disable the display
 116:	0e 94 77 01 	call	0x2ee	; 0x2ee <enable_buttons>

		char pina = poll_buttons(PINA); // get the button state
 11a:	89 b3       	in	r24, 0x19	; 25
 11c:	0e 94 a0 01 	call	0x340	; 0x340 <poll_buttons>
 120:	99 27       	eor	r25, r25
 122:	87 fd       	sbrc	r24, 7
 124:	90 95       	com	r25
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
		
		uint8_t i;
		for (i = 0; i < 8; i++) {
			if (ISSET(pina, i)) {
 12a:	ac 01       	movw	r20, r24
 12c:	02 2e       	mov	r0, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x66>
 130:	55 95       	asr	r21
 132:	47 95       	ror	r20
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <main+0x62>
 138:	40 ff       	sbrs	r20, 0
 13a:	0c c0       	rjmp	.+24     	; 0x154 <main+0x86>

#define ISSET(byte, bit) (byte & (1 << bit))

uint8_t values[] = {1, 2, 4, 8, 16, 32, 64, 128};
                                  
int main()
 13c:	f9 01       	movw	r30, r18
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	ff 4f       	sbci	r31, 0xFF	; 255
		char pina = poll_buttons(PINA); // get the button state
		
		uint8_t i;
		for (i = 0; i < 8; i++) {
			if (ISSET(pina, i)) {
				number += values[i]; // add the button's value if it's pressed
 142:	40 81       	ld	r20, Z
 144:	04 0f       	add	r16, r20
 146:	11 1d       	adc	r17, r1

				if (number > 1023) // rollover
 148:	44 e0       	ldi	r20, 0x04	; 4
 14a:	00 30       	cpi	r16, 0x00	; 0
 14c:	14 07       	cpc	r17, r20
 14e:	10 f0       	brcs	.+4      	; 0x154 <main+0x86>
					number = number-1023;
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	13 40       	sbci	r17, 0x03	; 3
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
		enable_buttons(); // enable the buttons and disable the display

		char pina = poll_buttons(PINA); // get the button state
		
		uint8_t i;
		for (i = 0; i < 8; i++) {
 158:	28 30       	cpi	r18, 0x08	; 8
 15a:	31 05       	cpc	r19, r1
 15c:	31 f7       	brne	.-52     	; 0x12a <main+0x5c>
				if (number > 1023) // rollover
					number = number-1023;
			}
		}

		update_segment(&output, number); // continuously update the display
 15e:	c7 01       	movw	r24, r14
 160:	b8 01       	movw	r22, r16
 162:	0e 94 46 01 	call	0x28c	; 0x28c <update_segment>
		enable_leds(); // re-enable the display and disable the buttons
 166:	0e 94 b6 00 	call	0x16c	; 0x16c <enable_leds>
	}  //while
 16a:	cf cf       	rjmp	.-98     	; 0x10a <main+0x3c>

0000016c <enable_leds>:
							 SIX, SEVEN, EIGHT, NINE, OFF };

void enable_leds()
{
	// disable the tristate buffer without enabling a segment
	PORTB &= ~(1 << PB4);
 16c:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1 << PB6) | (1 << PB5);
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	80 66       	ori	r24, 0x60	; 96
 172:	88 bb       	out	0x18, r24	; 24

	DDRA = 0xFF; // make PORTA all outputs
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
 178:	8b bb       	out	0x1b, r24	; 27
}
 17a:	08 95       	ret

0000017c <disable_leds>:

void disable_leds()
{
	PORTB &= ~(1 << PB4);
 17c:	c4 98       	cbi	0x18, 4	; 24
    PORTB |= (1 << PB6) | (1 << PB5);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	80 66       	ori	r24, 0x60	; 96
 182:	88 bb       	out	0x18, r24	; 24
}
 184:	08 95       	ret

00000186 <init_display_struct>:

void init_display_struct(struct display *output)
{
 186:	fc 01       	movw	r30, r24
	output->ones = 0;
 188:	10 82       	st	Z, r1
	output->tens = 0;
 18a:	11 82       	std	Z+1, r1	; 0x01
	output->hundreds = 0;
 18c:	12 82       	std	Z+2, r1	; 0x02
	output->thousands = 0;
 18e:	13 82       	std	Z+3, r1	; 0x03

	output->colon = COLON_ONLY;
 190:	8c ef       	ldi	r24, 0xFC	; 252
 192:	84 83       	std	Z+4, r24	; 0x04
	output->mode = ZERO_BLANK;
 194:	15 82       	std	Z+5, r1	; 0x05
	output->cycle = 0;
 196:	16 82       	std	Z+6, r1	; 0x06
}
 198:	08 95       	ret

0000019a <update_colon>:

void update_colon(struct display *output, uint8_t off, uint8_t all)
{
	if (!off) {
 19a:	66 23       	and	r22, r22
 19c:	31 f4       	brne	.+12     	; 0x1aa <update_colon+0x10>
		if (all)
 19e:	44 23       	and	r20, r20
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <update_colon+0x18>
			output->colon = COLON_ALL;
 1a2:	28 ef       	ldi	r18, 0xF8	; 248
 1a4:	fc 01       	movw	r30, r24
 1a6:	24 83       	std	Z+4, r18	; 0x04
 1a8:	08 95       	ret
		else
			output->colon = COLON_ONLY;
	} else {
		output->colon = OFF;
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	fc 01       	movw	r30, r24
 1ae:	24 83       	std	Z+4, r18	; 0x04
 1b0:	08 95       	ret
{
	if (!off) {
		if (all)
			output->colon = COLON_ALL;
		else
			output->colon = COLON_ONLY;
 1b2:	2c ef       	ldi	r18, 0xFC	; 252
 1b4:	fc 01       	movw	r30, r24
 1b6:	24 83       	std	Z+4, r18	; 0x04
 1b8:	08 95       	ret

000001ba <set_colon>:
	}
}

void set_colon(struct display *output)
{
	PORTA = output->colon;
 1ba:	fc 01       	movw	r30, r24
 1bc:	84 81       	ldd	r24, Z+4	; 0x04
 1be:	8b bb       	out	0x1b, r24	; 27
}
 1c0:	08 95       	ret

000001c2 <set_zero_filled>:

void set_zero_filled(struct display *output)
{
	output->mode = ZERO_FILLED;
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	fc 01       	movw	r30, r24
 1c6:	25 83       	std	Z+5, r18	; 0x05
}
 1c8:	08 95       	ret

000001ca <decode_number>:

void decode_number(struct display *output, uint16_t number)
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	fc 01       	movw	r30, r24
 1d4:	9b 01       	movw	r18, r22
	output->ones = (number%10);
 1d6:	ca e0       	ldi	r28, 0x0A	; 10
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	cb 01       	movw	r24, r22
 1dc:	be 01       	movw	r22, r28
 1de:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodhi4>
 1e2:	80 83       	st	Z, r24
	output->tens = (number%100)/10;
 1e4:	04 e6       	ldi	r16, 0x64	; 100
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	c9 01       	movw	r24, r18
 1ea:	b8 01       	movw	r22, r16
 1ec:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodhi4>
 1f0:	be 01       	movw	r22, r28
 1f2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodhi4>
 1f6:	46 2f       	mov	r20, r22
 1f8:	61 83       	std	Z+1, r22	; 0x01
	output->hundreds = (number%1000)/100;
 1fa:	c9 01       	movw	r24, r18
 1fc:	68 ee       	ldi	r22, 0xE8	; 232
 1fe:	73 e0       	ldi	r23, 0x03	; 3
 200:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodhi4>
 204:	26 2f       	mov	r18, r22
 206:	b8 01       	movw	r22, r16
 208:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodhi4>
 20c:	62 83       	std	Z+2, r22	; 0x02
	output->thousands = number/1000;
 20e:	23 83       	std	Z+3, r18	; 0x03

	if (output->mode == ZERO_FILLED)
 210:	85 81       	ldd	r24, Z+5	; 0x05
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	51 f0       	breq	.+20     	; 0x22a <decode_number+0x60>
		return;

	if (output->thousands != 0)
 216:	22 23       	and	r18, r18
 218:	41 f4       	brne	.+16     	; 0x22a <decode_number+0x60>
		return;

	output->thousands = BLANK; // turn of digit 4 if thousands is 0
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	83 83       	std	Z+3, r24	; 0x03
	if (output->hundreds != 0)
 21e:	66 23       	and	r22, r22
 220:	21 f4       	brne	.+8      	; 0x22a <decode_number+0x60>
		return;

	output->hundreds = BLANK; // turn of digit 3 if hundreds is 0
 222:	82 83       	std	Z+2, r24	; 0x02
	if (output->tens != 0)
 224:	44 23       	and	r20, r20
 226:	09 f4       	brne	.+2      	; 0x22a <decode_number+0x60>
		return;

	output->tens = BLANK; // turn of digit 2 if tens is 0
 228:	81 83       	std	Z+1, r24	; 0x01
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <enable_segment>:

void enable_segment(uint8_t segment)
{
	switch (segment) {
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	c9 f0       	breq	.+50     	; 0x26a <enable_segment+0x36>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	28 f0       	brcs	.+10     	; 0x246 <enable_segment+0x12>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	d1 f0       	breq	.+52     	; 0x274 <enable_segment+0x40>
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	71 f0       	breq	.+28     	; 0x260 <enable_segment+0x2c>
 244:	08 95       	ret
 246:	88 23       	and	r24, r24
 248:	39 f0       	breq	.+14     	; 0x258 <enable_segment+0x24>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	d9 f7       	brne	.-10     	; 0x244 <enable_segment+0x10>
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
		break;

	case 1: // digit 2 enabled: PORTB = 0b?001????
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
 24e:	88 b3       	in	r24, 0x18	; 24
 250:	8f 79       	andi	r24, 0x9F	; 159
 252:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB4);
 254:	c4 9a       	sbi	0x18, 4	; 24
		break;
 256:	08 95       	ret

void enable_segment(uint8_t segment)
{
	switch (segment) {
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	8f 78       	andi	r24, 0x8F	; 143
 25c:	88 bb       	out	0x18, r24	; 24
		break;
 25e:	08 95       	ret
		PORTB &= ~(1 << PB6);
		PORTB |= (1 << PB4) | (1 << PB5);
		break;

	case 4: // digit 4 enabled: PORTB = 0b?100????
		PORTB &= ~(1 << PB4) & ~(1 << PB5);		
 260:	88 b3       	in	r24, 0x18	; 24
 262:	8f 7c       	andi	r24, 0xCF	; 207
 264:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB6);
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
		PORTB |= (1 << PB4);
		break;

	case 2: // colons enabled: PORTB = 0b?010????
		PORTB &= ~(1 << PB4) & ~(1 << PB6);
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	8f 7a       	andi	r24, 0xAF	; 175
 26e:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB5);
 270:	c5 9a       	sbi	0x18, 5	; 24
		break;
 272:	08 95       	ret

	case 3: // digit 3 enabled: PORTB = 0b?011????
		PORTB &= ~(1 << PB6);
 274:	c6 98       	cbi	0x18, 6	; 24
		PORTB |= (1 << PB4) | (1 << PB5);
 276:	88 b3       	in	r24, 0x18	; 24
 278:	80 63       	ori	r24, 0x30	; 48
 27a:	88 bb       	out	0x18, r24	; 24
		break;
 27c:	08 95       	ret

0000027e <set_digit>:
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 27e:	e8 e0       	ldi	r30, 0x08	; 8
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	e8 0f       	add	r30, r24
 284:	f1 1d       	adc	r31, r1
 286:	80 81       	ld	r24, Z
 288:	8b bb       	out	0x1b, r24	; 27
}
 28a:	08 95       	ret

0000028c <update_segment>:
 
void update_segment(struct display *output, uint16_t number)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
	decode_number(output, number); // get the 4 digits 
 292:	0e 94 e5 00 	call	0x1ca	; 0x1ca <decode_number>
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	8b bb       	out	0x1b, r24	; 27
void update_segment(struct display *output, uint16_t number)
{
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit
 29a:	8e 81       	ldd	r24, Y+6	; 0x06
 29c:	0e 94 1a 01 	call	0x234	; 0x234 <enable_segment>

	switch(output->cycle) { // display the digit based on the segment enabled
 2a0:	8e 81       	ldd	r24, Y+6	; 0x06
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	f1 f0       	breq	.+60     	; 0x2e2 <update_segment+0x56>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	60 f0       	brcs	.+24     	; 0x2c2 <update_segment+0x36>
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	f1 f0       	breq	.+60     	; 0x2ea <update_segment+0x5e>
 2ae:	84 30       	cpi	r24, 0x04	; 4
 2b0:	b1 f0       	breq	.+44     	; 0x2de <update_segment+0x52>
	case 2: set_colon(output);             break; // colons
	case 3: set_digit(output->hundreds);  break; // hundreds digit
	case 4: set_digit(output->thousands); break; // thousands digit
	}

	output->cycle++; // go to the next segment
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	8e 83       	std	Y+6, r24	; 0x06
	if (output->cycle > 4)
 2b6:	85 30       	cpi	r24, 0x05	; 5
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <update_segment+0x30>
		output->cycle = 0; // go back to the beginning if at the last segment	
 2ba:	1e 82       	std	Y+6, r1	; 0x06
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
 2c2:	88 23       	and	r24, r24
 2c4:	51 f0       	breq	.+20     	; 0x2da <update_segment+0x4e>
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	a1 f7       	brne	.-24     	; 0x2b2 <update_segment+0x26>
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 2ca:	e9 81       	ldd	r30, Y+1	; 0x01
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	e8 5f       	subi	r30, 0xF8	; 248
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	80 81       	ld	r24, Z
 2d4:	8b bb       	out	0x1b, r24	; 27
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	ec cf       	rjmp	.-40     	; 0x2b2 <update_segment+0x26>
 2da:	e8 81       	ld	r30, Y
 2dc:	f7 cf       	rjmp	.-18     	; 0x2cc <update_segment+0x40>
 2de:	eb 81       	ldd	r30, Y+3	; 0x03
 2e0:	f5 cf       	rjmp	.-22     	; 0x2cc <update_segment+0x40>
	}
}

void set_colon(struct display *output)
{
	PORTA = output->colon;
 2e2:	8c 81       	ldd	r24, Y+4	; 0x04
 2e4:	8b bb       	out	0x1b, r24	; 27
 2e6:	8e 81       	ldd	r24, Y+6	; 0x06
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones);      break; // ones digit
	case 1: set_digit(output->tens);      break; // tens digit
	case 2: set_colon(output);             break; // colons
 2e8:	e4 cf       	rjmp	.-56     	; 0x2b2 <update_segment+0x26>
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 2ea:	ea 81       	ldd	r30, Y+2	; 0x02
 2ec:	ef cf       	rjmp	.-34     	; 0x2cc <update_segment+0x40>

000002ee <enable_buttons>:
#define BYTE 8

void enable_buttons()
{
	// disable the segments without enabling the tristate buffer
	PORTB &= ~(1 << PB4);
 2ee:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1 << PB6) | (1 << PB5);
 2f0:	88 b3       	in	r24, 0x18	; 24
 2f2:	80 66       	ori	r24, 0x60	; 96
 2f4:	88 bb       	out	0x18, r24	; 24

	DDRA = 0; // change DDRA to accept input
 2f6:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // enable internal pullups on PORTA
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	8b bb       	out	0x1b, r24	; 27
 2fc:	85 e3       	ldi	r24, 0x35	; 53
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <enable_buttons+0x10>
 302:	00 00       	nop

	_delay_us(10);
	PORTB |= (1 << PB4) | (1 << PB5) | (1 << PB6); // enable the tristate buffer
 304:	88 b3       	in	r24, 0x18	; 24
 306:	80 67       	ori	r24, 0x70	; 112
 308:	88 bb       	out	0x18, r24	; 24
}
 30a:	08 95       	ret

0000030c <debounce_switch>:

uint8_t debounce_switch(uint16_t *state, uint8_t bit)
{
 30c:	fc 01       	movw	r30, r24
    *state = (*state << 1) | (!bit_is_clear(PINA, bit)) | 0xE000;
 30e:	89 b3       	in	r24, 0x19	; 25
 310:	20 81       	ld	r18, Z
 312:	31 81       	ldd	r19, Z+1	; 0x01
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	30 6e       	ori	r19, 0xE0	; 224
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <debounce_switch+0x16>
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <debounce_switch+0x12>
 326:	81 70       	andi	r24, 0x01	; 1
 328:	90 70       	andi	r25, 0x00	; 0
 32a:	28 2b       	or	r18, r24
 32c:	39 2b       	or	r19, r25
 32e:	31 83       	std	Z+1, r19	; 0x01
 330:	20 83       	st	Z, r18
	
    if (*state == 0xF000)
        return 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 ef       	ldi	r25, 0xF0	; 240
 336:	20 30       	cpi	r18, 0x00	; 0
 338:	39 07       	cpc	r19, r25
 33a:	09 f0       	breq	.+2      	; 0x33e <debounce_switch+0x32>
 33c:	80 e0       	ldi	r24, 0x00	; 0

    return 0;
}
 33e:	08 95       	ret

00000340 <poll_buttons>:

char poll_buttons(char reg)
{
	char buttons = 0;
 340:	e4 e1       	ldi	r30, 0x14	; 20
 342:	f1 e0       	ldi	r31, 0x01	; 1

    return 0;
}

char poll_buttons(char reg)
{
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
	char buttons = 0;
 348:	80 e0       	ldi	r24, 0x00	; 0
	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
		if (debounce_switch(&state[i], i))
			buttons |= (1 << i);
 34a:	a1 e0       	ldi	r26, 0x01	; 1
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	05 c0       	rjmp	.+10     	; 0x35a <poll_buttons+0x1a>
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
	char buttons = 0;

	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
 354:	68 30       	cpi	r22, 0x08	; 8
 356:	71 05       	cpc	r23, r1
 358:	21 f1       	breq	.+72     	; 0x3a2 <poll_buttons+0x62>
	PORTB |= (1 << PB4) | (1 << PB5) | (1 << PB6); // enable the tristate buffer
}

uint8_t debounce_switch(uint16_t *state, uint8_t bit)
{
    *state = (*state << 1) | (!bit_is_clear(PINA, bit)) | 0xE000;
 35a:	49 b3       	in	r20, 0x19	; 25
 35c:	20 81       	ld	r18, Z
 35e:	31 81       	ldd	r19, Z+1	; 0x01
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	30 6e       	ori	r19, 0xE0	; 224
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	06 2e       	mov	r0, r22
 36a:	02 c0       	rjmp	.+4      	; 0x370 <poll_buttons+0x30>
 36c:	55 95       	asr	r21
 36e:	47 95       	ror	r20
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <poll_buttons+0x2c>
 374:	41 70       	andi	r20, 0x01	; 1
 376:	50 70       	andi	r21, 0x00	; 0
 378:	24 2b       	or	r18, r20
 37a:	35 2b       	or	r19, r21
 37c:	21 93       	st	Z+, r18
 37e:	31 93       	st	Z+, r19
	
    if (*state == 0xF000)
 380:	40 ef       	ldi	r20, 0xF0	; 240
 382:	20 30       	cpi	r18, 0x00	; 0
 384:	34 07       	cpc	r19, r20
 386:	21 f7       	brne	.-56     	; 0x350 <poll_buttons+0x10>
	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
		if (debounce_switch(&state[i], i))
			buttons |= (1 << i);
 388:	9d 01       	movw	r18, r26
 38a:	06 2e       	mov	r0, r22
 38c:	02 c0       	rjmp	.+4      	; 0x392 <poll_buttons+0x52>
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <poll_buttons+0x4e>
 396:	82 2b       	or	r24, r18
 398:	6f 5f       	subi	r22, 0xFF	; 255
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
	char buttons = 0;

	static uint16_t state[] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	uint8_t i;
	for (i = 0; i < BYTE; i++) {
 39c:	68 30       	cpi	r22, 0x08	; 8
 39e:	71 05       	cpc	r23, r1
 3a0:	e1 f6       	brne	.-72     	; 0x35a <poll_buttons+0x1a>
		if (debounce_switch(&state[i], i))
			buttons |= (1 << i);
	}

	return buttons;
}
 3a2:	08 95       	ret

000003a4 <__udivmodhi4>:
 3a4:	aa 1b       	sub	r26, r26
 3a6:	bb 1b       	sub	r27, r27
 3a8:	51 e1       	ldi	r21, 0x11	; 17
 3aa:	07 c0       	rjmp	.+14     	; 0x3ba <__udivmodhi4_ep>

000003ac <__udivmodhi4_loop>:
 3ac:	aa 1f       	adc	r26, r26
 3ae:	bb 1f       	adc	r27, r27
 3b0:	a6 17       	cp	r26, r22
 3b2:	b7 07       	cpc	r27, r23
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <__udivmodhi4_ep>
 3b6:	a6 1b       	sub	r26, r22
 3b8:	b7 0b       	sbc	r27, r23

000003ba <__udivmodhi4_ep>:
 3ba:	88 1f       	adc	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	5a 95       	dec	r21
 3c0:	a9 f7       	brne	.-22     	; 0x3ac <__udivmodhi4_loop>
 3c2:	80 95       	com	r24
 3c4:	90 95       	com	r25
 3c6:	bc 01       	movw	r22, r24
 3c8:	cd 01       	movw	r24, r26
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
