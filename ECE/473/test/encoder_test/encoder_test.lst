
encoder_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003ae  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001890  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bff  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_12>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <util/delay.h>
#include <encoder_driver.h>
#include <led_driver.h>

int main()
{   
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	29 97       	sbiw	r28, 0x09	; 9
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xF0;
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	87 bb       	out	0x17, r24	; 23

	struct display output;
	init_display_struct(&output);
  e2:	8e 01       	movw	r16, r28
  e4:	0b 5f       	subi	r16, 0xFB	; 251
  e6:	1f 4f       	sbci	r17, 0xFF	; 255
  e8:	c8 01       	movw	r24, r16
  ea:	0e 94 b8 00 	call	0x170	; 0x170 <init_display_struct>
	uint8_t lnumber = 0;

	uint8_t llast = 0;
	uint8_t rlast = 0;

	enable_leds();
  ee:	0e 94 b0 00 	call	0x160	; 0x160 <enable_leds>
	enable_encoders();
  f2:	0e 94 b7 01 	call	0x36e	; 0x36e <enable_encoders>

	struct encoder_state encoders;
	init_encoder_struct(&encoders);
  f6:	7e 01       	movw	r14, r28
  f8:	08 94       	sec
  fa:	e1 1c       	adc	r14, r1
  fc:	f1 1c       	adc	r15, r1
  fe:	c7 01       	movw	r24, r14
 100:	0e 94 60 01 	call	0x2c0	; 0x2c0 <init_encoder_struct>
	struct display output;
	init_display_struct(&output);
	
	uint8_t number = 0;
	uint8_t rnumber = 0;
	uint8_t lnumber = 0;
 104:	cc 24       	eor	r12, r12

	struct display output;
	init_display_struct(&output);
	
	uint8_t number = 0;
	uint8_t rnumber = 0;
 106:	dd 24       	eor	r13, r13

	struct encoder_state encoders;
	init_encoder_struct(&encoders);

	while (1) {
		number = poll_encoders();
 108:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <poll_encoders>
 10c:	68 2f       	mov	r22, r24
		get_direction(&encoders, number);
 10e:	c7 01       	movw	r24, r14
 110:	0e 94 88 01 	call	0x310	; 0x310 <get_direction>

		if (encoders.left_dir != 2)
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	31 f0       	breq	.+12     	; 0x126 <main+0x68>
			rnumber = (1+encoders.left_dir)*10;
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	88 0f       	add	r24, r24
 11e:	d8 2e       	mov	r13, r24
 120:	dd 0c       	add	r13, r13
 122:	dd 0c       	add	r13, r13
 124:	d8 0e       	add	r13, r24

		if (encoders.right_dir != 2)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	09 f0       	breq	.+2      	; 0x12e <main+0x70>
 12c:	c8 2e       	mov	r12, r24
			lnumber = encoders.right_dir;

		update_segment(&output, rnumber+lnumber);
 12e:	6d 2d       	mov	r22, r13
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	6c 0d       	add	r22, r12
 134:	71 1d       	adc	r23, r1
 136:	c8 01       	movw	r24, r16
 138:	0e 94 1e 01 	call	0x23c	; 0x23c <update_segment>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x80>
 142:	00 00       	nop
 144:	e1 cf       	rjmp	.-62     	; 0x108 <main+0x4a>

00000146 <spi_init>:
#include <avr/io.h>
#include "macros.h"

void spi_init()
{
	DDRB |= 0x07;  //set output mode for SS, MOSI, SCLK
 146:	87 b3       	in	r24, 0x17	; 23
 148:	87 60       	ori	r24, 0x07	; 7
 14a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR); //set master mode, clk low on idle, leading edge sample
 14c:	80 e5       	ldi	r24, 0x50	; 80
 14e:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X);  //set choos
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	8e b9       	out	0x0e, r24	; 14
}
 154:	08 95       	ret

00000156 <spi_send>:

char spi_send(char msg)
{
	SPDR = msg;
 156:	8f b9       	out	0x0f, r24	; 15

	while (!ISSET(SPSR, SPIF));
 158:	77 9b       	sbis	0x0e, 7	; 14
 15a:	fe cf       	rjmp	.-4      	; 0x158 <spi_send+0x2>
	
	return SPDR;
 15c:	8f b1       	in	r24, 0x0f	; 15
}
 15e:	08 95       	ret

00000160 <enable_leds>:
							 SIX, SEVEN, EIGHT, NINE, OFF };

void enable_leds()
{
	// disable the tristate buffer without enabling a segment
	PORTB &= ~(1 << PB4);
 160:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1 << PB6) | (1 << PB5);
 162:	88 b3       	in	r24, 0x18	; 24
 164:	80 66       	ori	r24, 0x60	; 96
 166:	88 bb       	out	0x18, r24	; 24

	//_delay_us(25);

	DDRA = 0xFF; // make PORTA all outputs
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;
 16c:	8b bb       	out	0x1b, r24	; 27
}
 16e:	08 95       	ret

00000170 <init_display_struct>:

void init_display_struct(struct display *output)
{
 170:	fc 01       	movw	r30, r24
	output->ones = 0;
 172:	10 82       	st	Z, r1
	output->tens = 0;
 174:	11 82       	std	Z+1, r1	; 0x01
	output->hundreds = 0;
 176:	12 82       	std	Z+2, r1	; 0x02
	output->thousands = 0;
 178:	13 82       	std	Z+3, r1	; 0x03

	output->cycle = 0;
 17a:	14 82       	std	Z+4, r1	; 0x04
}
 17c:	08 95       	ret

0000017e <set_colon>:

void set_colon(struct display *output)
{

}
 17e:	08 95       	ret

00000180 <decode_number>:

void decode_number(struct display *output, uint16_t number)
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	fc 01       	movw	r30, r24
 18a:	9b 01       	movw	r18, r22
	output->ones = (number%10);
 18c:	ca e0       	ldi	r28, 0x0A	; 10
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	cb 01       	movw	r24, r22
 192:	be 01       	movw	r22, r28
 194:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodhi4>
 198:	80 83       	st	Z, r24
	output->tens = (number%100)/10;
 19a:	04 e6       	ldi	r16, 0x64	; 100
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	c9 01       	movw	r24, r18
 1a0:	b8 01       	movw	r22, r16
 1a2:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodhi4>
 1a6:	be 01       	movw	r22, r28
 1a8:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodhi4>
 1ac:	46 2f       	mov	r20, r22
 1ae:	61 83       	std	Z+1, r22	; 0x01
	output->hundreds = (number%1000)/100;
 1b0:	c9 01       	movw	r24, r18
 1b2:	68 ee       	ldi	r22, 0xE8	; 232
 1b4:	73 e0       	ldi	r23, 0x03	; 3
 1b6:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodhi4>
 1ba:	26 2f       	mov	r18, r22
 1bc:	b8 01       	movw	r22, r16
 1be:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodhi4>
 1c2:	62 83       	std	Z+2, r22	; 0x02
	output->thousands = number/1000;
 1c4:	23 83       	std	Z+3, r18	; 0x03

	if (output->thousands != 0)
 1c6:	22 23       	and	r18, r18
 1c8:	41 f4       	brne	.+16     	; 0x1da <decode_number+0x5a>
		return;

	output->thousands = BLANK; // turn of digit 4 if thousands is 0
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	83 83       	std	Z+3, r24	; 0x03
	if (output->hundreds != 0)
 1ce:	66 23       	and	r22, r22
 1d0:	21 f4       	brne	.+8      	; 0x1da <decode_number+0x5a>
		return;

	output->hundreds = BLANK; // turn of digit 3 if hundreds is 0
 1d2:	82 83       	std	Z+2, r24	; 0x02
	if (output->tens != 0)
 1d4:	44 23       	and	r20, r20
 1d6:	09 f4       	brne	.+2      	; 0x1da <decode_number+0x5a>
		return;

	output->tens = BLANK; // turn of digit 2 if tens is 0
 1d8:	81 83       	std	Z+1, r24	; 0x01
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <enable_segment>:

void enable_segment(uint8_t segment)
{
	switch (segment) {
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c9 f0       	breq	.+50     	; 0x21a <enable_segment+0x36>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <enable_segment+0x12>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	d1 f0       	breq	.+52     	; 0x224 <enable_segment+0x40>
 1f0:	84 30       	cpi	r24, 0x04	; 4
 1f2:	71 f0       	breq	.+28     	; 0x210 <enable_segment+0x2c>
 1f4:	08 95       	ret
 1f6:	88 23       	and	r24, r24
 1f8:	39 f0       	breq	.+14     	; 0x208 <enable_segment+0x24>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <enable_segment+0x10>
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
		break;

	case 1: // digit 2 enabled: PORTB = 0b?001????
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	8f 79       	andi	r24, 0x9F	; 159
 202:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB4);
 204:	c4 9a       	sbi	0x18, 4	; 24
		break;
 206:	08 95       	ret

void enable_segment(uint8_t segment)
{
	switch (segment) {
	case 0: // digit 1 enabled: PORTB = 0b?000????
		PORTB &= ~(1 << PB4) & ~(1 << PB5) & ~(1 << PB6);
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	8f 78       	andi	r24, 0x8F	; 143
 20c:	88 bb       	out	0x18, r24	; 24
		break;
 20e:	08 95       	ret
		PORTB &= ~(1 << PB6);
		PORTB |= (1 << PB4) | (1 << PB5);
		break;

	case 4: // digit 4 enabled: PORTB = 0b?100????
		PORTB &= ~(1 << PB4) & ~(1 << PB5);		
 210:	88 b3       	in	r24, 0x18	; 24
 212:	8f 7c       	andi	r24, 0xCF	; 207
 214:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB6);
 216:	c6 9a       	sbi	0x18, 6	; 24
 218:	08 95       	ret
		PORTB &= ~(1 << PB5) & ~(1 << PB6);
		PORTB |= (1 << PB4);
		break;

	case 2: // colons enabled: PORTB = 0b?010????
		PORTB &= ~(1 << PB4) & ~(1 << PB6);
 21a:	88 b3       	in	r24, 0x18	; 24
 21c:	8f 7a       	andi	r24, 0xAF	; 175
 21e:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB5);
 220:	c5 9a       	sbi	0x18, 5	; 24
		break;
 222:	08 95       	ret

	case 3: // digit 3 enabled: PORTB = 0b?011????
		PORTB &= ~(1 << PB6);
 224:	c6 98       	cbi	0x18, 6	; 24
		PORTB |= (1 << PB4) | (1 << PB5);
 226:	88 b3       	in	r24, 0x18	; 24
 228:	80 63       	ori	r24, 0x30	; 48
 22a:	88 bb       	out	0x18, r24	; 24
		break;
 22c:	08 95       	ret

0000022e <set_digit>:
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 22e:	e0 e0       	ldi	r30, 0x00	; 0
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	e8 0f       	add	r30, r24
 234:	f1 1d       	adc	r31, r1
 236:	80 81       	ld	r24, Z
 238:	8b bb       	out	0x1b, r24	; 27
}
 23a:	08 95       	ret

0000023c <update_segment>:
 
void update_segment(struct display *output, uint16_t number)
{
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
	decode_number(output, number); // get the 4 digits 
 244:	0e 94 c0 00 	call	0x180	; 0x180 <decode_number>
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 248:	1f ef       	ldi	r17, 0xFF	; 255
 24a:	1b bb       	out	0x1b, r17	; 27
void update_segment(struct display *output, uint16_t number)
{
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit
 24c:	8c 81       	ldd	r24, Y+4	; 0x04
 24e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <enable_segment>

	switch(output->cycle) { // display the digit based on the segment enabled
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	f9 f0       	breq	.+62     	; 0x296 <update_segment+0x5a>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	68 f0       	brcs	.+26     	; 0x276 <update_segment+0x3a>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	f1 f0       	breq	.+60     	; 0x29c <update_segment+0x60>
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	b9 f0       	breq	.+46     	; 0x292 <update_segment+0x56>
	case 2: set_digit(BLANK);             break; // colons
	case 3: set_digit(output->hundreds);  break; // hundreds digit
	case 4: set_digit(output->thousands); break; // thousands digit
	}

	output->cycle++; // go to the next segment
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	8c 83       	std	Y+4, r24	; 0x04
	if (output->cycle > 4)
 268:	85 30       	cpi	r24, 0x05	; 5
 26a:	08 f0       	brcs	.+2      	; 0x26e <update_segment+0x32>
		output->cycle = 0; // go back to the beginning if at the last segment	
 26c:	1c 82       	std	Y+4, r1	; 0x04
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret
	decode_number(output, number); // get the 4 digits 

	set_digit(BLANK); // blank before switching to prevent ghosting
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
 276:	88 23       	and	r24, r24
 278:	51 f0       	breq	.+20     	; 0x28e <update_segment+0x52>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	99 f7       	brne	.-26     	; 0x264 <update_segment+0x28>
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 27e:	e9 81       	ldd	r30, Y+1	; 0x01
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	e0 50       	subi	r30, 0x00	; 0
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	80 81       	ld	r24, Z
 288:	8b bb       	out	0x1b, r24	; 27
 28a:	8c 81       	ldd	r24, Y+4	; 0x04
 28c:	eb cf       	rjmp	.-42     	; 0x264 <update_segment+0x28>
 28e:	e8 81       	ld	r30, Y
 290:	f7 cf       	rjmp	.-18     	; 0x280 <update_segment+0x44>
 292:	eb 81       	ldd	r30, Y+3	; 0x03
 294:	f5 cf       	rjmp	.-22     	; 0x280 <update_segment+0x44>
 296:	1b bb       	out	0x1b, r17	; 27
 298:	8c 81       	ldd	r24, Y+4	; 0x04
	enable_segment(output->cycle); // enable the correct digit

	switch(output->cycle) { // display the digit based on the segment enabled
	case 0: set_digit(output->ones);      break; // ones digit
	case 1: set_digit(output->tens);      break; // tens digit
	case 2: set_digit(BLANK);             break; // colons
 29a:	e4 cf       	rjmp	.-56     	; 0x264 <update_segment+0x28>
	}
}

void set_digit(uint8_t digit)
{
	PORTA = NUMBERS[digit];
 29c:	ea 81       	ldd	r30, Y+2	; 0x02
 29e:	f0 cf       	rjmp	.-32     	; 0x280 <update_segment+0x44>

000002a0 <__vector_12>:
#include "spi_driver.h"
#include "encoder_driver.h"
#include "macros.h"

ISR(TIMER1_COMPA_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1

}
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <poll_encoders>:

char poll_encoders()
{
	strobeh(PORTE, PE6);
 2b4:	1e 98       	cbi	0x03, 6	; 3
 2b6:	1e 9a       	sbi	0x03, 6	; 3
	
	return spi_send(0x00);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 ab 00 	call	0x156	; 0x156 <spi_send>
}
 2be:	08 95       	ret

000002c0 <init_encoder_struct>:

void init_encoder_struct(struct encoder_state *state)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	state->left_dir = STOPPED;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	88 83       	st	Y, r24
	state->right_dir = STOPPED;
 2ca:	89 83       	std	Y+1, r24	; 0x01

	char encoders = poll_encoders();
 2cc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <poll_encoders>
	state->left_last = LEFT_ENCODER(encoders);
 2d0:	98 2f       	mov	r25, r24
 2d2:	93 70       	andi	r25, 0x03	; 3
 2d4:	9a 83       	std	Y+2, r25	; 0x02
	state->right_last = RIGHT_ENCODER(encoders);
 2d6:	99 27       	eor	r25, r25
 2d8:	87 fd       	sbrc	r24, 7
 2da:	90 95       	com	r25
 2dc:	8c 70       	andi	r24, 0x0C	; 12
 2de:	90 70       	andi	r25, 0x00	; 0
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	8b 83       	std	Y+3, r24	; 0x03
}						 
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <determine_direction>:
				
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
 2f0:	86 17       	cp	r24, r22
 2f2:	21 f0       	breq	.+8      	; 0x2fc <determine_direction+0xc>
		return STOPPED;
	
	if (cur == 0x00 && last == 0x01)
 2f4:	88 23       	and	r24, r24
 2f6:	21 f4       	brne	.+8      	; 0x300 <determine_direction+0x10>
 2f8:	61 30       	cpi	r22, 0x01	; 1
 2fa:	41 f0       	breq	.+16     	; 0x30c <determine_direction+0x1c>
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
		return FORWARD;

	return STOPPED;
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	08 95       	ret
		return STOPPED;
	
	if (cur == 0x00 && last == 0x01)
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	e1 f7       	brne	.-8      	; 0x2fc <determine_direction+0xc>
 304:	66 23       	and	r22, r22
 306:	d1 f7       	brne	.-12     	; 0x2fc <determine_direction+0xc>
		return FORWARD;
 308:	81 e0       	ldi	r24, 0x01	; 1

	return STOPPED;
}
 30a:	08 95       	ret
{
	if (cur == last)
		return STOPPED;
	
	if (cur == 0x00 && last == 0x01)
		return REVERSE;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret

00000310 <get_direction>:

	return STOPPED;
}

void get_direction(struct encoder_state *state, uint8_t encoders)
{
 310:	fc 01       	movw	r30, r24
	state->left_dir = determine_direction(LEFT_ENCODER(encoders), state->left_last);
 312:	86 2f       	mov	r24, r22
 314:	83 70       	andi	r24, 0x03	; 3
 316:	92 81       	ldd	r25, Z+2	; 0x02
	state->right_last = RIGHT_ENCODER(encoders);
}						 
				
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
 318:	89 17       	cp	r24, r25
 31a:	21 f0       	breq	.+8      	; 0x324 <get_direction+0x14>
		return STOPPED;
	
	if (cur == 0x00 && last == 0x01)
 31c:	88 23       	and	r24, r24
 31e:	e9 f4       	brne	.+58     	; 0x35a <get_direction+0x4a>
 320:	91 30       	cpi	r25, 0x01	; 1
 322:	09 f1       	breq	.+66     	; 0x366 <get_direction+0x56>
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
		return FORWARD;

	return STOPPED;
 324:	92 e0       	ldi	r25, 0x02	; 2
}

void get_direction(struct encoder_state *state, uint8_t encoders)
{
	state->left_dir = determine_direction(LEFT_ENCODER(encoders), state->left_last);
 326:	90 83       	st	Z, r25
	state->right_dir = determine_direction(RIGHT_ENCODER(encoders), state->right_last);
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	6c 70       	andi	r22, 0x0C	; 12
 32c:	70 70       	andi	r23, 0x00	; 0
 32e:	75 95       	asr	r23
 330:	67 95       	ror	r22
 332:	75 95       	asr	r23
 334:	67 95       	ror	r22
 336:	93 81       	ldd	r25, Z+3	; 0x03
	state->right_last = RIGHT_ENCODER(encoders);
}						 
				
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
 338:	69 17       	cp	r22, r25
 33a:	31 f0       	breq	.+12     	; 0x348 <get_direction+0x38>
		return STOPPED;
	
	if (cur == 0x00 && last == 0x01)
 33c:	66 23       	and	r22, r22
 33e:	49 f0       	breq	.+18     	; 0x352 <get_direction+0x42>
		return REVERSE;

	if (cur == 0x01 && last == 0x00)
 340:	61 30       	cpi	r22, 0x01	; 1
 342:	11 f4       	brne	.+4      	; 0x348 <get_direction+0x38>
 344:	99 23       	and	r25, r25
 346:	89 f0       	breq	.+34     	; 0x36a <get_direction+0x5a>
		return FORWARD;

	return STOPPED;
 348:	92 e0       	ldi	r25, 0x02	; 2
}

void get_direction(struct encoder_state *state, uint8_t encoders)
{
	state->left_dir = determine_direction(LEFT_ENCODER(encoders), state->left_last);
	state->right_dir = determine_direction(RIGHT_ENCODER(encoders), state->right_last);
 34a:	91 83       	std	Z+1, r25	; 0x01

	state->left_last = LEFT_ENCODER(encoders);
 34c:	82 83       	std	Z+2, r24	; 0x02
	state->right_last = RIGHT_ENCODER(encoders);
 34e:	63 83       	std	Z+3, r22	; 0x03
}
 350:	08 95       	ret
uint8_t determine_direction(uint8_t cur, uint8_t last)
{
	if (cur == last)
		return STOPPED;
	
	if (cur == 0x00 && last == 0x01)
 352:	91 30       	cpi	r25, 0x01	; 1
 354:	c9 f7       	brne	.-14     	; 0x348 <get_direction+0x38>
		return REVERSE;
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	f8 cf       	rjmp	.-16     	; 0x34a <get_direction+0x3a>

	if (cur == 0x01 && last == 0x00)
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	19 f7       	brne	.-58     	; 0x324 <get_direction+0x14>
 35e:	99 23       	and	r25, r25
 360:	09 f7       	brne	.-62     	; 0x324 <get_direction+0x14>
		return FORWARD;
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	e0 cf       	rjmp	.-64     	; 0x326 <get_direction+0x16>
{
	if (cur == last)
		return STOPPED;
	
	if (cur == 0x00 && last == 0x01)
		return REVERSE;
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	de cf       	rjmp	.-68     	; 0x326 <get_direction+0x16>

	if (cur == 0x01 && last == 0x00)
		return FORWARD;
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	ee cf       	rjmp	.-36     	; 0x34a <get_direction+0x3a>

0000036e <enable_encoders>:
	state->right_last = RIGHT_ENCODER(encoders);
}

void enable_encoders()
{
	DDRE |= 0x40;
 36e:	16 9a       	sbi	0x02, 6	; 2
	
	SETBIT(PORTE, PE6);
 370:	1e 9a       	sbi	0x03, 6	; 3
	spi_init();
 372:	0e 94 a3 00 	call	0x146	; 0x146 <spi_init>
}
 376:	08 95       	ret

00000378 <init_encoder_timers>:

void init_encoder_timers()
{
	
}
 378:	08 95       	ret

0000037a <get_encoder_state>:

uint8_t get_encoder_state(char byte)
{
	strobeh(PORTE, PE6);
 37a:	1e 98       	cbi	0x03, 6	; 3
 37c:	1e 9a       	sbi	0x03, 6	; 3

	return 0;
}
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret

00000382 <__udivmodhi4>:
 382:	aa 1b       	sub	r26, r26
 384:	bb 1b       	sub	r27, r27
 386:	51 e1       	ldi	r21, 0x11	; 17
 388:	07 c0       	rjmp	.+14     	; 0x398 <__udivmodhi4_ep>

0000038a <__udivmodhi4_loop>:
 38a:	aa 1f       	adc	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	a6 17       	cp	r26, r22
 390:	b7 07       	cpc	r27, r23
 392:	10 f0       	brcs	.+4      	; 0x398 <__udivmodhi4_ep>
 394:	a6 1b       	sub	r26, r22
 396:	b7 0b       	sbc	r27, r23

00000398 <__udivmodhi4_ep>:
 398:	88 1f       	adc	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	5a 95       	dec	r21
 39e:	a9 f7       	brne	.-22     	; 0x38a <__udivmodhi4_loop>
 3a0:	80 95       	com	r24
 3a2:	90 95       	com	r25
 3a4:	bc 01       	movw	r22, r24
 3a6:	cd 01       	movw	r24, r26
 3a8:	08 95       	ret

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
