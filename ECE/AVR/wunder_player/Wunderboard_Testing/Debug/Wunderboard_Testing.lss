
Wunderboard_Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000480  00800100  0000516c  00005200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000516c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a65  00800580  00800580  00005680  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00005680  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003116  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  0000902e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001597  00000000  00000000  000099eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d5c  00000000  00000000  0000af84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fd  00000000  00000000  0000bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000060ee  00000000  00000000  0000c4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000125cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <__vector_1>
       8:	0c 94 aa 27 	jmp	0x4f54	; 0x4f54 <__vector_2>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 f1 27 	jmp	0x4fe2	; 0x4fe2 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      94:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	15 e0       	ldi	r17, 0x05	; 5
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec e6       	ldi	r30, 0x6C	; 108
      ac:	f1 e5       	ldi	r31, 0x51	; 81
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 38       	cpi	r26, 0x80	; 128
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
      ba:	1f e0       	ldi	r17, 0x0F	; 15
      bc:	a0 e8       	ldi	r26, 0x80	; 128
      be:	b5 e0       	ldi	r27, 0x05	; 5
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a5 3e       	cpi	r26, 0xE5	; 229
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 1a 28 	call	0x5034	; 0x5034 <main>
      ce:	0c 94 b4 28 	jmp	0x5168	; 0x5168 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <initializeUART>:
 */
#include "debug.h"

unsigned char initializeUART(void){
	/* Set baud rate */
	UBRR1H = 0;
      d6:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 12;
      da:	8c e0       	ldi	r24, 0x0C	; 12
      dc:	80 93 cc 00 	sts	0x00CC, r24
	
	/* Set the U2X1 bit */
	UCSR1A = (1 << U2X1);
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	80 93 c8 00 	sts	0x00C8, r24
	
	/* Enable transmitter */
	UCSR1B = (1 << TXEN1);
      e6:	88 e0       	ldi	r24, 0x08	; 8
      e8:	80 93 c9 00 	sts	0x00C9, r24
	
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
      ec:	86 e0       	ldi	r24, 0x06	; 6
      ee:	80 93 ca 00 	sts	0x00CA, r24
	
	return 0;
}
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	08 95       	ret

000000f6 <sendByteUART>:

unsigned char sendByteUART(uint8_t data){
	while (!(UCSR1A & (1 << UDRE1)));
      f6:	e8 ec       	ldi	r30, 0xC8	; 200
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	90 81       	ld	r25, Z
      fc:	95 ff       	sbrs	r25, 5
      fe:	fd cf       	rjmp	.-6      	; 0xfa <sendByteUART+0x4>

	UDR1 = data;
     100:	80 93 ce 00 	sts	0x00CE, r24

	return 0;
}
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	08 95       	ret

00000108 <sendStringUART>:

unsigned char sendStringUART(char * str){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	ec 01       	movw	r28, r24
	while(* str){
     10e:	88 81       	ld	r24, Y
     110:	88 23       	and	r24, r24
     112:	31 f0       	breq	.+12     	; 0x120 <sendStringUART+0x18>
	UDR1 = data;

	return 0;
}

unsigned char sendStringUART(char * str){
     114:	21 96       	adiw	r28, 0x01	; 1
	while(* str){
		sendByteUART(* str);
     116:	0e 94 7b 00 	call	0xf6	; 0xf6 <sendByteUART>

	return 0;
}

unsigned char sendStringUART(char * str){
	while(* str){
     11a:	89 91       	ld	r24, Y+
     11c:	88 23       	and	r24, r24
     11e:	d9 f7       	brne	.-10     	; 0x116 <sendStringUART+0xe>
		sendByteUART(* str);
		str++;
	}
	
	return 0;
}
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <sendDiskError>:

void sendDiskError(FRESULT err){
	if(err == FR_DISK_ERR)
     128:	81 30       	cpi	r24, 0x01	; 1
     12a:	29 f4       	brne	.+10     	; 0x136 <sendDiskError+0xe>
		sendStringUART("hard error occurred in the low level disk I/O layer\r\n");
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     134:	08 95       	ret
	else if(err == FR_INT_ERR)
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	29 f4       	brne	.+10     	; 0x144 <sendDiskError+0x1c>
		sendStringUART("Assertion failed\r\n");
     13a:	86 e3       	ldi	r24, 0x36	; 54
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     142:	08 95       	ret
	else if(err == FR_NOT_READY)
     144:	83 30       	cpi	r24, 0x03	; 3
     146:	29 f4       	brne	.+10     	; 0x152 <sendDiskError+0x2a>
		sendStringUART("The physical drive cannot work\r\n");
     148:	89 e4       	ldi	r24, 0x49	; 73
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     150:	08 95       	ret
	else if(err == FR_NO_FILE)
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	29 f4       	brne	.+10     	; 0x160 <sendDiskError+0x38>
		sendStringUART("Could not find the file\r\n");
     156:	8a e6       	ldi	r24, 0x6A	; 106
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     15e:	08 95       	ret
	else if(err == FR_NO_PATH)
     160:	85 30       	cpi	r24, 0x05	; 5
     162:	29 f4       	brne	.+10     	; 0x16e <sendDiskError+0x46>
		sendStringUART("Could not find the path\r\n");
     164:	84 e8       	ldi	r24, 0x84	; 132
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     16c:	08 95       	ret
	else if(err == FR_INVALID_NAME)
     16e:	86 30       	cpi	r24, 0x06	; 6
     170:	29 f4       	brne	.+10     	; 0x17c <sendDiskError+0x54>
		sendStringUART("The path name format is invalid\r\n");
     172:	8e e9       	ldi	r24, 0x9E	; 158
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     17a:	08 95       	ret
	else if(err == FR_DENIED)
     17c:	87 30       	cpi	r24, 0x07	; 7
     17e:	29 f4       	brne	.+10     	; 0x18a <sendDiskError+0x62>
		sendStringUART("Access denied due to prohibited access or directory full\r\n");
     180:	80 ec       	ldi	r24, 0xC0	; 192
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     188:	08 95       	ret
	else if(err == FR_EXIST)
     18a:	88 30       	cpi	r24, 0x08	; 8
     18c:	29 f4       	brne	.+10     	; 0x198 <sendDiskError+0x70>
		sendStringUART("Access denied due to prohibited access\r\n");
     18e:	8b ef       	ldi	r24, 0xFB	; 251
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     196:	08 95       	ret
	else if(err == FR_INVALID_OBJECT)
     198:	89 30       	cpi	r24, 0x09	; 9
     19a:	29 f4       	brne	.+10     	; 0x1a6 <sendDiskError+0x7e>
		sendStringUART("The file/directory object is invalid\r\n");
     19c:	84 e2       	ldi	r24, 0x24	; 36
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     1a4:	08 95       	ret
	else if(err == FR_WRITE_PROTECTED)
     1a6:	8a 30       	cpi	r24, 0x0A	; 10
     1a8:	29 f4       	brne	.+10     	; 0x1b4 <sendDiskError+0x8c>
		sendStringUART("The physical drive is write protected\r\n");
     1aa:	8b e4       	ldi	r24, 0x4B	; 75
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     1b2:	08 95       	ret
	else if(err == FR_INVALID_DRIVE)
     1b4:	8b 30       	cpi	r24, 0x0B	; 11
     1b6:	29 f4       	brne	.+10     	; 0x1c2 <sendDiskError+0x9a>
		sendStringUART("The logical drive number is invalid\r\n");
     1b8:	83 e7       	ldi	r24, 0x73	; 115
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     1c0:	08 95       	ret
	else if(err == FR_NOT_ENABLED)
     1c2:	8c 30       	cpi	r24, 0x0C	; 12
     1c4:	29 f4       	brne	.+10     	; 0x1d0 <sendDiskError+0xa8>
		sendStringUART("The volume has no work area\r\n");
     1c6:	89 e9       	ldi	r24, 0x99	; 153
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     1ce:	08 95       	ret
	else if(err == FR_NO_FILESYSTEM)
     1d0:	8d 30       	cpi	r24, 0x0D	; 13
     1d2:	29 f4       	brne	.+10     	; 0x1de <sendDiskError+0xb6>
		sendStringUART("There is no valid FAT volume on the physical drive\r\n");
     1d4:	87 eb       	ldi	r24, 0xB7	; 183
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     1dc:	08 95       	ret
	else if(err == FR_MKFS_ABORTED)
     1de:	8e 30       	cpi	r24, 0x0E	; 14
     1e0:	29 f4       	brne	.+10     	; 0x1ec <sendDiskError+0xc4>
		sendStringUART("The f_mkfs() aborted due to any parameter error\r\n");
     1e2:	8c ee       	ldi	r24, 0xEC	; 236
     1e4:	92 e0       	ldi	r25, 0x02	; 2
     1e6:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     1ea:	08 95       	ret
	else if(err == FR_TIMEOUT)
     1ec:	8f 30       	cpi	r24, 0x0F	; 15
     1ee:	29 f4       	brne	.+10     	; 0x1fa <sendDiskError+0xd2>
		sendStringUART("Could not get a grant to access the volume within defined period\r\n");
     1f0:	8e e1       	ldi	r24, 0x1E	; 30
     1f2:	93 e0       	ldi	r25, 0x03	; 3
     1f4:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     1f8:	08 95       	ret
	else if(err == FR_LOCKED)
     1fa:	80 31       	cpi	r24, 0x10	; 16
     1fc:	29 f4       	brne	.+10     	; 0x208 <sendDiskError+0xe0>
		sendStringUART("The operation is rejected according to the file sharing policy\r\n");
     1fe:	81 e6       	ldi	r24, 0x61	; 97
     200:	93 e0       	ldi	r25, 0x03	; 3
     202:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     206:	08 95       	ret
	else if(err == FR_NOT_ENOUGH_CORE)
     208:	81 31       	cpi	r24, 0x11	; 17
     20a:	29 f4       	brne	.+10     	; 0x216 <sendDiskError+0xee>
		sendStringUART("LFN working buffer could not be allocated\r\n");
     20c:	82 ea       	ldi	r24, 0xA2	; 162
     20e:	93 e0       	ldi	r25, 0x03	; 3
     210:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     214:	08 95       	ret
	else if(err == FR_TOO_MANY_OPEN_FILES)
     216:	82 31       	cpi	r24, 0x12	; 18
     218:	29 f4       	brne	.+10     	; 0x224 <sendDiskError+0xfc>
		sendStringUART("Number of open files > _FS_SHARE\r\n");
     21a:	8e ec       	ldi	r24, 0xCE	; 206
     21c:	93 e0       	ldi	r25, 0x03	; 3
     21e:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     222:	08 95       	ret
	else
		sendStringUART("Unknown SD Error\r\n");
     224:	81 ef       	ldi	r24, 0xF1	; 241
     226:	93 e0       	ldi	r25, 0x03	; 3
     228:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     22c:	08 95       	ret

0000022e <sendMountError>:
}

void sendMountError(uint8_t err){
	if(err == ERR_FMOUNT)
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	29 f4       	brne	.+10     	; 0x23c <sendMountError+0xe>
		sendStringUART("Error mounting SD card\r\n");
     232:	84 e0       	ldi	r24, 0x04	; 4
     234:	94 e0       	ldi	r25, 0x04	; 4
     236:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     23a:	08 95       	ret
	else if(err == ERR_NODISK)
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	29 f4       	brne	.+10     	; 0x24a <sendMountError+0x1c>
		sendStringUART("No SD card detected\r\n");
     240:	8d e1       	ldi	r24, 0x1D	; 29
     242:	94 e0       	ldi	r25, 0x04	; 4
     244:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     248:	08 95       	ret
	else if(err == ERR_NOINIT)
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	29 f4       	brne	.+10     	; 0x258 <sendMountError+0x2a>
		sendStringUART("Unable to initialize FAT filesystem\r\n");
     24e:	83 e3       	ldi	r24, 0x33	; 51
     250:	94 e0       	ldi	r25, 0x04	; 4
     252:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     256:	08 95       	ret
	else if(err == ERR_PROTECTED)
     258:	84 30       	cpi	r24, 0x04	; 4
     25a:	29 f4       	brne	.+10     	; 0x266 <sendMountError+0x38>
		sendStringUART("SD card is write protected\r\n");
     25c:	89 e5       	ldi	r24, 0x59	; 89
     25e:	94 e0       	ldi	r25, 0x04	; 4
     260:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     264:	08 95       	ret
	else
		sendStringUART("Unknown SD card error\r\n");
     266:	86 e7       	ldi	r24, 0x76	; 118
     268:	94 e0       	ldi	r25, 0x04	; 4
     26a:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
     26e:	08 95       	ret

00000270 <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	cli();
     270:	f8 94       	cli
	SPDR = 0xFF;
     272:	8f ef       	ldi	r24, 0xFF	; 255
     274:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     276:	0d b4       	in	r0, 0x2d	; 45
     278:	07 fe       	sbrs	r0, 7
     27a:	fd cf       	rjmp	.-6      	; 0x276 <rcvr_spi+0x6>
	sei();
     27c:	78 94       	sei
	return SPDR;
     27e:	8e b5       	in	r24, 0x2e	; 46
}
     280:	08 95       	ret

00000282 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     282:	82 e3       	ldi	r24, 0x32	; 50
     284:	80 93 80 05 	sts	0x0580, r24
	rcvr_spi();
     288:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
     28c:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
     290:	8f 3f       	cpi	r24, 0xFF	; 255
     292:	39 f0       	breq	.+14     	; 0x2a2 <wait_ready+0x20>
	while (Timer2);
     294:	80 91 80 05 	lds	r24, 0x0580
     298:	88 23       	and	r24, r24
     29a:	c1 f7       	brne	.-16     	; 0x28c <wait_ready+0xa>

	return 0;
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	08 95       	ret
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
	while (Timer2);

	return 0;
}
     2a6:	08 95       	ret

000002a8 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     2a8:	28 9a       	sbi	0x05, 0	; 5
	rcvr_spi();
     2aa:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
}
     2ae:	08 95       	ret

000002b0 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
     2b0:	28 98       	cbi	0x05, 0	; 5
	if (!wait_ready()) {
     2b2:	0e 94 41 01 	call	0x282	; 0x282 <wait_ready>
     2b6:	00 97       	sbiw	r24, 0x00	; 0
     2b8:	29 f4       	brne	.+10     	; 0x2c4 <select+0x14>
		deselect();
     2ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>
		return 0;
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	08 95       	ret
	}
	return 1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
}
     2c8:	08 95       	ret

000002ca <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	08 95       	ret

000002d0 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	ec 01       	movw	r28, r24
     2da:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     2dc:	84 e1       	ldi	r24, 0x14	; 20
     2de:	80 93 81 05 	sts	0x0581, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
     2e2:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
     2e6:	8f 3f       	cpi	r24, 0xFF	; 255
     2e8:	39 f4       	brne	.+14     	; 0x2f8 <rcvr_datablock+0x28>
     2ea:	80 91 81 05 	lds	r24, 0x0581
     2ee:	88 23       	and	r24, r24
     2f0:	c1 f7       	brne	.-16     	; 0x2e2 <rcvr_datablock+0x12>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	28 c0       	rjmp	.+80     	; 0x348 <rcvr_datablock+0x78>
     2f8:	8e 3f       	cpi	r24, 0xFE	; 254
     2fa:	21 f5       	brne	.+72     	; 0x344 <rcvr_datablock+0x74>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	8e bd       	out	0x2e, r24	; 46
     300:	0d b4       	in	r0, 0x2d	; 45
     302:	07 fe       	sbrs	r0, 7
     304:	fd cf       	rjmp	.-6      	; 0x300 <rcvr_datablock+0x30>
     306:	9e b5       	in	r25, 0x2e	; 46
     308:	98 83       	st	Y, r25
		rcvr_spi_m(buff++);
     30a:	8e bd       	out	0x2e, r24	; 46
     30c:	0d b4       	in	r0, 0x2d	; 45
     30e:	07 fe       	sbrs	r0, 7
     310:	fd cf       	rjmp	.-6      	; 0x30c <rcvr_datablock+0x3c>
     312:	9e b5       	in	r25, 0x2e	; 46
     314:	99 83       	std	Y+1, r25	; 0x01
		rcvr_spi_m(buff++);
     316:	8e bd       	out	0x2e, r24	; 46
     318:	0d b4       	in	r0, 0x2d	; 45
     31a:	07 fe       	sbrs	r0, 7
     31c:	fd cf       	rjmp	.-6      	; 0x318 <rcvr_datablock+0x48>
     31e:	9e b5       	in	r25, 0x2e	; 46
     320:	9a 83       	std	Y+2, r25	; 0x02
		rcvr_spi_m(buff++);
     322:	8e bd       	out	0x2e, r24	; 46
     324:	0d b4       	in	r0, 0x2d	; 45
     326:	07 fe       	sbrs	r0, 7
     328:	fd cf       	rjmp	.-6      	; 0x324 <rcvr_datablock+0x54>
     32a:	9e b5       	in	r25, 0x2e	; 46
     32c:	9b 83       	std	Y+3, r25	; 0x03
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
     32e:	24 96       	adiw	r28, 0x04	; 4
	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
	} while (btr -= 4);
     330:	04 50       	subi	r16, 0x04	; 4
     332:	10 40       	sbci	r17, 0x00	; 0
     334:	21 f7       	brne	.-56     	; 0x2fe <rcvr_datablock+0x2e>
	rcvr_spi();						/* Discard CRC */
     336:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
	rcvr_spi();
     33a:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>

	return 1;						/* Return with success */
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <rcvr_datablock+0x78>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	08 95       	ret

00000352 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	ec 01       	movw	r28, r24
     35a:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (!wait_ready()) return 0;
     35c:	0e 94 41 01 	call	0x282	; 0x282 <wait_ready>
     360:	00 97       	sbiw	r24, 0x00	; 0
     362:	09 f4       	brne	.+2      	; 0x366 <xmit_datablock+0x14>
     364:	36 c0       	rjmp	.+108    	; 0x3d2 <xmit_datablock+0x80>

	xmit_spi(token);					/* Xmit data token */
     366:	f8 94       	cli
     368:	1e bd       	out	0x2e, r17	; 46
     36a:	0d b4       	in	r0, 0x2d	; 45
     36c:	07 fe       	sbrs	r0, 7
     36e:	fd cf       	rjmp	.-6      	; 0x36a <xmit_datablock+0x18>
     370:	78 94       	sei
	if (token != 0xFD) {	/* Is data token */
     372:	1d 3f       	cpi	r17, 0xFD	; 253
     374:	89 f1       	breq	.+98     	; 0x3d8 <xmit_datablock+0x86>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static
int xmit_datablock (
     376:	ce 01       	movw	r24, r28
     378:	80 50       	subi	r24, 0x00	; 0
     37a:	9e 4f       	sbci	r25, 0xFE	; 254

	xmit_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     37c:	f8 94       	cli
     37e:	28 81       	ld	r18, Y
     380:	2e bd       	out	0x2e, r18	; 46
     382:	0d b4       	in	r0, 0x2d	; 45
     384:	07 fe       	sbrs	r0, 7
     386:	fd cf       	rjmp	.-6      	; 0x382 <xmit_datablock+0x30>
     388:	78 94       	sei
			xmit_spi(*buff++);
     38a:	f8 94       	cli
     38c:	29 81       	ldd	r18, Y+1	; 0x01
     38e:	2e bd       	out	0x2e, r18	; 46
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static
int xmit_datablock (
     390:	22 96       	adiw	r28, 0x02	; 2
	xmit_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
     392:	0d b4       	in	r0, 0x2d	; 45
     394:	07 fe       	sbrs	r0, 7
     396:	fd cf       	rjmp	.-6      	; 0x392 <xmit_datablock+0x40>
     398:	78 94       	sei
		} while (--wc);
     39a:	8c 17       	cp	r24, r28
     39c:	9d 07       	cpc	r25, r29
     39e:	71 f7       	brne	.-36     	; 0x37c <xmit_datablock+0x2a>
		xmit_spi(0xFF);					/* CRC (Dummy) */
     3a0:	f8 94       	cli
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	8e bd       	out	0x2e, r24	; 46
     3a6:	0d b4       	in	r0, 0x2d	; 45
     3a8:	07 fe       	sbrs	r0, 7
     3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <xmit_datablock+0x54>
     3ac:	78 94       	sei
		xmit_spi(0xFF);
     3ae:	f8 94       	cli
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	8e bd       	out	0x2e, r24	; 46
     3b4:	0d b4       	in	r0, 0x2d	; 45
     3b6:	07 fe       	sbrs	r0, 7
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <xmit_datablock+0x62>
     3ba:	78 94       	sei
		resp = rcvr_spi();				/* Reveive data response */
     3bc:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     3c0:	8f 71       	andi	r24, 0x1F	; 31
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static
int xmit_datablock (
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	85 30       	cpi	r24, 0x05	; 5
     3c8:	11 f0       	breq	.+4      	; 0x3ce <xmit_datablock+0x7c>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE resp, wc;


	if (!wait_ready()) return 0;
     3ce:	c9 01       	movw	r24, r18
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <xmit_datablock+0x8a>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <xmit_datablock+0x8a>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	08 95       	ret

000003e4 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	cf 93       	push	r28
     3ee:	c8 2f       	mov	r28, r24
     3f0:	6a 01       	movw	r12, r20
     3f2:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     3f4:	88 23       	and	r24, r24
     3f6:	54 f4       	brge	.+20     	; 0x40c <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     3f8:	87 e3       	ldi	r24, 0x37	; 55
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	ba 01       	movw	r22, r20
     400:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
		if (res > 1) return res;
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	08 f0       	brcs	.+2      	; 0x40a <send_cmd+0x26>
     408:	4f c0       	rjmp	.+158    	; 0x4a8 <send_cmd+0xc4>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     40a:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
     40c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>
	if (!select()) return 0xFF;
     410:	0e 94 58 01 	call	0x2b0	; 0x2b0 <select>
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	09 f4       	brne	.+2      	; 0x41a <send_cmd+0x36>
     418:	46 c0       	rjmp	.+140    	; 0x4a6 <send_cmd+0xc2>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
     41a:	f8 94       	cli
     41c:	8c 2f       	mov	r24, r28
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	8e bd       	out	0x2e, r24	; 46
     422:	0d b4       	in	r0, 0x2d	; 45
     424:	07 fe       	sbrs	r0, 7
     426:	fd cf       	rjmp	.-6      	; 0x422 <send_cmd+0x3e>
     428:	78 94       	sei
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     42a:	f8 94       	cli
     42c:	8f 2d       	mov	r24, r15
     42e:	99 27       	eor	r25, r25
     430:	aa 27       	eor	r26, r26
     432:	bb 27       	eor	r27, r27
     434:	8e bd       	out	0x2e, r24	; 46
     436:	0d b4       	in	r0, 0x2d	; 45
     438:	07 fe       	sbrs	r0, 7
     43a:	fd cf       	rjmp	.-6      	; 0x436 <send_cmd+0x52>
     43c:	78 94       	sei
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     43e:	f8 94       	cli
     440:	c7 01       	movw	r24, r14
     442:	aa 27       	eor	r26, r26
     444:	bb 27       	eor	r27, r27
     446:	8e bd       	out	0x2e, r24	; 46
     448:	0d b4       	in	r0, 0x2d	; 45
     44a:	07 fe       	sbrs	r0, 7
     44c:	fd cf       	rjmp	.-6      	; 0x448 <send_cmd+0x64>
     44e:	78 94       	sei
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     450:	f8 94       	cli
     452:	bb 27       	eor	r27, r27
     454:	af 2d       	mov	r26, r15
     456:	9e 2d       	mov	r25, r14
     458:	8d 2d       	mov	r24, r13
     45a:	8e bd       	out	0x2e, r24	; 46
     45c:	0d b4       	in	r0, 0x2d	; 45
     45e:	07 fe       	sbrs	r0, 7
     460:	fd cf       	rjmp	.-6      	; 0x45c <send_cmd+0x78>
     462:	78 94       	sei
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     464:	f8 94       	cli
     466:	ce bc       	out	0x2e, r12	; 46
     468:	0d b4       	in	r0, 0x2d	; 45
     46a:	07 fe       	sbrs	r0, 7
     46c:	fd cf       	rjmp	.-6      	; 0x468 <send_cmd+0x84>
     46e:	78 94       	sei
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     470:	cc 23       	and	r28, r28
     472:	21 f0       	breq	.+8      	; 0x47c <send_cmd+0x98>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     474:	c8 30       	cpi	r28, 0x08	; 8
     476:	21 f0       	breq	.+8      	; 0x480 <send_cmd+0x9c>
	xmit_spi(0x40 | cmd);				/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	03 c0       	rjmp	.+6      	; 0x482 <send_cmd+0x9e>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     47c:	85 e9       	ldi	r24, 0x95	; 149
     47e:	01 c0       	rjmp	.+2      	; 0x482 <send_cmd+0x9e>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     480:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
     482:	f8 94       	cli
     484:	8e bd       	out	0x2e, r24	; 46
     486:	0d b4       	in	r0, 0x2d	; 45
     488:	07 fe       	sbrs	r0, 7
     48a:	fd cf       	rjmp	.-6      	; 0x486 <send_cmd+0xa2>
     48c:	78 94       	sei

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     48e:	cc 30       	cpi	r28, 0x0C	; 12
     490:	11 f4       	brne	.+4      	; 0x496 <send_cmd+0xb2>
     492:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     496:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
     498:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
	while ((res & 0x80) && --n);
     49c:	88 23       	and	r24, r24
     49e:	24 f4       	brge	.+8      	; 0x4a8 <send_cmd+0xc4>
     4a0:	c1 50       	subi	r28, 0x01	; 1
     4a2:	d1 f7       	brne	.-12     	; 0x498 <send_cmd+0xb4>
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <send_cmd+0xc4>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     4a8:	cf 91       	pop	r28
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	08 95       	ret

000004b4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (BYTE drv)	/* Physical drive nmuber (0) */
{
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <disk_initialize+0x12>
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <disk_initialize+0x14>
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
     4cc:	88 23       	and	r24, r24
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <disk_initialize+0x1e>
     4d0:	a1 c0       	rjmp	.+322    	; 0x614 <disk_initialize+0x160>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     4d2:	80 91 8e 04 	lds	r24, 0x048E
     4d6:	81 ff       	sbrs	r24, 1
     4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <disk_initialize+0x2c>
     4da:	80 91 8e 04 	lds	r24, 0x048E
     4de:	9b c0       	rjmp	.+310    	; 0x616 <disk_initialize+0x162>
	
	//power_on();							/* Force socket power on */
	PORTB |= 0b11000000;
     4e0:	85 b1       	in	r24, 0x05	; 5
     4e2:	80 6c       	ori	r24, 0xC0	; 192
     4e4:	85 b9       	out	0x05, r24	; 5
	FCLK_SLOW();
     4e6:	82 e5       	ldi	r24, 0x52	; 82
     4e8:	8c bd       	out	0x2c, r24	; 44
     4ea:	0a e0       	ldi	r16, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     4ec:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
     4f0:	01 50       	subi	r16, 0x01	; 1
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <disk_initialize+0x38>
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	ba 01       	movw	r22, r20
     4fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	09 f0       	breq	.+2      	; 0x506 <disk_initialize+0x52>
     504:	9b c0       	rjmp	.+310    	; 0x63c <disk_initialize+0x188>
		Timer1 = 200;						/* Initialization timeout of 1000 msec */
     506:	88 ec       	ldi	r24, 0xC8	; 200
     508:	80 93 81 05 	sts	0x0581, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     50c:	88 e0       	ldi	r24, 0x08	; 8
     50e:	4a ea       	ldi	r20, 0xAA	; 170
     510:	51 e0       	ldi	r21, 0x01	; 1
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	09 f0       	breq	.+2      	; 0x520 <disk_initialize+0x6c>
     51e:	44 c0       	rjmp	.+136    	; 0x5a8 <disk_initialize+0xf4>
     520:	6e 01       	movw	r12, r28
     522:	08 94       	sec
     524:	c1 1c       	adc	r12, r1
     526:	d1 1c       	adc	r13, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (BYTE drv)	/* Physical drive nmuber (0) */
     528:	0f 2e       	mov	r0, r31
     52a:	f5 e0       	ldi	r31, 0x05	; 5
     52c:	ef 2e       	mov	r14, r31
     52e:	ff 24       	eor	r15, r15
     530:	f0 2d       	mov	r31, r0
     532:	ec 0e       	add	r14, r28
     534:	fd 1e       	adc	r15, r29
     536:	86 01       	movw	r16, r12
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 200;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     538:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
     53c:	f8 01       	movw	r30, r16
     53e:	81 93       	st	Z+, r24
     540:	8f 01       	movw	r16, r30
     542:	ee 15       	cp	r30, r14
     544:	ff 05       	cpc	r31, r15
     546:	c1 f7       	brne	.-16     	; 0x538 <disk_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     548:	8b 81       	ldd	r24, Y+3	; 0x03
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	09 f0       	breq	.+2      	; 0x550 <disk_initialize+0x9c>
     54e:	76 c0       	rjmp	.+236    	; 0x63c <disk_initialize+0x188>
     550:	8c 81       	ldd	r24, Y+4	; 0x04
     552:	8a 3a       	cpi	r24, 0xAA	; 170
     554:	09 f0       	breq	.+2      	; 0x558 <disk_initialize+0xa4>
     556:	72 c0       	rjmp	.+228    	; 0x63c <disk_initialize+0x188>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     558:	80 91 81 05 	lds	r24, 0x0581
     55c:	88 23       	and	r24, r24
     55e:	49 f0       	breq	.+18     	; 0x572 <disk_initialize+0xbe>
     560:	89 ea       	ldi	r24, 0xA9	; 169
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	70 e4       	ldi	r23, 0x40	; 64
     56a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     56e:	88 23       	and	r24, r24
     570:	99 f7       	brne	.-26     	; 0x558 <disk_initialize+0xa4>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     572:	80 91 81 05 	lds	r24, 0x0581
     576:	88 23       	and	r24, r24
     578:	09 f4       	brne	.+2      	; 0x57c <disk_initialize+0xc8>
     57a:	60 c0       	rjmp	.+192    	; 0x63c <disk_initialize+0x188>
     57c:	8a e3       	ldi	r24, 0x3A	; 58
     57e:	40 e0       	ldi	r20, 0x00	; 0
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	ba 01       	movw	r22, r20
     584:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     588:	88 23       	and	r24, r24
     58a:	09 f0       	breq	.+2      	; 0x58e <disk_initialize+0xda>
     58c:	57 c0       	rjmp	.+174    	; 0x63c <disk_initialize+0x188>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     58e:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
     592:	f6 01       	movw	r30, r12
     594:	81 93       	st	Z+, r24
     596:	6f 01       	movw	r12, r30
     598:	ee 16       	cp	r14, r30
     59a:	ff 06       	cpc	r15, r31
     59c:	c1 f7       	brne	.-16     	; 0x58e <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	86 fd       	sbrc	r24, 6
     5a2:	46 c0       	rjmp	.+140    	; 0x630 <disk_initialize+0x17c>
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	45 c0       	rjmp	.+138    	; 0x632 <disk_initialize+0x17e>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     5a8:	89 ea       	ldi	r24, 0xA9	; 169
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	ba 01       	movw	r22, r20
     5b0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     5b4:	82 30       	cpi	r24, 0x02	; 2
     5b6:	18 f4       	brcc	.+6      	; 0x5be <disk_initialize+0x10a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     5b8:	12 e0       	ldi	r17, 0x02	; 2
     5ba:	09 ea       	ldi	r16, 0xA9	; 169
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <disk_initialize+0x10e>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     5be:	11 e0       	ldi	r17, 0x01	; 1
     5c0:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     5c2:	80 91 81 05 	lds	r24, 0x0581
     5c6:	88 23       	and	r24, r24
     5c8:	41 f0       	breq	.+16     	; 0x5da <disk_initialize+0x126>
     5ca:	80 2f       	mov	r24, r16
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	ba 01       	movw	r22, r20
     5d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     5d6:	88 23       	and	r24, r24
     5d8:	a1 f7       	brne	.-24     	; 0x5c2 <disk_initialize+0x10e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     5da:	80 91 81 05 	lds	r24, 0x0581
     5de:	88 23       	and	r24, r24
     5e0:	69 f1       	breq	.+90     	; 0x63c <disk_initialize+0x188>
     5e2:	80 e1       	ldi	r24, 0x10	; 16
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	52 e0       	ldi	r21, 0x02	; 2
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     5f0:	88 23       	and	r24, r24
     5f2:	21 f5       	brne	.+72     	; 0x63c <disk_initialize+0x188>
				ty = 0;
		}
	}
	
	CardType = ty;
     5f4:	10 93 82 05 	sts	0x0582, r17
	deselect(); 
     5f8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>

	if (ty) {			/* Initialization succeded */
     5fc:	11 23       	and	r17, r17
     5fe:	39 f0       	breq	.+14     	; 0x60e <disk_initialize+0x15a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     600:	80 91 8e 04 	lds	r24, 0x048E
     604:	8e 7f       	andi	r24, 0xFE	; 254
     606:	80 93 8e 04 	sts	0x048E, r24
		FCLK_FAST(); 
     60a:	80 e5       	ldi	r24, 0x50	; 80
     60c:	8c bd       	out	0x2c, r24	; 44
	} else {			/* Initialization failed */
		//power_off();

	}

	return Stat;
     60e:	80 91 8e 04 	lds	r24, 0x048E
     612:	01 c0       	rjmp	.+2      	; 0x616 <disk_initialize+0x162>

DSTATUS disk_initialize (BYTE drv)	/* Physical drive nmuber (0) */
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
     614:	81 e0       	ldi	r24, 0x01	; 1
		//power_off();

	}

	return Stat;
}
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	08 95       	ret
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     630:	8c e0       	ldi	r24, 0x0C	; 12
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	
	CardType = ty;
     632:	80 93 82 05 	sts	0x0582, r24
	deselect(); 
     636:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>
     63a:	e2 cf       	rjmp	.-60     	; 0x600 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	
	CardType = ty;
     63c:	10 92 82 05 	sts	0x0582, r1
	deselect(); 
     640:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>
     644:	e4 cf       	rjmp	.-56     	; 0x60e <disk_initialize+0x15a>

00000646 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     646:	88 23       	and	r24, r24
     648:	19 f4       	brne	.+6      	; 0x650 <disk_status+0xa>
	return Stat;
     64a:	80 91 8e 04 	lds	r24, 0x048E
     64e:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     650:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     652:	08 95       	ret

00000654 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     654:	0f 93       	push	r16
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     65c:	88 23       	and	r24, r24
     65e:	09 f0       	breq	.+2      	; 0x662 <disk_read+0xe>
     660:	46 c0       	rjmp	.+140    	; 0x6ee <disk_read+0x9a>
     662:	00 23       	and	r16, r16
     664:	09 f4       	brne	.+2      	; 0x668 <disk_read+0x14>
     666:	45 c0       	rjmp	.+138    	; 0x6f2 <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     668:	80 91 8e 04 	lds	r24, 0x048E
     66c:	80 fd       	sbrc	r24, 0
     66e:	43 c0       	rjmp	.+134    	; 0x6f6 <disk_read+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     670:	80 91 82 05 	lds	r24, 0x0582
     674:	83 fd       	sbrc	r24, 3
     676:	09 c0       	rjmp	.+18     	; 0x68a <disk_read+0x36>
     678:	01 2e       	mov	r0, r17
     67a:	19 e0       	ldi	r17, 0x09	; 9
     67c:	22 0f       	add	r18, r18
     67e:	33 1f       	adc	r19, r19
     680:	44 1f       	adc	r20, r20
     682:	55 1f       	adc	r21, r21
     684:	1a 95       	dec	r17
     686:	d1 f7       	brne	.-12     	; 0x67c <disk_read+0x28>
     688:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
     68a:	01 30       	cpi	r16, 0x01	; 1
     68c:	79 f4       	brne	.+30     	; 0x6ac <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     68e:	81 e1       	ldi	r24, 0x11	; 17
     690:	ba 01       	movw	r22, r20
     692:	a9 01       	movw	r20, r18
     694:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     698:	88 23       	and	r24, r24
     69a:	11 f5       	brne	.+68     	; 0x6e0 <disk_read+0x8c>
			&& rcvr_datablock(buff, 512))
     69c:	ce 01       	movw	r24, r28
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	72 e0       	ldi	r23, 0x02	; 2
     6a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	d1 f4       	brne	.+52     	; 0x6de <disk_read+0x8a>
     6aa:	1a c0       	rjmp	.+52     	; 0x6e0 <disk_read+0x8c>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     6ac:	82 e1       	ldi	r24, 0x12	; 18
     6ae:	ba 01       	movw	r22, r20
     6b0:	a9 01       	movw	r20, r18
     6b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     6b6:	88 23       	and	r24, r24
     6b8:	99 f4       	brne	.+38     	; 0x6e0 <disk_read+0x8c>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     6ba:	ce 01       	movw	r24, r28
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	72 e0       	ldi	r23, 0x02	; 2
     6c0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     6c4:	00 97       	sbiw	r24, 0x00	; 0
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <disk_read+0x7c>
				buff += 512;
     6c8:	c0 50       	subi	r28, 0x00	; 0
     6ca:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     6cc:	01 50       	subi	r16, 0x01	; 1
     6ce:	a9 f7       	brne	.-22     	; 0x6ba <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     6d0:	8c e0       	ldi	r24, 0x0C	; 12
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	ba 01       	movw	r22, r20
     6d8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <disk_read+0x8c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
     6de:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
     6e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>

	return count ? RES_ERROR : RES_OK;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	00 23       	and	r16, r16
     6e8:	39 f4       	brne	.+14     	; 0x6f8 <disk_read+0xa4>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <disk_read+0xa4>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <disk_read+0xa4>
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <disk_read+0xa4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     6f6:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	eb 01       	movw	r28, r22
     710:	69 01       	movw	r12, r18
     712:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     714:	88 23       	and	r24, r24
     716:	09 f0       	breq	.+2      	; 0x71a <disk_write+0x1a>
     718:	57 c0       	rjmp	.+174    	; 0x7c8 <disk_write+0xc8>
     71a:	00 23       	and	r16, r16
     71c:	09 f4       	brne	.+2      	; 0x720 <disk_write+0x20>
     71e:	56 c0       	rjmp	.+172    	; 0x7cc <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     720:	80 91 8e 04 	lds	r24, 0x048E
     724:	80 fd       	sbrc	r24, 0
     726:	54 c0       	rjmp	.+168    	; 0x7d0 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     728:	80 91 8e 04 	lds	r24, 0x048E
     72c:	82 fd       	sbrc	r24, 2
     72e:	52 c0       	rjmp	.+164    	; 0x7d4 <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     730:	80 91 82 05 	lds	r24, 0x0582
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	83 fd       	sbrc	r24, 3
     738:	09 c0       	rjmp	.+18     	; 0x74c <disk_write+0x4c>
     73a:	0b 2e       	mov	r0, r27
     73c:	b9 e0       	ldi	r27, 0x09	; 9
     73e:	cc 0c       	add	r12, r12
     740:	dd 1c       	adc	r13, r13
     742:	ee 1c       	adc	r14, r14
     744:	ff 1c       	adc	r15, r15
     746:	ba 95       	dec	r27
     748:	d1 f7       	brne	.-12     	; 0x73e <disk_write+0x3e>
     74a:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     74c:	01 30       	cpi	r16, 0x01	; 1
     74e:	71 f4       	brne	.+28     	; 0x76c <disk_write+0x6c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     750:	88 e1       	ldi	r24, 0x18	; 24
     752:	b7 01       	movw	r22, r14
     754:	a6 01       	movw	r20, r12
     756:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     75a:	88 23       	and	r24, r24
     75c:	71 f5       	brne	.+92     	; 0x7ba <disk_write+0xba>
			&& xmit_datablock(buff, 0xFE))
     75e:	ce 01       	movw	r24, r28
     760:	6e ef       	ldi	r22, 0xFE	; 254
     762:	0e 94 a9 01 	call	0x352	; 0x352 <xmit_datablock>
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	29 f5       	brne	.+74     	; 0x7b4 <disk_write+0xb4>
     76a:	27 c0       	rjmp	.+78     	; 0x7ba <disk_write+0xba>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     76c:	86 70       	andi	r24, 0x06	; 6
     76e:	90 70       	andi	r25, 0x00	; 0
     770:	00 97       	sbiw	r24, 0x00	; 0
     772:	39 f0       	breq	.+14     	; 0x782 <disk_write+0x82>
     774:	40 2f       	mov	r20, r16
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	87 e9       	ldi	r24, 0x97	; 151
     77e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     782:	89 e1       	ldi	r24, 0x19	; 25
     784:	b7 01       	movw	r22, r14
     786:	a6 01       	movw	r20, r12
     788:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     78c:	88 23       	and	r24, r24
     78e:	a9 f4       	brne	.+42     	; 0x7ba <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     790:	ce 01       	movw	r24, r28
     792:	6c ef       	ldi	r22, 0xFC	; 252
     794:	0e 94 a9 01 	call	0x352	; 0x352 <xmit_datablock>
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	21 f0       	breq	.+8      	; 0x7a4 <disk_write+0xa4>
				buff += 512;
     79c:	c0 50       	subi	r28, 0x00	; 0
     79e:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     7a0:	01 50       	subi	r16, 0x01	; 1
     7a2:	b1 f7       	brne	.-20     	; 0x790 <disk_write+0x90>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	6d ef       	ldi	r22, 0xFD	; 253
     7aa:	0e 94 a9 01 	call	0x352	; 0x352 <xmit_datablock>
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <disk_write+0xb8>
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <disk_write+0xba>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
     7b4:	00 e0       	ldi	r16, 0x00	; 0
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
     7b8:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
     7ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>

	return count ? RES_ERROR : RES_OK;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	00 23       	and	r16, r16
     7c2:	49 f4       	brne	.+18     	; 0x7d6 <disk_write+0xd6>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     7c8:	84 e0       	ldi	r24, 0x04	; 4
     7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <disk_write+0xd6>
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     7d4:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	08 95       	ret

000007e6 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	60 97       	sbiw	r28, 0x10	; 16
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     804:	88 23       	and	r24, r24
     806:	09 f0       	breq	.+2      	; 0x80a <disk_ioctl+0x24>
     808:	c3 c1       	rjmp	.+902    	; 0xb90 <disk_ioctl+0x3aa>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     80a:	64 30       	cpi	r22, 0x04	; 4
     80c:	d1 f4       	brne	.+52     	; 0x842 <disk_ioctl+0x5c>
		switch (*ptr) {
     80e:	fa 01       	movw	r30, r20
     810:	80 81       	ld	r24, Z
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	31 f0       	breq	.+12     	; 0x822 <disk_ioctl+0x3c>
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	30 f0       	brcs	.+12     	; 0x826 <disk_ioctl+0x40>
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	09 f0       	breq	.+2      	; 0x820 <disk_ioctl+0x3a>
     81e:	ba c1       	rjmp	.+884    	; 0xb94 <disk_ioctl+0x3ae>
     820:	0a c0       	rjmp	.+20     	; 0x836 <disk_ioctl+0x50>
				//power_off();		// Power off */
			res = RES_OK;
			break;
		case 1:		/* Sub control code == 1 (POWER_ON) */
			//power_on();				// Power on */
			res = RES_OK;
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	ba c1       	rjmp	.+884    	; 0xb9a <disk_ioctl+0x3b4>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
     826:	0e 94 65 01 	call	0x2ca	; 0x2ca <chk_power>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     82a:	01 e0       	ldi	r16, 0x01	; 1
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	09 f4       	brne	.+2      	; 0x832 <disk_ioctl+0x4c>
     830:	b4 c1       	rjmp	.+872    	; 0xb9a <disk_ioctl+0x3b4>
     832:	00 e0       	ldi	r16, 0x00	; 0
     834:	b2 c1       	rjmp	.+868    	; 0xb9a <disk_ioctl+0x3b4>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			//power_on();				// Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     836:	0e 94 65 01 	call	0x2ca	; 0x2ca <chk_power>
     83a:	f7 01       	movw	r30, r14
     83c:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
     83e:	00 e0       	ldi	r16, 0x00	; 0
			break;
     840:	ac c1       	rjmp	.+856    	; 0xb9a <disk_ioctl+0x3b4>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     842:	80 91 8e 04 	lds	r24, 0x048E
     846:	80 fd       	sbrc	r24, 0
     848:	a7 c1       	rjmp	.+846    	; 0xb98 <disk_ioctl+0x3b2>

		switch (ctrl) {
     84a:	6a 30       	cpi	r22, 0x0A	; 10
     84c:	09 f4       	brne	.+2      	; 0x850 <disk_ioctl+0x6a>
     84e:	2c c1       	rjmp	.+600    	; 0xaa8 <disk_ioctl+0x2c2>
     850:	6b 30       	cpi	r22, 0x0B	; 11
     852:	58 f4       	brcc	.+22     	; 0x86a <disk_ioctl+0x84>
     854:	61 30       	cpi	r22, 0x01	; 1
     856:	f9 f0       	breq	.+62     	; 0x896 <disk_ioctl+0xb0>
     858:	61 30       	cpi	r22, 0x01	; 1
     85a:	a0 f0       	brcs	.+40     	; 0x884 <disk_ioctl+0x9e>
     85c:	62 30       	cpi	r22, 0x02	; 2
     85e:	09 f4       	brne	.+2      	; 0x862 <disk_ioctl+0x7c>
     860:	86 c0       	rjmp	.+268    	; 0x96e <disk_ioctl+0x188>
     862:	63 30       	cpi	r22, 0x03	; 3
     864:	09 f0       	breq	.+2      	; 0x868 <disk_ioctl+0x82>
     866:	74 c1       	rjmp	.+744    	; 0xb50 <disk_ioctl+0x36a>
     868:	89 c0       	rjmp	.+274    	; 0x97c <disk_ioctl+0x196>
     86a:	6c 30       	cpi	r22, 0x0C	; 12
     86c:	09 f4       	brne	.+2      	; 0x870 <disk_ioctl+0x8a>
     86e:	35 c1       	rjmp	.+618    	; 0xada <disk_ioctl+0x2f4>
     870:	6c 30       	cpi	r22, 0x0C	; 12
     872:	08 f4       	brcc	.+2      	; 0x876 <disk_ioctl+0x90>
     874:	1f c1       	rjmp	.+574    	; 0xab4 <disk_ioctl+0x2ce>
     876:	6d 30       	cpi	r22, 0x0D	; 13
     878:	09 f4       	brne	.+2      	; 0x87c <disk_ioctl+0x96>
     87a:	42 c1       	rjmp	.+644    	; 0xb00 <disk_ioctl+0x31a>
     87c:	6e 30       	cpi	r22, 0x0E	; 14
     87e:	09 f0       	breq	.+2      	; 0x882 <disk_ioctl+0x9c>
     880:	67 c1       	rjmp	.+718    	; 0xb50 <disk_ioctl+0x36a>
     882:	53 c1       	rjmp	.+678    	; 0xb2a <disk_ioctl+0x344>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     884:	0e 94 58 01 	call	0x2b0	; 0x2b0 <select>
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	09 f4       	brne	.+2      	; 0x88e <disk_ioctl+0xa8>
     88c:	63 c1       	rjmp	.+710    	; 0xb54 <disk_ioctl+0x36e>
				deselect();
     88e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>
				res = RES_OK;
     892:	00 e0       	ldi	r16, 0x00	; 0
     894:	7a c1       	rjmp	.+756    	; 0xb8a <disk_ioctl+0x3a4>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	ba 01       	movw	r22, r20
     89e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     8a2:	88 23       	and	r24, r24
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <disk_ioctl+0xc2>
     8a6:	58 c1       	rjmp	.+688    	; 0xb58 <disk_ioctl+0x372>
     8a8:	ce 01       	movw	r24, r28
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	60 e1       	ldi	r22, 0x10	; 16
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	09 f4       	brne	.+2      	; 0x8ba <disk_ioctl+0xd4>
     8b8:	51 c1       	rjmp	.+674    	; 0xb5c <disk_ioctl+0x376>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	82 95       	swap	r24
     8be:	86 95       	lsr	r24
     8c0:	86 95       	lsr	r24
     8c2:	83 70       	andi	r24, 0x03	; 3
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	d1 f4       	brne	.+52     	; 0x8fc <disk_ioctl+0x116>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
     8c8:	2a 85       	ldd	r18, Y+10	; 0x0a
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	2f 5f       	subi	r18, 0xFF	; 255
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
     8d0:	99 85       	ldd	r25, Y+9	; 0x09
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	82 0f       	add	r24, r18
     8d6:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << 10;
     8d8:	a0 e0       	ldi	r26, 0x00	; 0
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	07 2e       	mov	r0, r23
     8de:	7a e0       	ldi	r23, 0x0A	; 10
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	aa 1f       	adc	r26, r26
     8e6:	bb 1f       	adc	r27, r27
     8e8:	7a 95       	dec	r23
     8ea:	d1 f7       	brne	.-12     	; 0x8e0 <disk_ioctl+0xfa>
     8ec:	70 2d       	mov	r23, r0
     8ee:	f7 01       	movw	r30, r14
     8f0:	80 83       	st	Z, r24
     8f2:	91 83       	std	Z+1, r25	; 0x01
     8f4:	a2 83       	std	Z+2, r26	; 0x02
     8f6:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	47 c1       	rjmp	.+654    	; 0xb8a <disk_ioctl+0x3a4>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	22 95       	swap	r18
     900:	26 95       	lsr	r18
     902:	26 95       	lsr	r18
     904:	23 70       	andi	r18, 0x03	; 3
     906:	88 85       	ldd	r24, Y+8	; 0x08
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	82 0f       	add	r24, r18
     914:	91 1d       	adc	r25, r1
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	2f 81       	ldd	r18, Y+7	; 0x07
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	23 70       	andi	r18, 0x03	; 3
     91e:	30 70       	andi	r19, 0x00	; 0
     920:	32 2f       	mov	r19, r18
     922:	22 27       	eor	r18, r18
     924:	33 0f       	add	r19, r19
     926:	33 0f       	add	r19, r19
     928:	82 0f       	add	r24, r18
     92a:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     92c:	ac 01       	movw	r20, r24
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     932:	9e 81       	ldd	r25, Y+6	; 0x06
     934:	9f 70       	andi	r25, 0x0F	; 15
     936:	8b 85       	ldd	r24, Y+11	; 0x0b
     938:	88 1f       	adc	r24, r24
     93a:	88 27       	eor	r24, r24
     93c:	88 1f       	adc	r24, r24
     93e:	98 0f       	add	r25, r24
     940:	9e 5f       	subi	r25, 0xFE	; 254
     942:	8a 85       	ldd	r24, Y+10	; 0x0a
     944:	83 70       	andi	r24, 0x03	; 3
     946:	88 0f       	add	r24, r24
     948:	89 0f       	add	r24, r25
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	09 97       	sbiw	r24, 0x09	; 9
     94e:	8a 01       	movw	r16, r20
     950:	9b 01       	movw	r18, r22
     952:	04 c0       	rjmp	.+8      	; 0x95c <disk_ioctl+0x176>
     954:	00 0f       	add	r16, r16
     956:	11 1f       	adc	r17, r17
     958:	22 1f       	adc	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	8a 95       	dec	r24
     95e:	d2 f7       	brpl	.-12     	; 0x954 <disk_ioctl+0x16e>
     960:	f7 01       	movw	r30, r14
     962:	00 83       	st	Z, r16
     964:	11 83       	std	Z+1, r17	; 0x01
     966:	22 83       	std	Z+2, r18	; 0x02
     968:	33 83       	std	Z+3, r19	; 0x03
				}
				res = RES_OK;
     96a:	00 e0       	ldi	r16, 0x00	; 0
     96c:	0e c1       	rjmp	.+540    	; 0xb8a <disk_ioctl+0x3a4>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	fa 01       	movw	r30, r20
     974:	91 83       	std	Z+1, r25	; 0x01
     976:	80 83       	st	Z, r24
			res = RES_OK;
     978:	00 e0       	ldi	r16, 0x00	; 0
			break;
     97a:	07 c1       	rjmp	.+526    	; 0xb8a <disk_ioctl+0x3a4>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
     97c:	00 91 82 05 	lds	r16, 0x0582
     980:	02 ff       	sbrs	r16, 2
     982:	2d c0       	rjmp	.+90     	; 0x9de <disk_ioctl+0x1f8>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     984:	8d e8       	ldi	r24, 0x8D	; 141
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	ba 01       	movw	r22, r20
     98c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     990:	88 23       	and	r24, r24
     992:	09 f0       	breq	.+2      	; 0x996 <disk_ioctl+0x1b0>
     994:	e5 c0       	rjmp	.+458    	; 0xb60 <disk_ioctl+0x37a>
					rcvr_spi();
     996:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	60 e1       	ldi	r22, 0x10	; 16
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	09 f4       	brne	.+2      	; 0x9ac <disk_ioctl+0x1c6>
     9aa:	dc c0       	rjmp	.+440    	; 0xb64 <disk_ioctl+0x37e>
     9ac:	00 e3       	ldi	r16, 0x30	; 48
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
     9ae:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
     9b2:	01 50       	subi	r16, 0x01	; 1
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <disk_ioctl+0x1c8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     9b6:	2b 85       	ldd	r18, Y+11	; 0x0b
     9b8:	22 95       	swap	r18
     9ba:	2f 70       	andi	r18, 0x0F	; 15
     9bc:	80 e1       	ldi	r24, 0x10	; 16
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <disk_ioctl+0x1e8>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <disk_ioctl+0x1e0>
     9d2:	f7 01       	movw	r30, r14
     9d4:	80 83       	st	Z, r24
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	a2 83       	std	Z+2, r26	; 0x02
     9da:	b3 83       	std	Z+3, r27	; 0x03
     9dc:	d6 c0       	rjmp	.+428    	; 0xb8a <disk_ioctl+0x3a4>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	ba 01       	movw	r22, r20
     9e6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     9ea:	88 23       	and	r24, r24
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <disk_ioctl+0x20a>
     9ee:	bc c0       	rjmp	.+376    	; 0xb68 <disk_ioctl+0x382>
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	60 e1       	ldi	r22, 0x10	; 16
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	09 f4       	brne	.+2      	; 0xa02 <disk_ioctl+0x21c>
     a00:	b5 c0       	rjmp	.+362    	; 0xb6c <disk_ioctl+0x386>
					if (CardType & CT_SD1) {	/* SDv1 */
     a02:	01 ff       	sbrs	r16, 1
     a04:	25 c0       	rjmp	.+74     	; 0xa50 <disk_ioctl+0x26a>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     a06:	8c 85       	ldd	r24, Y+12	; 0x0c
     a08:	88 1f       	adc	r24, r24
     a0a:	88 27       	eor	r24, r24
     a0c:	88 1f       	adc	r24, r24
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	2b 85       	ldd	r18, Y+11	; 0x0b
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	2f 73       	andi	r18, 0x3F	; 63
     a18:	30 70       	andi	r19, 0x00	; 0
     a1a:	22 0f       	add	r18, r18
     a1c:	33 1f       	adc	r19, r19
     a1e:	28 0f       	add	r18, r24
     a20:	39 1f       	adc	r19, r25
     a22:	8e 85       	ldd	r24, Y+14	; 0x0e
     a24:	82 95       	swap	r24
     a26:	86 95       	lsr	r24
     a28:	86 95       	lsr	r24
     a2a:	83 70       	andi	r24, 0x03	; 3
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	89 01       	movw	r16, r18
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <disk_ioctl+0x252>
     a34:	00 0f       	add	r16, r16
     a36:	11 1f       	adc	r17, r17
     a38:	8a 95       	dec	r24
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <disk_ioctl+0x24e>
     a3c:	c8 01       	movw	r24, r16
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	f7 01       	movw	r30, r14
     a44:	80 83       	st	Z, r24
     a46:	91 83       	std	Z+1, r25	; 0x01
     a48:	a2 83       	std	Z+2, r26	; 0x02
     a4a:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	9d c0       	rjmp	.+314    	; 0xb8a <disk_ioctl+0x3a4>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     a50:	8c 85       	ldd	r24, Y+12	; 0x0c
     a52:	48 2f       	mov	r20, r24
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	43 70       	andi	r20, 0x03	; 3
     a58:	50 70       	andi	r21, 0x00	; 0
     a5a:	44 0f       	add	r20, r20
     a5c:	55 1f       	adc	r21, r21
     a5e:	44 0f       	add	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	44 0f       	add	r20, r20
     a64:	55 1f       	adc	r21, r21
     a66:	82 95       	swap	r24
     a68:	86 95       	lsr	r24
     a6a:	87 70       	andi	r24, 0x07	; 7
     a6c:	48 0f       	add	r20, r24
     a6e:	51 1d       	adc	r21, r1
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	2b 85       	ldd	r18, Y+11	; 0x0b
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	2c 77       	andi	r18, 0x7C	; 124
     a7a:	30 70       	andi	r19, 0x00	; 0
     a7c:	35 95       	asr	r19
     a7e:	27 95       	ror	r18
     a80:	35 95       	asr	r19
     a82:	27 95       	ror	r18
     a84:	2f 5f       	subi	r18, 0xFF	; 255
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	42 9f       	mul	r20, r18
     a8a:	c0 01       	movw	r24, r0
     a8c:	43 9f       	mul	r20, r19
     a8e:	90 0d       	add	r25, r0
     a90:	52 9f       	mul	r21, r18
     a92:	90 0d       	add	r25, r0
     a94:	11 24       	eor	r1, r1
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	f7 01       	movw	r30, r14
     a9c:	80 83       	st	Z, r24
     a9e:	91 83       	std	Z+1, r25	; 0x01
     aa0:	a2 83       	std	Z+2, r26	; 0x02
     aa2:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
     aa4:	00 e0       	ldi	r16, 0x00	; 0
     aa6:	71 c0       	rjmp	.+226    	; 0xb8a <disk_ioctl+0x3a4>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
     aa8:	80 91 82 05 	lds	r24, 0x0582
     aac:	fa 01       	movw	r30, r20
     aae:	80 83       	st	Z, r24
			res = RES_OK;
     ab0:	00 e0       	ldi	r16, 0x00	; 0
			break;
     ab2:	6b c0       	rjmp	.+214    	; 0xb8a <disk_ioctl+0x3a4>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     ab4:	89 e0       	ldi	r24, 0x09	; 9
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	ba 01       	movw	r22, r20
     abc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     ac0:	88 23       	and	r24, r24
     ac2:	09 f0       	breq	.+2      	; 0xac6 <disk_ioctl+0x2e0>
     ac4:	55 c0       	rjmp	.+170    	; 0xb70 <disk_ioctl+0x38a>
				&& rcvr_datablock(ptr, 16))
     ac6:	c7 01       	movw	r24, r14
     ac8:	60 e1       	ldi	r22, 0x10	; 16
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	09 f0       	breq	.+2      	; 0xad6 <disk_ioctl+0x2f0>
     ad4:	4f c0       	rjmp	.+158    	; 0xb74 <disk_ioctl+0x38e>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     ad6:	01 e0       	ldi	r16, 0x01	; 1
     ad8:	58 c0       	rjmp	.+176    	; 0xb8a <disk_ioctl+0x3a4>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     ada:	8a e0       	ldi	r24, 0x0A	; 10
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	ba 01       	movw	r22, r20
     ae2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     ae6:	88 23       	and	r24, r24
     ae8:	09 f0       	breq	.+2      	; 0xaec <disk_ioctl+0x306>
     aea:	46 c0       	rjmp	.+140    	; 0xb78 <disk_ioctl+0x392>
				&& rcvr_datablock(ptr, 16))
     aec:	c7 01       	movw	r24, r14
     aee:	60 e1       	ldi	r22, 0x10	; 16
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	09 f0       	breq	.+2      	; 0xafc <disk_ioctl+0x316>
     afa:	40 c0       	rjmp	.+128    	; 0xb7c <disk_ioctl+0x396>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     afc:	01 e0       	ldi	r16, 0x01	; 1
     afe:	45 c0       	rjmp	.+138    	; 0xb8a <disk_ioctl+0x3a4>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     b00:	8a e3       	ldi	r24, 0x3A	; 58
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	ba 01       	movw	r22, r20
     b08:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     b0c:	88 23       	and	r24, r24
     b0e:	c1 f5       	brne	.+112    	; 0xb80 <disk_ioctl+0x39a>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL != 0
DRESULT disk_ioctl (
     b10:	87 01       	movw	r16, r14
     b12:	0c 5f       	subi	r16, 0xFC	; 252
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
     b16:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
     b1a:	f7 01       	movw	r30, r14
     b1c:	81 93       	st	Z+, r24
     b1e:	7f 01       	movw	r14, r30
     b20:	e0 17       	cp	r30, r16
     b22:	f1 07       	cpc	r31, r17
     b24:	c1 f7       	brne	.-16     	; 0xb16 <disk_ioctl+0x330>
				res = RES_OK;
     b26:	00 e0       	ldi	r16, 0x00	; 0
     b28:	30 c0       	rjmp	.+96     	; 0xb8a <disk_ioctl+0x3a4>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     b2a:	8d e8       	ldi	r24, 0x8D	; 141
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	ba 01       	movw	r22, r20
     b32:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <send_cmd>
     b36:	88 23       	and	r24, r24
     b38:	29 f5       	brne	.+74     	; 0xb84 <disk_ioctl+0x39e>
				rcvr_spi();
     b3a:	0e 94 38 01 	call	0x270	; 0x270 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
     b3e:	c7 01       	movw	r24, r14
     b40:	60 e4       	ldi	r22, 0x40	; 64
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	0e 94 68 01 	call	0x2d0	; 0x2d0 <rcvr_datablock>
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	f1 f4       	brne	.+60     	; 0xb88 <disk_ioctl+0x3a2>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     b4c:	01 e0       	ldi	r16, 0x01	; 1
     b4e:	1d c0       	rjmp	.+58     	; 0xb8a <disk_ioctl+0x3a4>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
     b50:	04 e0       	ldi	r16, 0x04	; 4
     b52:	1b c0       	rjmp	.+54     	; 0xb8a <disk_ioctl+0x3a4>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     b54:	01 e0       	ldi	r16, 0x01	; 1
     b56:	19 c0       	rjmp	.+50     	; 0xb8a <disk_ioctl+0x3a4>
     b58:	01 e0       	ldi	r16, 0x01	; 1
     b5a:	17 c0       	rjmp	.+46     	; 0xb8a <disk_ioctl+0x3a4>
     b5c:	01 e0       	ldi	r16, 0x01	; 1
     b5e:	15 c0       	rjmp	.+42     	; 0xb8a <disk_ioctl+0x3a4>
     b60:	01 e0       	ldi	r16, 0x01	; 1
     b62:	13 c0       	rjmp	.+38     	; 0xb8a <disk_ioctl+0x3a4>
     b64:	01 e0       	ldi	r16, 0x01	; 1
     b66:	11 c0       	rjmp	.+34     	; 0xb8a <disk_ioctl+0x3a4>
     b68:	01 e0       	ldi	r16, 0x01	; 1
     b6a:	0f c0       	rjmp	.+30     	; 0xb8a <disk_ioctl+0x3a4>
     b6c:	01 e0       	ldi	r16, 0x01	; 1
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <disk_ioctl+0x3a4>
     b70:	01 e0       	ldi	r16, 0x01	; 1
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <disk_ioctl+0x3a4>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     b74:	00 e0       	ldi	r16, 0x00	; 0
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <disk_ioctl+0x3a4>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     b78:	01 e0       	ldi	r16, 0x01	; 1
     b7a:	07 c0       	rjmp	.+14     	; 0xb8a <disk_ioctl+0x3a4>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <disk_ioctl+0x3a4>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     b80:	01 e0       	ldi	r16, 0x01	; 1
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <disk_ioctl+0x3a4>
     b84:	01 e0       	ldi	r16, 0x01	; 1
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <disk_ioctl+0x3a4>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
     b88:	00 e0       	ldi	r16, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
     b8a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <deselect>
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <disk_ioctl+0x3b4>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     b90:	04 e0       	ldi	r16, 0x04	; 4
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <disk_ioctl+0x3b4>
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
     b94:	04 e0       	ldi	r16, 0x04	; 4
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <disk_ioctl+0x3b4>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     b98:	03 e0       	ldi	r16, 0x03	; 3

		deselect();
	}

	return res;
}
     b9a:	80 2f       	mov	r24, r16
     b9c:	60 96       	adiw	r28, 0x10	; 16
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	08 95       	ret

00000bb6 <disk_timerproc>:
{
	static BYTE pv;
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
     bb6:	80 91 81 05 	lds	r24, 0x0581
	if (n) Timer1 = --n;
     bba:	88 23       	and	r24, r24
     bbc:	19 f0       	breq	.+6      	; 0xbc4 <disk_timerproc+0xe>
     bbe:	81 50       	subi	r24, 0x01	; 1
     bc0:	80 93 81 05 	sts	0x0581, r24
	n = Timer2;
     bc4:	80 91 80 05 	lds	r24, 0x0580
	if (n) Timer2 = --n;
     bc8:	88 23       	and	r24, r24
     bca:	19 f0       	breq	.+6      	; 0xbd2 <disk_timerproc+0x1c>
     bcc:	81 50       	subi	r24, 0x01	; 1
     bce:	80 93 80 05 	sts	0x0580, r24

	n = pv;
     bd2:	90 91 83 05 	lds	r25, 0x0583
	pv = SOCKPORT & (SOCKWP | SOCKINS);	/* Sample socket switch */
     bd6:	83 b1       	in	r24, 0x03	; 3
     bd8:	80 73       	andi	r24, 0x30	; 48
     bda:	80 93 83 05 	sts	0x0583, r24

	if (n == pv) {					/* Have contacts stabled? */
     bde:	98 17       	cp	r25, r24
     be0:	71 f4       	brne	.+28     	; 0xbfe <disk_timerproc+0x48>
		s = Stat;
     be2:	80 91 8e 04 	lds	r24, 0x048E

		if (pv & SOCKWP)			/* WP is H (write protected) */
     be6:	95 ff       	sbrs	r25, 5
     be8:	02 c0       	rjmp	.+4      	; 0xbee <disk_timerproc+0x38>
			s |= STA_PROTECT;
     bea:	84 60       	ori	r24, 0x04	; 4
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <disk_timerproc+0x3a>
		else						/* WP is L (write enabled) */
			s &= ~STA_PROTECT;
     bee:	8b 7f       	andi	r24, 0xFB	; 251

		if (pv & SOCKINS)			/* INS = H (Socket empty) */
     bf0:	94 ff       	sbrs	r25, 4
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <disk_timerproc+0x42>
			s |= (STA_NODISK | STA_NOINIT);
     bf4:	83 60       	ori	r24, 0x03	; 3
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <disk_timerproc+0x44>
		else						/* INS = L (Card inserted) */
			s &= ~STA_NODISK;
     bf8:	8d 7f       	andi	r24, 0xFD	; 253

		Stat = s;
     bfa:	80 93 8e 04 	sts	0x048E, r24
     bfe:	08 95       	ret

00000c00 <get_fattime>:
}

DWORD get_fattime ()
{
	return 0;
}
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	cb 01       	movw	r24, r22
     c06:	08 95       	ret

00000c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	ec 01       	movw	r28, r24
     c0e:	ca 01       	movw	r24, r20
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	91 05       	cpc	r25, r1
     c14:	00 f1       	brcs	.+64     	; 0xc56 <mem_cpy+0x4e>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
     c16:	fb 01       	movw	r30, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	BYTE *d = (BYTE*)dst;
     c18:	de 01       	movw	r26, r28
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
		*(int*)d = *(int*)s;
     c1a:	21 91       	ld	r18, Z+
     c1c:	31 91       	ld	r19, Z+
     c1e:	2d 93       	st	X+, r18
     c20:	3d 93       	st	X+, r19
		d += sizeof(int); s += sizeof(int);
     c22:	02 97       	sbiw	r24, 0x02	; 2
void mem_cpy (void* dst, const void* src, int cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	91 05       	cpc	r25, r1
     c28:	c0 f7       	brcc	.-16     	; 0xc1a <mem_cpy+0x12>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
     c2a:	9a 01       	movw	r18, r20
     c2c:	22 50       	subi	r18, 0x02	; 2
     c2e:	30 40       	sbci	r19, 0x00	; 0
     c30:	c9 01       	movw	r24, r18
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	dc 01       	movw	r26, r24
     c38:	11 96       	adiw	r26, 0x01	; 1
     c3a:	aa 0f       	add	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	fe 01       	movw	r30, r28
     c40:	ea 0f       	add	r30, r26
     c42:	fb 1f       	adc	r31, r27
     c44:	a6 0f       	add	r26, r22
     c46:	b7 1f       	adc	r27, r23
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	a9 01       	movw	r20, r18
     c4e:	48 1b       	sub	r20, r24
     c50:	59 0b       	sbc	r21, r25
     c52:	ca 01       	movw	r24, r20
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <mem_cpy+0x52>
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
     c56:	db 01       	movw	r26, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	BYTE *d = (BYTE*)dst;
     c58:	fe 01       	movw	r30, r28
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	21 f0       	breq	.+8      	; 0xc66 <mem_cpy+0x5e>
		*d++ = *s++;
     c5e:	2d 91       	ld	r18, X+
     c60:	21 93       	st	Z+, r18
     c62:	01 97       	sbiw	r24, 0x01	; 1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
     c64:	e1 f7       	brne	.-8      	; 0xc5e <mem_cpy+0x56>
		*d++ = *s++;
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     c6c:	41 15       	cp	r20, r1
     c6e:	51 05       	cpc	r21, r1
     c70:	31 f0       	breq	.+12     	; 0xc7e <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	BYTE *d = (BYTE*)dst;
     c72:	e8 2f       	mov	r30, r24
     c74:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
     c76:	61 93       	st	Z+, r22
     c78:	41 50       	subi	r20, 0x01	; 1
     c7a:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <mem_set+0xa>
     c7e:	08 95       	ret

00000c80 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	fc 01       	movw	r30, r24
	int i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     c86:	eb 01       	movw	r28, r22
     c88:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
     c8a:	86 85       	ldd	r24, Z+14	; 0x0e
     c8c:	97 85       	ldd	r25, Z+15	; 0x0f
     c8e:	a0 89       	ldd	r26, Z+16	; 0x10
     c90:	b1 89       	ldd	r27, Z+17	; 0x11
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	a1 05       	cpc	r26, r1
     c96:	b1 05       	cpc	r27, r1
     c98:	09 f4       	brne	.+2      	; 0xc9c <get_fileinfo+0x1c>
     c9a:	42 c0       	rjmp	.+132    	; 0xd20 <get_fileinfo+0xa0>
		dir = dj->dir;
     c9c:	22 89       	ldd	r18, Z+18	; 0x12
     c9e:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     ca0:	f9 01       	movw	r30, r18
     ca2:	40 81       	ld	r20, Z
			if (c == ' ') break;
     ca4:	40 32       	cpi	r20, 0x20	; 32
     ca6:	99 f0       	breq	.+38     	; 0xcce <get_fileinfo+0x4e>
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
     ca8:	d9 01       	movw	r26, r18
     caa:	11 96       	adiw	r26, 0x01	; 1
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
     cac:	fe 01       	movw	r30, r28

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = (TCHAR)0xE5;
     cb2:	55 ee       	ldi	r21, 0xE5	; 229
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <get_fileinfo+0x3c>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     cb6:	4d 91       	ld	r20, X+
			if (c == ' ') break;
     cb8:	40 32       	cpi	r20, 0x20	; 32
     cba:	49 f0       	breq	.+18     	; 0xcce <get_fileinfo+0x4e>
			if (c == 0x05) c = (TCHAR)0xE5;
     cbc:	45 30       	cpi	r20, 0x05	; 5
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <get_fileinfo+0x42>
     cc0:	45 2f       	mov	r20, r21
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i + 1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     cc2:	41 93       	st	Z+, r20
     cc4:	ef 01       	movw	r28, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	88 30       	cpi	r24, 0x08	; 8
     cca:	91 05       	cpc	r25, r1
     ccc:	a1 f7       	brne	.-24     	; 0xcb6 <get_fileinfo+0x36>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     cce:	f9 01       	movw	r30, r18
     cd0:	80 85       	ldd	r24, Z+8	; 0x08
     cd2:	80 32       	cpi	r24, 0x20	; 32
     cd4:	59 f0       	breq	.+22     	; 0xcec <get_fileinfo+0x6c>
			*p++ = '.';
     cd6:	8e e2       	ldi	r24, 0x2E	; 46
     cd8:	88 83       	st	Y, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
     cda:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
     cdc:	80 32       	cpi	r24, 0x20	; 32
     cde:	21 f5       	brne	.+72     	; 0xd28 <get_fileinfo+0xa8>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
     ce0:	21 96       	adiw	r28, 0x01	; 1
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <get_fileinfo+0x6c>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = (TCHAR)0xE5;
     ce4:	ec 01       	movw	r28, r24
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <get_fileinfo+0x6c>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i + 1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     ce8:	4b 83       	std	Y+3, r20	; 0x03
     cea:	24 96       	adiw	r28, 0x04	; 4
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     cec:	f9 01       	movw	r30, r18
     cee:	83 85       	ldd	r24, Z+11	; 0x0b
     cf0:	fb 01       	movw	r30, r22
     cf2:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     cf4:	f9 01       	movw	r30, r18
     cf6:	84 8d       	ldd	r24, Z+28	; 0x1c
     cf8:	95 8d       	ldd	r25, Z+29	; 0x1d
     cfa:	a6 8d       	ldd	r26, Z+30	; 0x1e
     cfc:	b7 8d       	ldd	r27, Z+31	; 0x1f
     cfe:	fb 01       	movw	r30, r22
     d00:	80 83       	st	Z, r24
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	a2 83       	std	Z+2, r26	; 0x02
     d06:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     d08:	f9 01       	movw	r30, r18
     d0a:	80 8d       	ldd	r24, Z+24	; 0x18
     d0c:	91 8d       	ldd	r25, Z+25	; 0x19
     d0e:	fb 01       	movw	r30, r22
     d10:	95 83       	std	Z+5, r25	; 0x05
     d12:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     d14:	f9 01       	movw	r30, r18
     d16:	86 89       	ldd	r24, Z+22	; 0x16
     d18:	97 89       	ldd	r25, Z+23	; 0x17
     d1a:	fb 01       	movw	r30, r22
     d1c:	97 83       	std	Z+7, r25	; 0x07
     d1e:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;
     d20:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i + 1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	ce 01       	movw	r24, r28
     d2c:	02 96       	adiw	r24, 0x02	; 2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     d2e:	f9 01       	movw	r30, r18
     d30:	41 85       	ldd	r20, Z+9	; 0x09
				if (c == ' ') break;
     d32:	40 32       	cpi	r20, 0x20	; 32
     d34:	b9 f2       	breq	.-82     	; 0xce4 <get_fileinfo+0x64>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i + 1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     d36:	4a 83       	std	Y+2, r20	; 0x02
     d38:	ce 01       	movw	r24, r28
     d3a:	03 96       	adiw	r24, 0x03	; 3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     d3c:	42 85       	ldd	r20, Z+10	; 0x0a
				if (c == ' ') break;
     d3e:	40 32       	cpi	r20, 0x20	; 32
     d40:	99 f6       	brne	.-90     	; 0xce8 <get_fileinfo+0x68>
     d42:	d0 cf       	rjmp	.-96     	; 0xce4 <get_fileinfo+0x64>

00000d44 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	81 f0       	breq	.+32     	; 0xd68 <validate+0x24>
     d48:	fc 01       	movw	r30, r24
     d4a:	20 81       	ld	r18, Z
     d4c:	22 23       	and	r18, r18
     d4e:	71 f0       	breq	.+28     	; 0xd6c <validate+0x28>
     d50:	26 81       	ldd	r18, Z+6	; 0x06
     d52:	37 81       	ldd	r19, Z+7	; 0x07
     d54:	26 17       	cp	r18, r22
     d56:	37 07       	cpc	r19, r23
     d58:	59 f4       	brne	.+22     	; 0xd70 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
     d5a:	81 81       	ldd	r24, Z+1	; 0x01
     d5c:	0e 94 23 03 	call	0x646	; 0x646 <disk_status>
     d60:	80 ff       	sbrs	r24, 0
     d62:	08 c0       	rjmp	.+16     	; 0xd74 <validate+0x30>
		return FR_NOT_READY;
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	08 95       	ret
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     d68:	89 e0       	ldi	r24, 0x09	; 9
     d6a:	08 95       	ret
     d6c:	89 e0       	ldi	r24, 0x09	; 9
     d6e:	08 95       	ret
     d70:	89 e0       	ldi	r24, 0x09	; 9
     d72:	08 95       	ret
	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     d74:	80 e0       	ldi	r24, 0x00	; 0
}
     d76:	08 95       	ret

00000d78 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     d78:	0f 93       	push	r16
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
     d80:	9a 01       	movw	r18, r20
     d82:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     d84:	bc 01       	movw	r22, r24
     d86:	6e 5c       	subi	r22, 0xCE	; 206
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	01 e0       	ldi	r16, 0x01	; 1
     d8e:	0e 94 2a 03 	call	0x654	; 0x654 <disk_read>
     d92:	88 23       	and	r24, r24
     d94:	59 f5       	brne	.+86     	; 0xdec <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     d96:	fe 01       	movw	r30, r28
     d98:	e0 5d       	subi	r30, 0xD0	; 208
     d9a:	fd 4f       	sbci	r31, 0xFD	; 253
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	2a ea       	ldi	r18, 0xAA	; 170
     da2:	85 35       	cpi	r24, 0x55	; 85
     da4:	92 07       	cpc	r25, r18
     da6:	21 f5       	brne	.+72     	; 0xdf0 <check_fs+0x78>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     da8:	fe 01       	movw	r30, r28
     daa:	e8 59       	subi	r30, 0x98	; 152
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	a2 81       	ldd	r26, Z+2	; 0x02
     db4:	b3 81       	ldd	r27, Z+3	; 0x03
     db6:	b0 70       	andi	r27, 0x00	; 0
     db8:	86 34       	cpi	r24, 0x46	; 70
     dba:	21 e4       	ldi	r18, 0x41	; 65
     dbc:	92 07       	cpc	r25, r18
     dbe:	24 e5       	ldi	r18, 0x54	; 84
     dc0:	a2 07       	cpc	r26, r18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	b2 07       	cpc	r27, r18
     dc6:	b1 f0       	breq	.+44     	; 0xdf4 <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     dc8:	cc 57       	subi	r28, 0x7C	; 124
     dca:	df 4f       	sbci	r29, 0xFF	; 255
     dcc:	48 81       	ld	r20, Y
     dce:	59 81       	ldd	r21, Y+1	; 0x01
     dd0:	6a 81       	ldd	r22, Y+2	; 0x02
     dd2:	7b 81       	ldd	r23, Y+3	; 0x03
     dd4:	70 70       	andi	r23, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	46 34       	cpi	r20, 0x46	; 70
     dda:	91 e4       	ldi	r25, 0x41	; 65
     ddc:	59 07       	cpc	r21, r25
     dde:	94 e5       	ldi	r25, 0x54	; 84
     de0:	69 07       	cpc	r22, r25
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	79 07       	cpc	r23, r25
     de6:	39 f4       	brne	.+14     	; 0xdf6 <check_fs+0x7e>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <check_fs+0x7e>
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <check_fs+0x7e>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <check_fs+0x7e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     df4:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
     dfe:	2f 92       	push	r2
     e00:	3f 92       	push	r3
     e02:	4f 92       	push	r4
     e04:	5f 92       	push	r5
     e06:	6f 92       	push	r6
     e08:	7f 92       	push	r7
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	60 97       	sbiw	r28, 0x10	; 16
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	dc 01       	movw	r26, r24
     e32:	14 2f       	mov	r17, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
     e34:	ed 91       	ld	r30, X+
     e36:	fc 91       	ld	r31, X
     e38:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
     e3a:	80 81       	ld	r24, Z
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0f 2e       	mov	r0, r31
     e40:	f0 ed       	ldi	r31, 0xD0	; 208
     e42:	8f 2e       	mov	r8, r31
     e44:	ff ef       	ldi	r31, 0xFF	; 255
     e46:	9f 2e       	mov	r9, r31
     e48:	f0 2d       	mov	r31, r0
     e4a:	88 0e       	add	r8, r24
     e4c:	99 1e       	adc	r9, r25
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
     e4e:	0a e0       	ldi	r16, 0x0A	; 10
     e50:	80 16       	cp	r8, r16
     e52:	91 04       	cpc	r9, r1
     e54:	40 f4       	brcc	.+16     	; 0xe66 <chk_mounted+0x68>
     e56:	81 81       	ldd	r24, Z+1	; 0x01
     e58:	8a 33       	cpi	r24, 0x3A	; 58
     e5a:	29 f4       	brne	.+10     	; 0xe66 <chk_mounted+0x68>
		p += 2; *path = p;			/* Return pointer to the path name */
     e5c:	32 96       	adiw	r30, 0x02	; 2
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	fc 93       	st	X, r31
     e62:	ee 93       	st	-X, r30
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <chk_mounted+0x6e>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
     e66:	80 90 88 05 	lds	r8, 0x0588
     e6a:	99 24       	eor	r9, r9
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
     e6c:	22 e0       	ldi	r18, 0x02	; 2
     e6e:	82 16       	cp	r8, r18
     e70:	91 04       	cpc	r9, r1
     e72:	08 f0       	brcs	.+2      	; 0xe76 <chk_mounted+0x78>
     e74:	33 c2       	rjmp	.+1126   	; 0x12dc <__stack+0x1dd>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
     e76:	f4 01       	movw	r30, r8
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	ec 57       	subi	r30, 0x7C	; 124
     e7e:	fa 4f       	sbci	r31, 0xFA	; 250
     e80:	e0 80       	ld	r14, Z
     e82:	f1 80       	ldd	r15, Z+1	; 0x01
     e84:	db 01       	movw	r26, r22
     e86:	11 96       	adiw	r26, 0x01	; 1
     e88:	fc 92       	st	X, r15
     e8a:	ee 92       	st	-X, r14
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
     e8c:	e1 14       	cp	r14, r1
     e8e:	f1 04       	cpc	r15, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <chk_mounted+0x96>
     e92:	26 c2       	rjmp	.+1100   	; 0x12e0 <__stack+0x1e1>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
     e94:	f7 01       	movw	r30, r14
     e96:	80 81       	ld	r24, Z
     e98:	88 23       	and	r24, r24
     e9a:	61 f0       	breq	.+24     	; 0xeb4 <chk_mounted+0xb6>
		stat = disk_status(fs->drv);
     e9c:	81 81       	ldd	r24, Z+1	; 0x01
     e9e:	0e 94 23 03 	call	0x646	; 0x646 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
     ea2:	80 fd       	sbrc	r24, 0
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <chk_mounted+0xb6>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
     ea6:	11 23       	and	r17, r17
     ea8:	09 f4       	brne	.+2      	; 0xeac <chk_mounted+0xae>
     eaa:	1c c2       	rjmp	.+1080   	; 0x12e4 <__stack+0x1e5>
     eac:	82 fd       	sbrc	r24, 2
     eae:	1c c2       	rjmp	.+1080   	; 0x12e8 <__stack+0x1e9>
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	3b c2       	rjmp	.+1142   	; 0x132a <__stack+0x22b>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume (initialize the file system object) */

	fs->fs_type = 0;					/* Clear the file system object */
     eb4:	d7 01       	movw	r26, r14
     eb6:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	8c 92       	st	X, r8
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
     ebc:	88 2d       	mov	r24, r8
     ebe:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
     ec2:	80 fd       	sbrc	r24, 0
     ec4:	13 c2       	rjmp	.+1062   	; 0x12ec <__stack+0x1ed>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     ec6:	11 23       	and	r17, r17
     ec8:	11 f0       	breq	.+4      	; 0xece <chk_mounted+0xd0>
     eca:	82 fd       	sbrc	r24, 2
     ecc:	11 c2       	rjmp	.+1058   	; 0x12f0 <__stack+0x1f1>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive (Supports only generic partitionings, FDISK and SFD) */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
     ece:	c7 01       	movw	r24, r14
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	ba 01       	movw	r22, r20
     ed6:	0e 94 bc 06 	call	0xd78	; 0xd78 <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	a1 f4       	brne	.+40     	; 0xf06 <chk_mounted+0x108>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
     ede:	f7 01       	movw	r30, r14
     ee0:	ec 50       	subi	r30, 0x0C	; 12
     ee2:	fe 4f       	sbci	r31, 0xFE	; 254
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <chk_mounted+0xee>
     eea:	04 c2       	rjmp	.+1032   	; 0x12f4 <__stack+0x1f5>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
     eec:	f7 01       	movw	r30, r14
     eee:	e8 50       	subi	r30, 0x08	; 8
     ef0:	fe 4f       	sbci	r31, 0xFE	; 254
     ef2:	80 80       	ld	r8, Z
     ef4:	91 80       	ldd	r9, Z+1	; 0x01
     ef6:	a2 80       	ldd	r10, Z+2	; 0x02
     ef8:	b3 80       	ldd	r11, Z+3	; 0x03
			fmt = check_fs(fs, bsect);					/* Check the partition */
     efa:	c7 01       	movw	r24, r14
     efc:	b5 01       	movw	r22, r10
     efe:	a4 01       	movw	r20, r8
     f00:	0e 94 bc 06 	call	0xd78	; 0xd78 <check_fs>
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <chk_mounted+0x10e>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive (Supports only generic partitionings, FDISK and SFD) */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
     f06:	88 24       	eor	r8, r8
     f08:	99 24       	eor	r9, r9
     f0a:	54 01       	movw	r10, r8
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	09 f4       	brne	.+2      	; 0xf12 <chk_mounted+0x114>
     f10:	f3 c1       	rjmp	.+998    	; 0x12f8 <__stack+0x1f9>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     f12:	88 23       	and	r24, r24
     f14:	09 f0       	breq	.+2      	; 0xf18 <chk_mounted+0x11a>
     f16:	f2 c1       	rjmp	.+996    	; 0x12fc <__stack+0x1fd>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     f18:	f7 01       	movw	r30, r14
     f1a:	85 ad       	sts	0x65, r24
     f1c:	96 ad       	sts	0x66, r25
     f1e:	f2 e0       	ldi	r31, 0x02	; 2
     f20:	80 30       	cpi	r24, 0x00	; 0
     f22:	9f 07       	cpc	r25, r31
     f24:	09 f0       	breq	.+2      	; 0xf28 <chk_mounted+0x12a>
     f26:	ec c1       	rjmp	.+984    	; 0x1300 <__stack+0x201>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     f28:	f7 01       	movw	r30, r14
     f2a:	e8 5b       	subi	r30, 0xB8	; 184
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	2c 01       	movw	r4, r24
     f34:	66 24       	eor	r6, r6
     f36:	77 24       	eor	r7, r7
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     f38:	41 14       	cp	r4, r1
     f3a:	51 04       	cpc	r5, r1
     f3c:	61 04       	cpc	r6, r1
     f3e:	71 04       	cpc	r7, r1
     f40:	39 f4       	brne	.+14     	; 0xf50 <chk_mounted+0x152>
     f42:	f7 01       	movw	r30, r14
     f44:	ea 5a       	subi	r30, 0xAA	; 170
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	40 80       	ld	r4, Z
     f4a:	51 80       	ldd	r5, Z+1	; 0x01
     f4c:	62 80       	ldd	r6, Z+2	; 0x02
     f4e:	73 80       	ldd	r7, Z+3	; 0x03
	fs->fsize = fasize;
     f50:	d7 01       	movw	r26, r14
     f52:	5e 96       	adiw	r26, 0x1e	; 30
     f54:	4d 92       	st	X+, r4
     f56:	5d 92       	st	X+, r5
     f58:	6d 92       	st	X+, r6
     f5a:	7c 92       	st	X, r7
     f5c:	91 97       	sbiw	r26, 0x21	; 33

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
     f5e:	f7 01       	movw	r30, r14
     f60:	ee 5b       	subi	r30, 0xBE	; 190
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	40 81       	ld	r20, Z
     f66:	f7 01       	movw	r30, r14
     f68:	43 83       	std	Z+3, r20	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     f6a:	84 2f       	mov	r24, r20
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	08 f0       	brcs	.+2      	; 0xf74 <chk_mounted+0x176>
     f72:	c8 c1       	rjmp	.+912    	; 0x1304 <__stack+0x205>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
     f74:	d7 ac       	sts	0xa7, r29
     f76:	d2 82       	std	Z+2, r13	; 0x02
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be 1,2,4...128) */
     f78:	dd 20       	and	r13, r13
     f7a:	09 f4       	brne	.+2      	; 0xf7e <chk_mounted+0x180>
     f7c:	c5 c1       	rjmp	.+906    	; 0x1308 <__stack+0x209>
     f7e:	8d 2d       	mov	r24, r13
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9c 01       	movw	r18, r24
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	30 40       	sbci	r19, 0x00	; 0
     f88:	82 23       	and	r24, r18
     f8a:	93 23       	and	r25, r19
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	09 f0       	breq	.+2      	; 0xf92 <chk_mounted+0x194>
     f90:	bd c1       	rjmp	.+890    	; 0x130c <__stack+0x20d>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     f92:	ed 5b       	subi	r30, 0xBD	; 189
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	20 80       	ld	r2, Z
     f98:	31 80       	ldd	r3, Z+1	; 0x01
     f9a:	19 96       	adiw	r26, 0x09	; 9
     f9c:	3c 92       	st	X, r3
     f9e:	2e 92       	st	-X, r2
     fa0:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     fa2:	c1 01       	movw	r24, r2
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <chk_mounted+0x1b0>
     fac:	b1 c1       	rjmp	.+866    	; 0x1310 <__stack+0x211>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     fae:	f7 01       	movw	r30, r14
     fb0:	eb 5b       	subi	r30, 0xBB	; 187
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	8c 01       	movw	r16, r24
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	09 83       	std	Y+1, r16	; 0x01
     fc0:	1a 83       	std	Y+2, r17	; 0x02
     fc2:	2b 83       	std	Y+3, r18	; 0x03
     fc4:	3c 83       	std	Y+4, r19	; 0x04
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     fc6:	01 15       	cp	r16, r1
     fc8:	11 05       	cpc	r17, r1
     fca:	21 05       	cpc	r18, r1
     fcc:	31 05       	cpc	r19, r1
     fce:	69 f4       	brne	.+26     	; 0xfea <chk_mounted+0x1ec>
     fd0:	97 01       	movw	r18, r14
     fd2:	2e 5a       	subi	r18, 0xAE	; 174
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	d9 01       	movw	r26, r18
     fd8:	8d 91       	ld	r24, X+
     fda:	9d 91       	ld	r25, X+
     fdc:	0d 90       	ld	r0, X+
     fde:	bc 91       	ld	r27, X
     fe0:	a0 2d       	mov	r26, r0
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	ab 83       	std	Y+3, r26	; 0x03
     fe8:	bc 83       	std	Y+4, r27	; 0x04

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     fea:	f7 01       	movw	r30, r14
     fec:	e0 5c       	subi	r30, 0xC0	; 192
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	00 81       	ld	r16, Z
     ff2:	11 81       	ldd	r17, Z+1	; 0x01
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
     ff4:	01 15       	cp	r16, r1
     ff6:	11 05       	cpc	r17, r1
     ff8:	09 f4       	brne	.+2      	; 0xffc <chk_mounted+0x1fe>
     ffa:	8c c1       	rjmp	.+792    	; 0x1314 <__stack+0x215>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
     ffc:	24 2f       	mov	r18, r20
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	c3 01       	movw	r24, r6
    1006:	b2 01       	movw	r22, r4
    1008:	0e 94 73 28 	call	0x50e6	; 0x50e6 <__mulsi3>
    100c:	6d 87       	std	Y+13, r22	; 0x0d
    100e:	7e 87       	std	Y+14, r23	; 0x0e
    1010:	8f 87       	std	Y+15, r24	; 0x0f
    1012:	98 8b       	std	Y+16, r25	; 0x10

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
    1014:	98 01       	movw	r18, r16
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	29 87       	std	Y+9, r18	; 0x09
    101c:	3a 87       	std	Y+10, r19	; 0x0a
    101e:	4b 87       	std	Y+11, r20	; 0x0b
    1020:	5c 87       	std	Y+12, r21	; 0x0c
    1022:	c1 01       	movw	r24, r2
    1024:	92 95       	swap	r25
    1026:	82 95       	swap	r24
    1028:	8f 70       	andi	r24, 0x0F	; 15
    102a:	89 27       	eor	r24, r25
    102c:	9f 70       	andi	r25, 0x0F	; 15
    102e:	89 27       	eor	r24, r25
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	82 0f       	add	r24, r18
    1036:	93 1f       	adc	r25, r19
    1038:	a4 1f       	adc	r26, r20
    103a:	b5 1f       	adc	r27, r21
    103c:	0d 85       	ldd	r16, Y+13	; 0x0d
    103e:	1e 85       	ldd	r17, Y+14	; 0x0e
    1040:	2f 85       	ldd	r18, Y+15	; 0x0f
    1042:	38 89       	ldd	r19, Y+16	; 0x10
    1044:	08 0f       	add	r16, r24
    1046:	19 1f       	adc	r17, r25
    1048:	2a 1f       	adc	r18, r26
    104a:	3b 1f       	adc	r19, r27
    104c:	0d 83       	std	Y+5, r16	; 0x05
    104e:	1e 83       	std	Y+6, r17	; 0x06
    1050:	2f 83       	std	Y+7, r18	; 0x07
    1052:	38 87       	std	Y+8, r19	; 0x08
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	ab 81       	ldd	r26, Y+3	; 0x03
    105a:	bc 81       	ldd	r27, Y+4	; 0x04
    105c:	80 17       	cp	r24, r16
    105e:	91 07       	cpc	r25, r17
    1060:	a2 07       	cpc	r26, r18
    1062:	b3 07       	cpc	r27, r19
    1064:	08 f4       	brcc	.+2      	; 0x1068 <chk_mounted+0x26a>
    1066:	58 c1       	rjmp	.+688    	; 0x1318 <__stack+0x219>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	60 1b       	sub	r22, r16
    106e:	71 0b       	sbc	r23, r17
    1070:	82 0b       	sbc	r24, r18
    1072:	93 0b       	sbc	r25, r19
    1074:	2d 2d       	mov	r18, r13
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>
    1080:	89 01       	movw	r16, r18
    1082:	9a 01       	movw	r18, r20
    1084:	d9 01       	movw	r26, r18
    1086:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1088:	01 15       	cp	r16, r1
    108a:	11 05       	cpc	r17, r1
    108c:	21 05       	cpc	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <chk_mounted+0x296>
    1092:	44 c1       	rjmp	.+648    	; 0x131c <__stack+0x21d>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    1094:	06 3f       	cpi	r16, 0xF6	; 246
    1096:	ef e0       	ldi	r30, 0x0F	; 15
    1098:	1e 07       	cpc	r17, r30
    109a:	e0 e0       	ldi	r30, 0x00	; 0
    109c:	2e 07       	cpc	r18, r30
    109e:	e0 e0       	ldi	r30, 0x00	; 0
    10a0:	3e 07       	cpc	r19, r30
    10a2:	18 f4       	brcc	.+6      	; 0x10aa <chk_mounted+0x2ac>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    10a4:	dd 24       	eor	r13, r13
    10a6:	d3 94       	inc	r13
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <chk_mounted+0x2b2>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    10aa:	dd 24       	eor	r13, r13
    10ac:	68 94       	set
    10ae:	d1 f8       	bld	r13, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    10b0:	86 3f       	cpi	r24, 0xF6	; 246
    10b2:	ff ef       	ldi	r31, 0xFF	; 255
    10b4:	9f 07       	cpc	r25, r31
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	af 07       	cpc	r26, r31
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	bf 07       	cpc	r27, r31
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <chk_mounted+0x2c4>
    10c0:	4c c1       	rjmp	.+664    	; 0x135a <__stack+0x25b>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    10c2:	b9 01       	movw	r22, r18
    10c4:	a8 01       	movw	r20, r16
    10c6:	4e 5f       	subi	r20, 0xFE	; 254
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	6f 4f       	sbci	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	d7 01       	movw	r26, r14
    10d0:	5a 96       	adiw	r26, 0x1a	; 26
    10d2:	4d 93       	st	X+, r20
    10d4:	5d 93       	st	X+, r21
    10d6:	6d 93       	st	X+, r22
    10d8:	7c 93       	st	X, r23
    10da:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	af 81       	ldd	r26, Y+7	; 0x07
    10e2:	b8 85       	ldd	r27, Y+8	; 0x08
    10e4:	88 0d       	add	r24, r8
    10e6:	99 1d       	adc	r25, r9
    10e8:	aa 1d       	adc	r26, r10
    10ea:	bb 1d       	adc	r27, r11
    10ec:	f7 01       	movw	r30, r14
    10ee:	82 a7       	lds	r24, 0x72
    10f0:	93 a7       	lds	r25, 0x73
    10f2:	a4 a7       	lds	r26, 0x74
    10f4:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    10fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    10fe:	88 0d       	add	r24, r8
    1100:	99 1d       	adc	r25, r9
    1102:	aa 1d       	adc	r26, r10
    1104:	bb 1d       	adc	r27, r11
    1106:	82 a3       	lds	r24, 0x52
    1108:	93 a3       	lds	r25, 0x53
    110a:	a4 a3       	lds	r26, 0x54
    110c:	b5 a3       	lds	r27, 0x55
	if (fmt == FS_FAT32) {
    110e:	f3 e0       	ldi	r31, 0x03	; 3
    1110:	df 16       	cp	r13, r31
    1112:	c9 f4       	brne	.+50     	; 0x1146 <__stack+0x47>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1114:	21 14       	cp	r2, r1
    1116:	31 04       	cpc	r3, r1
    1118:	09 f0       	breq	.+2      	; 0x111c <__stack+0x1d>
    111a:	02 c1       	rjmp	.+516    	; 0x1320 <__stack+0x221>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    111c:	f7 01       	movw	r30, r14
    111e:	e2 5a       	subi	r30, 0xA2	; 162
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	a2 81       	ldd	r26, Z+2	; 0x02
    1128:	b3 81       	ldd	r27, Z+3	; 0x03
    112a:	f7 01       	movw	r30, r14
    112c:	86 a3       	lds	r24, 0x56
    112e:	97 a3       	lds	r25, 0x57
    1130:	a0 a7       	lds	r26, 0x70
    1132:	b1 a7       	lds	r27, 0x71
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    1134:	44 0f       	add	r20, r20
    1136:	55 1f       	adc	r21, r21
    1138:	66 1f       	adc	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	44 0f       	add	r20, r20
    113e:	55 1f       	adc	r21, r21
    1140:	66 1f       	adc	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	2f c0       	rjmp	.+94     	; 0x11a4 <__stack+0xa5>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1146:	21 14       	cp	r2, r1
    1148:	31 04       	cpc	r3, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <__stack+0x4f>
    114c:	eb c0       	rjmp	.+470    	; 0x1324 <__stack+0x225>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    114e:	0d 85       	ldd	r16, Y+13	; 0x0d
    1150:	1e 85       	ldd	r17, Y+14	; 0x0e
    1152:	2f 85       	ldd	r18, Y+15	; 0x0f
    1154:	38 89       	ldd	r19, Y+16	; 0x10
    1156:	80 0f       	add	r24, r16
    1158:	91 1f       	adc	r25, r17
    115a:	a2 1f       	adc	r26, r18
    115c:	b3 1f       	adc	r27, r19
    115e:	f7 01       	movw	r30, r14
    1160:	86 a3       	lds	r24, 0x56
    1162:	97 a3       	lds	r25, 0x57
    1164:	a0 a7       	lds	r26, 0x70
    1166:	b1 a7       	lds	r27, 0x71
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1168:	f2 e0       	ldi	r31, 0x02	; 2
    116a:	df 16       	cp	r13, r31
    116c:	29 f4       	brne	.+10     	; 0x1178 <__stack+0x79>
    116e:	44 0f       	add	r20, r20
    1170:	55 1f       	adc	r21, r21
    1172:	66 1f       	adc	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	16 c0       	rjmp	.+44     	; 0x11a4 <__stack+0xa5>
    1178:	db 01       	movw	r26, r22
    117a:	ca 01       	movw	r24, r20
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	aa 1f       	adc	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	84 0f       	add	r24, r20
    1186:	95 1f       	adc	r25, r21
    1188:	a6 1f       	adc	r26, r22
    118a:	b7 1f       	adc	r27, r23
    118c:	b6 95       	lsr	r27
    118e:	a7 95       	ror	r26
    1190:	97 95       	ror	r25
    1192:	87 95       	ror	r24
    1194:	41 70       	andi	r20, 0x01	; 1
    1196:	50 70       	andi	r21, 0x00	; 0
    1198:	60 70       	andi	r22, 0x00	; 0
    119a:	70 70       	andi	r23, 0x00	; 0
    119c:	48 0f       	add	r20, r24
    119e:	59 1f       	adc	r21, r25
    11a0:	6a 1f       	adc	r22, r26
    11a2:	7b 1f       	adc	r23, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
    11a4:	db 01       	movw	r26, r22
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	9e 4f       	sbci	r25, 0xFE	; 254
    11ac:	af 4f       	sbci	r26, 0xFF	; 255
    11ae:	bf 4f       	sbci	r27, 0xFF	; 255
    11b0:	07 2e       	mov	r0, r23
    11b2:	79 e0       	ldi	r23, 0x09	; 9
    11b4:	b6 95       	lsr	r27
    11b6:	a7 95       	ror	r26
    11b8:	97 95       	ror	r25
    11ba:	87 95       	ror	r24
    11bc:	7a 95       	dec	r23
    11be:	d1 f7       	brne	.-12     	; 0x11b4 <__stack+0xb5>
    11c0:	70 2d       	mov	r23, r0
    11c2:	48 16       	cp	r4, r24
    11c4:	59 06       	cpc	r5, r25
    11c6:	6a 06       	cpc	r6, r26
    11c8:	7b 06       	cpc	r7, r27
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <__stack+0xcf>
    11cc:	ad c0       	rjmp	.+346    	; 0x1328 <__stack+0x229>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	dc 01       	movw	r26, r24
    11d4:	f7 01       	movw	r30, r14
    11d6:	86 87       	std	Z+14, r24	; 0x0e
    11d8:	97 87       	std	Z+15, r25	; 0x0f
    11da:	a0 8b       	std	Z+16, r26	; 0x10
    11dc:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    11de:	12 86       	std	Z+10, r1	; 0x0a
    11e0:	13 86       	std	Z+11, r1	; 0x0b
    11e2:	14 86       	std	Z+12, r1	; 0x0c
    11e4:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    11e6:	b3 e0       	ldi	r27, 0x03	; 3
    11e8:	db 16       	cp	r13, r27
    11ea:	09 f0       	breq	.+2      	; 0x11ee <__stack+0xef>
    11ec:	5a c0       	rjmp	.+180    	; 0x12a2 <__stack+0x1a3>
	 	fs->fsi_flag = 0;
    11ee:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    11f0:	ee 59       	subi	r30, 0x9E	; 158
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	a5 01       	movw	r20, r10
    11fe:	94 01       	movw	r18, r8
    1200:	28 0f       	add	r18, r24
    1202:	39 1f       	adc	r19, r25
    1204:	4a 1f       	adc	r20, r26
    1206:	5b 1f       	adc	r21, r27
    1208:	d7 01       	movw	r26, r14
    120a:	52 96       	adiw	r26, 0x12	; 18
    120c:	2d 93       	st	X+, r18
    120e:	3d 93       	st	X+, r19
    1210:	4d 93       	st	X+, r20
    1212:	5c 93       	st	X, r21
    1214:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1216:	b7 01       	movw	r22, r14
    1218:	6e 5c       	subi	r22, 0xCE	; 206
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	11 96       	adiw	r26, 0x01	; 1
    121e:	8c 91       	ld	r24, X
    1220:	01 e0       	ldi	r16, 0x01	; 1
    1222:	0e 94 2a 03 	call	0x654	; 0x654 <disk_read>
    1226:	88 23       	and	r24, r24
    1228:	e1 f5       	brne	.+120    	; 0x12a2 <__stack+0x1a3>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    122a:	f7 01       	movw	r30, r14
    122c:	e0 5d       	subi	r30, 0xD0	; 208
    122e:	fd 4f       	sbci	r31, 0xFD	; 253

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	ba ea       	ldi	r27, 0xAA	; 170
    1236:	85 35       	cpi	r24, 0x55	; 85
    1238:	9b 07       	cpc	r25, r27
    123a:	99 f5       	brne	.+102    	; 0x12a2 <__stack+0x1a3>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    123c:	f7 01       	movw	r30, r14
    123e:	82 a9       	sts	0x42, r24
    1240:	93 a9       	sts	0x43, r25
    1242:	a4 a9       	sts	0x44, r26
    1244:	b5 a9       	sts	0x45, r27
    1246:	82 35       	cpi	r24, 0x52	; 82
    1248:	f2 e5       	ldi	r31, 0x52	; 82
    124a:	9f 07       	cpc	r25, r31
    124c:	f1 e6       	ldi	r31, 0x61	; 97
    124e:	af 07       	cpc	r26, r31
    1250:	f1 e4       	ldi	r31, 0x41	; 65
    1252:	bf 07       	cpc	r27, r31
    1254:	31 f5       	brne	.+76     	; 0x12a2 <__stack+0x1a3>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    1256:	f7 01       	movw	r30, r14
    1258:	ea 5e       	subi	r30, 0xEA	; 234
    125a:	fd 4f       	sbci	r31, 0xFD	; 253
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	a2 81       	ldd	r26, Z+2	; 0x02
    1262:	b3 81       	ldd	r27, Z+3	; 0x03
    1264:	82 37       	cpi	r24, 0x72	; 114
    1266:	02 e7       	ldi	r16, 0x72	; 114
    1268:	90 07       	cpc	r25, r16
    126a:	01 e4       	ldi	r16, 0x41	; 65
    126c:	a0 07       	cpc	r26, r16
    126e:	01 e6       	ldi	r16, 0x61	; 97
    1270:	b0 07       	cpc	r27, r16
    1272:	b9 f4       	brne	.+46     	; 0x12a2 <__stack+0x1a3>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1274:	f7 01       	movw	r30, r14
    1276:	e2 5e       	subi	r30, 0xE2	; 226
    1278:	fd 4f       	sbci	r31, 0xFD	; 253
    127a:	80 81       	ld	r24, Z
    127c:	91 81       	ldd	r25, Z+1	; 0x01
    127e:	a2 81       	ldd	r26, Z+2	; 0x02
    1280:	b3 81       	ldd	r27, Z+3	; 0x03
    1282:	f7 01       	movw	r30, r14
    1284:	82 87       	std	Z+10, r24	; 0x0a
    1286:	93 87       	std	Z+11, r25	; 0x0b
    1288:	a4 87       	std	Z+12, r26	; 0x0c
    128a:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    128c:	e6 5e       	subi	r30, 0xE6	; 230
    128e:	fd 4f       	sbci	r31, 0xFD	; 253
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	a2 81       	ldd	r26, Z+2	; 0x02
    1296:	b3 81       	ldd	r27, Z+3	; 0x03
    1298:	f7 01       	movw	r30, r14
    129a:	86 87       	std	Z+14, r24	; 0x0e
    129c:	97 87       	std	Z+15, r25	; 0x0f
    129e:	a0 8b       	std	Z+16, r26	; 0x10
    12a0:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    12a2:	d7 01       	movw	r26, r14
    12a4:	dc 92       	st	X, r13
	fs->id = ++Fsid;		/* File system mount ID */
    12a6:	80 91 89 05 	lds	r24, 0x0589
    12aa:	90 91 8a 05 	lds	r25, 0x058A
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	90 93 8a 05 	sts	0x058A, r25
    12b4:	80 93 89 05 	sts	0x0589, r24
    12b8:	17 96       	adiw	r26, 0x07	; 7
    12ba:	9c 93       	st	X, r25
    12bc:	8e 93       	st	-X, r24
    12be:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    12c0:	f7 01       	movw	r30, r14
    12c2:	16 a6       	lds	r17, 0xb6
    12c4:	17 a6       	lds	r17, 0xb7
    12c6:	10 aa       	sts	0x90, r17
    12c8:	11 aa       	sts	0x91, r17
	fs->wflag = 0;
    12ca:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    12cc:	56 96       	adiw	r26, 0x16	; 22
    12ce:	1d 92       	st	X+, r1
    12d0:	1d 92       	st	X+, r1
    12d2:	1d 92       	st	X+, r1
    12d4:	1c 92       	st	X, r1
    12d6:	59 97       	sbiw	r26, 0x19	; 25
#if _FS_SHARE				/* Clear file lock semaphores */
	for (vol = 0; vol < _FS_SHARE; vol++)
		fs->flsem[vol].ctr = 0;
#endif

	return FR_OK;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	27 c0       	rjmp	.+78     	; 0x132a <__stack+0x22b>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    12dc:	8b e0       	ldi	r24, 0x0B	; 11
    12de:	25 c0       	rjmp	.+74     	; 0x132a <__stack+0x22b>
	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    12e0:	8c e0       	ldi	r24, 0x0C	; 12
    12e2:	23 c0       	rjmp	.+70     	; 0x132a <__stack+0x22b>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	21 c0       	rjmp	.+66     	; 0x132a <__stack+0x22b>
	if (fs->fs_type) {				/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
    12e8:	8a e0       	ldi	r24, 0x0A	; 10
    12ea:	1f c0       	rjmp	.+62     	; 0x132a <__stack+0x22b>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	1d c0       	rjmp	.+58     	; 0x132a <__stack+0x22b>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    12f0:	8a e0       	ldi	r24, 0x0A	; 10
    12f2:	1b c0       	rjmp	.+54     	; 0x132a <__stack+0x22b>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    12f4:	8d e0       	ldi	r24, 0x0D	; 13
    12f6:	19 c0       	rjmp	.+50     	; 0x132a <__stack+0x22b>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	17 c0       	rjmp	.+46     	; 0x132a <__stack+0x22b>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    12fc:	8d e0       	ldi	r24, 0x0D	; 13
    12fe:	15 c0       	rjmp	.+42     	; 0x132a <__stack+0x22b>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    1300:	8d e0       	ldi	r24, 0x0D	; 13
    1302:	13 c0       	rjmp	.+38     	; 0x132a <__stack+0x22b>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1304:	8d e0       	ldi	r24, 0x0D	; 13
    1306:	11 c0       	rjmp	.+34     	; 0x132a <__stack+0x22b>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be 1,2,4...128) */
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	0f c0       	rjmp	.+30     	; 0x132a <__stack+0x22b>
    130c:	8d e0       	ldi	r24, 0x0D	; 13
    130e:	0d c0       	rjmp	.+26     	; 0x132a <__stack+0x22b>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1310:	8d e0       	ldi	r24, 0x0D	; 13
    1312:	0b c0       	rjmp	.+22     	; 0x132a <__stack+0x22b>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1314:	8d e0       	ldi	r24, 0x0D	; 13
    1316:	09 c0       	rjmp	.+18     	; 0x132a <__stack+0x22b>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1318:	8d e0       	ldi	r24, 0x0D	; 13
    131a:	07 c0       	rjmp	.+14     	; 0x132a <__stack+0x22b>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    131c:	8d e0       	ldi	r24, 0x0D	; 13
    131e:	05 c0       	rjmp	.+10     	; 0x132a <__stack+0x22b>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1320:	8d e0       	ldi	r24, 0x0D	; 13
    1322:	03 c0       	rjmp	.+6      	; 0x132a <__stack+0x22b>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1324:	8d e0       	ldi	r24, 0x0D	; 13
    1326:	01 c0       	rjmp	.+2      	; 0x132a <__stack+0x22b>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
		return FR_NO_FILESYSTEM;
    1328:	8d e0       	ldi	r24, 0x0D	; 13
	for (vol = 0; vol < _FS_SHARE; vol++)
		fs->flsem[vol].ctr = 0;
#endif

	return FR_OK;
}
    132a:	60 96       	adiw	r28, 0x10	; 16
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	7f 90       	pop	r7
    134e:	6f 90       	pop	r6
    1350:	5f 90       	pop	r5
    1352:	4f 90       	pop	r4
    1354:	3f 90       	pop	r3
    1356:	2f 90       	pop	r2
    1358:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    135a:	b9 01       	movw	r22, r18
    135c:	a8 01       	movw	r20, r16
    135e:	4e 5f       	subi	r20, 0xFE	; 254
    1360:	5f 4f       	sbci	r21, 0xFF	; 255
    1362:	6f 4f       	sbci	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	f7 01       	movw	r30, r14
    1368:	42 8f       	std	Z+26, r20	; 0x1a
    136a:	53 8f       	std	Z+27, r21	; 0x1b
    136c:	64 8f       	std	Z+28, r22	; 0x1c
    136e:	75 8f       	std	Z+29, r23	; 0x1d
	fs->database = bsect + sysect;						/* Data start sector */
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	af 81       	ldd	r26, Y+7	; 0x07
    1376:	b8 85       	ldd	r27, Y+8	; 0x08
    1378:	88 0d       	add	r24, r8
    137a:	99 1d       	adc	r25, r9
    137c:	aa 1d       	adc	r26, r10
    137e:	bb 1d       	adc	r27, r11
    1380:	82 a7       	lds	r24, 0x72
    1382:	93 a7       	lds	r25, 0x73
    1384:	a4 a7       	lds	r26, 0x74
    1386:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	ab 85       	ldd	r26, Y+11	; 0x0b
    138e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1390:	88 0d       	add	r24, r8
    1392:	99 1d       	adc	r25, r9
    1394:	aa 1d       	adc	r26, r10
    1396:	bb 1d       	adc	r27, r11
    1398:	82 a3       	lds	r24, 0x52
    139a:	93 a3       	lds	r25, 0x53
    139c:	a4 a3       	lds	r26, 0x54
    139e:	b5 a3       	lds	r27, 0x55
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    13a0:	0f 2e       	mov	r0, r31
    13a2:	f3 e0       	ldi	r31, 0x03	; 3
    13a4:	df 2e       	mov	r13, r31
    13a6:	f0 2d       	mov	r31, r0
    13a8:	b5 ce       	rjmp	.-662    	; 0x1114 <__stack+0x15>

000013aa <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    13aa:	4f 92       	push	r4
    13ac:	5f 92       	push	r5
    13ae:	6f 92       	push	r6
    13b0:	7f 92       	push	r7
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	cf 93       	push	r28
    13c6:	5c 01       	movw	r10, r24
    13c8:	2a 01       	movw	r4, r20
    13ca:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
    13cc:	fc 01       	movw	r30, r24
    13ce:	c6 a4       	lds	r28, 0xa6
    13d0:	d7 a4       	lds	r29, 0xa7
    13d2:	e0 a8       	sts	0x00, r30
    13d4:	f1 a8       	sts	0x81, r31
	if (wsect != sector) {	/* Changed current window */
    13d6:	c4 16       	cp	r12, r20
    13d8:	d5 06       	cpc	r13, r21
    13da:	e6 06       	cpc	r14, r22
    13dc:	f7 06       	cpc	r15, r23
    13de:	09 f4       	brne	.+2      	; 0x13e2 <move_window+0x38>
    13e0:	54 c0       	rjmp	.+168    	; 0x148a <move_window+0xe0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    13e2:	84 81       	ldd	r24, Z+4	; 0x04
    13e4:	88 23       	and	r24, r24
    13e6:	d1 f1       	breq	.+116    	; 0x145c <move_window+0xb2>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    13e8:	0f 2e       	mov	r0, r31
    13ea:	f2 e3       	ldi	r31, 0x32	; 50
    13ec:	8f 2e       	mov	r8, r31
    13ee:	99 24       	eor	r9, r9
    13f0:	f0 2d       	mov	r31, r0
    13f2:	8a 0c       	add	r8, r10
    13f4:	9b 1c       	adc	r9, r11
    13f6:	81 81       	ldd	r24, Z+1	; 0x01
    13f8:	b4 01       	movw	r22, r8
    13fa:	a7 01       	movw	r20, r14
    13fc:	96 01       	movw	r18, r12
    13fe:	01 e0       	ldi	r16, 0x01	; 1
    1400:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
    1404:	88 23       	and	r24, r24
    1406:	09 f0       	breq	.+2      	; 0x140a <move_window+0x60>
    1408:	42 c0       	rjmp	.+132    	; 0x148e <move_window+0xe4>
				return FR_DISK_ERR;
			fs->wflag = 0;
    140a:	f5 01       	movw	r30, r10
    140c:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    140e:	46 8d       	ldd	r20, Z+30	; 0x1e
    1410:	57 8d       	ldd	r21, Z+31	; 0x1f
    1412:	60 a1       	lds	r22, 0x40
    1414:	71 a1       	lds	r23, 0x41
    1416:	82 a1       	lds	r24, 0x42
    1418:	93 a1       	lds	r25, 0x43
    141a:	a4 a1       	lds	r26, 0x44
    141c:	b5 a1       	lds	r27, 0x45
    141e:	84 0f       	add	r24, r20
    1420:	95 1f       	adc	r25, r21
    1422:	a6 1f       	adc	r26, r22
    1424:	b7 1f       	adc	r27, r23
    1426:	c8 16       	cp	r12, r24
    1428:	d9 06       	cpc	r13, r25
    142a:	ea 06       	cpc	r14, r26
    142c:	fb 06       	cpc	r15, r27
    142e:	b0 f4       	brcc	.+44     	; 0x145c <move_window+0xb2>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1430:	c3 81       	ldd	r28, Z+3	; 0x03
    1432:	c2 30       	cpi	r28, 0x02	; 2
    1434:	98 f0       	brcs	.+38     	; 0x145c <move_window+0xb2>
					wsect += fs->fsize;
    1436:	f5 01       	movw	r30, r10
    1438:	86 8d       	ldd	r24, Z+30	; 0x1e
    143a:	97 8d       	ldd	r25, Z+31	; 0x1f
    143c:	a0 a1       	lds	r26, 0x40
    143e:	b1 a1       	lds	r27, 0x41
    1440:	c8 0e       	add	r12, r24
    1442:	d9 1e       	adc	r13, r25
    1444:	ea 1e       	adc	r14, r26
    1446:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    1448:	81 81       	ldd	r24, Z+1	; 0x01
    144a:	b4 01       	movw	r22, r8
    144c:	a7 01       	movw	r20, r14
    144e:	96 01       	movw	r18, r12
    1450:	01 e0       	ldi	r16, 0x01	; 1
    1452:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1456:	c1 50       	subi	r28, 0x01	; 1
    1458:	c1 30       	cpi	r28, 0x01	; 1
    145a:	69 f7       	brne	.-38     	; 0x1436 <move_window+0x8c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    145c:	41 14       	cp	r4, r1
    145e:	51 04       	cpc	r5, r1
    1460:	61 04       	cpc	r6, r1
    1462:	71 04       	cpc	r7, r1
    1464:	b1 f0       	breq	.+44     	; 0x1492 <move_window+0xe8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1466:	b5 01       	movw	r22, r10
    1468:	6e 5c       	subi	r22, 0xCE	; 206
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	f5 01       	movw	r30, r10
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	a3 01       	movw	r20, r6
    1472:	92 01       	movw	r18, r4
    1474:	01 e0       	ldi	r16, 0x01	; 1
    1476:	0e 94 2a 03 	call	0x654	; 0x654 <disk_read>
    147a:	88 23       	and	r24, r24
    147c:	61 f4       	brne	.+24     	; 0x1496 <move_window+0xec>
				return FR_DISK_ERR;
			fs->winsect = sector;
    147e:	f5 01       	movw	r30, r10
    1480:	46 a6       	lds	r20, 0xb6
    1482:	57 a6       	lds	r21, 0xb7
    1484:	60 aa       	sts	0x90, r22
    1486:	71 aa       	sts	0x91, r23
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <move_window+0xee>
		}
	}

	return FR_OK;
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	05 c0       	rjmp	.+10     	; 0x1498 <move_window+0xee>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <move_window+0xee>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <move_window+0xee>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    1496:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    1498:	cf 91       	pop	r28
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	9f 90       	pop	r9
    14aa:	8f 90       	pop	r8
    14ac:	7f 90       	pop	r7
    14ae:	6f 90       	pop	r6
    14b0:	5f 90       	pop	r5
    14b2:	4f 90       	pop	r4
    14b4:	08 95       	ret

000014b6 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	7c 01       	movw	r14, r24
	FRESULT res;


	res = move_window(fs, 0);
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	ba 01       	movw	r22, r20
    14c8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    14cc:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    14ce:	88 23       	and	r24, r24
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <sync+0x1e>
    14d2:	60 c0       	rjmp	.+192    	; 0x1594 <sync+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    14d4:	f7 01       	movw	r30, r14
    14d6:	80 81       	ld	r24, Z
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	09 f0       	breq	.+2      	; 0x14de <sync+0x28>
    14dc:	52 c0       	rjmp	.+164    	; 0x1582 <sync+0xcc>
    14de:	85 81       	ldd	r24, Z+5	; 0x05
    14e0:	88 23       	and	r24, r24
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <sync+0x30>
    14e4:	4e c0       	rjmp	.+156    	; 0x1582 <sync+0xcc>
			fs->winsect = 0;
    14e6:	16 a6       	lds	r17, 0xb6
    14e8:	17 a6       	lds	r17, 0xb7
    14ea:	10 aa       	sts	0x90, r17
    14ec:	11 aa       	sts	0x91, r17
			mem_set(fs->win, 0, 512);
    14ee:	87 01       	movw	r16, r14
    14f0:	0e 5c       	subi	r16, 0xCE	; 206
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	c8 01       	movw	r24, r16
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	52 e0       	ldi	r21, 0x02	; 2
    14fe:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1502:	f7 01       	movw	r30, r14
    1504:	e0 5d       	subi	r30, 0xD0	; 208
    1506:	fd 4f       	sbci	r31, 0xFD	; 253
    1508:	85 e5       	ldi	r24, 0x55	; 85
    150a:	9a ea       	ldi	r25, 0xAA	; 170
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1510:	82 e5       	ldi	r24, 0x52	; 82
    1512:	92 e5       	ldi	r25, 0x52	; 82
    1514:	a1 e6       	ldi	r26, 0x61	; 97
    1516:	b1 e4       	ldi	r27, 0x41	; 65
    1518:	f7 01       	movw	r30, r14
    151a:	82 ab       	sts	0x52, r24
    151c:	93 ab       	sts	0x53, r25
    151e:	a4 ab       	sts	0x54, r26
    1520:	b5 ab       	sts	0x55, r27
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1522:	ea 5e       	subi	r30, 0xEA	; 234
    1524:	fd 4f       	sbci	r31, 0xFD	; 253
    1526:	82 e7       	ldi	r24, 0x72	; 114
    1528:	92 e7       	ldi	r25, 0x72	; 114
    152a:	a1 e4       	ldi	r26, 0x41	; 65
    152c:	b1 e6       	ldi	r27, 0x61	; 97
    152e:	80 83       	st	Z, r24
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	a2 83       	std	Z+2, r26	; 0x02
    1534:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1536:	97 01       	movw	r18, r14
    1538:	26 5e       	subi	r18, 0xE6	; 230
    153a:	3d 4f       	sbci	r19, 0xFD	; 253
    153c:	f7 01       	movw	r30, r14
    153e:	86 85       	ldd	r24, Z+14	; 0x0e
    1540:	97 85       	ldd	r25, Z+15	; 0x0f
    1542:	a0 89       	ldd	r26, Z+16	; 0x10
    1544:	b1 89       	ldd	r27, Z+17	; 0x11
    1546:	f9 01       	movw	r30, r18
    1548:	80 83       	st	Z, r24
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	a2 83       	std	Z+2, r26	; 0x02
    154e:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1550:	97 01       	movw	r18, r14
    1552:	22 5e       	subi	r18, 0xE2	; 226
    1554:	3d 4f       	sbci	r19, 0xFD	; 253
    1556:	f7 01       	movw	r30, r14
    1558:	82 85       	ldd	r24, Z+10	; 0x0a
    155a:	93 85       	ldd	r25, Z+11	; 0x0b
    155c:	a4 85       	ldd	r26, Z+12	; 0x0c
    155e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1560:	f9 01       	movw	r30, r18
    1562:	80 83       	st	Z, r24
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	a2 83       	std	Z+2, r26	; 0x02
    1568:	b3 83       	std	Z+3, r27	; 0x03
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    156a:	f7 01       	movw	r30, r14
    156c:	22 89       	ldd	r18, Z+18	; 0x12
    156e:	33 89       	ldd	r19, Z+19	; 0x13
    1570:	44 89       	ldd	r20, Z+20	; 0x14
    1572:	55 89       	ldd	r21, Z+21	; 0x15
    1574:	81 81       	ldd	r24, Z+1	; 0x01
    1576:	b8 01       	movw	r22, r16
    1578:	01 e0       	ldi	r16, 0x01	; 1
    157a:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
			fs->fsi_flag = 0;
    157e:	f7 01       	movw	r30, r14
    1580:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    1582:	f7 01       	movw	r30, r14
    1584:	81 81       	ldd	r24, Z+1	; 0x01
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <disk_ioctl>
    1590:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
    1592:	c1 e0       	ldi	r28, 0x01	; 1
	}

	return res;
}
    1594:	8c 2f       	mov	r24, r28
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	08 95       	ret

000015a2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	ec 01       	movw	r28, r24
    15b6:	6a 01       	movw	r12, r20
    15b8:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    15ba:	42 30       	cpi	r20, 0x02	; 2
    15bc:	51 05       	cpc	r21, r1
    15be:	61 05       	cpc	r22, r1
    15c0:	71 05       	cpc	r23, r1
    15c2:	08 f4       	brcc	.+2      	; 0x15c6 <get_fat+0x24>
    15c4:	aa c0       	rjmp	.+340    	; 0x171a <get_fat+0x178>
    15c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15ca:	ac 8d       	ldd	r26, Y+28	; 0x1c
    15cc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    15ce:	48 17       	cp	r20, r24
    15d0:	59 07       	cpc	r21, r25
    15d2:	6a 07       	cpc	r22, r26
    15d4:	7b 07       	cpc	r23, r27
    15d6:	08 f0       	brcs	.+2      	; 0x15da <get_fat+0x38>
    15d8:	a5 c0       	rjmp	.+330    	; 0x1724 <get_fat+0x182>
		return 1;

	switch (fs->fs_type) {
    15da:	88 81       	ld	r24, Y
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	09 f4       	brne	.+2      	; 0x15e2 <get_fat+0x40>
    15e0:	5c c0       	rjmp	.+184    	; 0x169a <get_fat+0xf8>
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <get_fat+0x46>
    15e6:	76 c0       	rjmp	.+236    	; 0x16d4 <get_fat+0x132>
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	09 f0       	breq	.+2      	; 0x15ee <get_fat+0x4c>
    15ec:	a0 c0       	rjmp	.+320    	; 0x172e <get_fat+0x18c>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    15ee:	9a 01       	movw	r18, r20
    15f0:	36 95       	lsr	r19
    15f2:	27 95       	ror	r18
    15f4:	89 01       	movw	r16, r18
    15f6:	04 0f       	add	r16, r20
    15f8:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    15fa:	a8 01       	movw	r20, r16
    15fc:	45 2f       	mov	r20, r21
    15fe:	55 27       	eor	r21, r21
    1600:	46 95       	lsr	r20
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	8a a1       	lds	r24, 0x4a
    1608:	9b a1       	lds	r25, 0x4b
    160a:	ac a1       	lds	r26, 0x4c
    160c:	bd a1       	lds	r27, 0x4d
    160e:	48 0f       	add	r20, r24
    1610:	59 1f       	adc	r21, r25
    1612:	6a 1f       	adc	r22, r26
    1614:	7b 1f       	adc	r23, r27
    1616:	ce 01       	movw	r24, r28
    1618:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    161c:	88 23       	and	r24, r24
    161e:	09 f0       	breq	.+2      	; 0x1622 <get_fat+0x80>
    1620:	8a c0       	rjmp	.+276    	; 0x1736 <get_fat+0x194>
		wc = fs->win[bc % SS(fs)]; bc++;
    1622:	f8 01       	movw	r30, r16
    1624:	f1 70       	andi	r31, 0x01	; 1
    1626:	ec 0f       	add	r30, r28
    1628:	fd 1f       	adc	r31, r29
    162a:	b2 a8       	sts	0x82, r27
    162c:	0f 5f       	subi	r16, 0xFF	; 255
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1630:	a8 01       	movw	r20, r16
    1632:	45 2f       	mov	r20, r21
    1634:	55 27       	eor	r21, r21
    1636:	46 95       	lsr	r20
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	8a a1       	lds	r24, 0x4a
    163e:	9b a1       	lds	r25, 0x4b
    1640:	ac a1       	lds	r26, 0x4c
    1642:	bd a1       	lds	r27, 0x4d
    1644:	48 0f       	add	r20, r24
    1646:	59 1f       	adc	r21, r25
    1648:	6a 1f       	adc	r22, r26
    164a:	7b 1f       	adc	r23, r27
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    1652:	88 23       	and	r24, r24
    1654:	09 f0       	breq	.+2      	; 0x1658 <get_fat+0xb6>
    1656:	73 c0       	rjmp	.+230    	; 0x173e <get_fat+0x19c>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1658:	2b 2d       	mov	r18, r11
    165a:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    165c:	f8 01       	movw	r30, r16
    165e:	f1 70       	andi	r31, 0x01	; 1
    1660:	ec 0f       	add	r30, r28
    1662:	fd 1f       	adc	r31, r29
    1664:	92 a9       	sts	0x42, r25
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	82 2b       	or	r24, r18
    166a:	93 2b       	or	r25, r19
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    166c:	21 e0       	ldi	r18, 0x01	; 1
    166e:	c2 22       	and	r12, r18
    1670:	dd 24       	eor	r13, r13
    1672:	c1 14       	cp	r12, r1
    1674:	d1 04       	cpc	r13, r1
    1676:	51 f0       	breq	.+20     	; 0x168c <get_fat+0xea>
    1678:	92 95       	swap	r25
    167a:	82 95       	swap	r24
    167c:	8f 70       	andi	r24, 0x0F	; 15
    167e:	89 27       	eor	r24, r25
    1680:	9f 70       	andi	r25, 0x0F	; 15
    1682:	89 27       	eor	r24, r25
    1684:	8c 01       	movw	r16, r24
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	64 c0       	rjmp	.+200    	; 0x1754 <get_fat+0x1b2>
    168c:	8c 01       	movw	r16, r24
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	1f 70       	andi	r17, 0x0F	; 15
    1694:	20 70       	andi	r18, 0x00	; 0
    1696:	30 70       	andi	r19, 0x00	; 0
    1698:	5d c0       	rjmp	.+186    	; 0x1754 <get_fat+0x1b2>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    169a:	45 2f       	mov	r20, r21
    169c:	56 2f       	mov	r21, r22
    169e:	67 2f       	mov	r22, r23
    16a0:	77 27       	eor	r23, r23
    16a2:	8a a1       	lds	r24, 0x4a
    16a4:	9b a1       	lds	r25, 0x4b
    16a6:	ac a1       	lds	r26, 0x4c
    16a8:	bd a1       	lds	r27, 0x4d
    16aa:	48 0f       	add	r20, r24
    16ac:	59 1f       	adc	r21, r25
    16ae:	6a 1f       	adc	r22, r26
    16b0:	7b 1f       	adc	r23, r27
    16b2:	ce 01       	movw	r24, r28
    16b4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    16b8:	88 23       	and	r24, r24
    16ba:	09 f0       	breq	.+2      	; 0x16be <get_fat+0x11c>
    16bc:	44 c0       	rjmp	.+136    	; 0x1746 <get_fat+0x1a4>
		p = &fs->win[clst * 2 % SS(fs)];
    16be:	f6 01       	movw	r30, r12
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    16c6:	ce 0f       	add	r28, r30
    16c8:	df 1f       	adc	r29, r31
    16ca:	0a a9       	sts	0x4a, r16
    16cc:	1b a9       	sts	0x4b, r17
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 c0       	rjmp	.+128    	; 0x1754 <get_fat+0x1b2>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    16d4:	68 94       	set
    16d6:	16 f8       	bld	r1, 6
    16d8:	76 95       	lsr	r23
    16da:	67 95       	ror	r22
    16dc:	57 95       	ror	r21
    16de:	47 95       	ror	r20
    16e0:	16 94       	lsr	r1
    16e2:	d1 f7       	brne	.-12     	; 0x16d8 <get_fat+0x136>
    16e4:	8a a1       	lds	r24, 0x4a
    16e6:	9b a1       	lds	r25, 0x4b
    16e8:	ac a1       	lds	r26, 0x4c
    16ea:	bd a1       	lds	r27, 0x4d
    16ec:	48 0f       	add	r20, r24
    16ee:	59 1f       	adc	r21, r25
    16f0:	6a 1f       	adc	r22, r26
    16f2:	7b 1f       	adc	r23, r27
    16f4:	ce 01       	movw	r24, r28
    16f6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    16fa:	88 23       	and	r24, r24
    16fc:	41 f5       	brne	.+80     	; 0x174e <get_fat+0x1ac>
		p = &fs->win[clst * 4 % SS(fs)];
    16fe:	f6 01       	movw	r30, r12
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    170a:	ce 0f       	add	r28, r30
    170c:	df 1f       	adc	r29, r31
    170e:	0a a9       	sts	0x4a, r16
    1710:	1b a9       	sts	0x4b, r17
    1712:	2c a9       	sts	0x4c, r18
    1714:	3d a9       	sts	0x4d, r19
    1716:	3f 70       	andi	r19, 0x0F	; 15
    1718:	1d c0       	rjmp	.+58     	; 0x1754 <get_fat+0x1b2>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
    171a:	01 e0       	ldi	r16, 0x01	; 1
    171c:	10 e0       	ldi	r17, 0x00	; 0
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	18 c0       	rjmp	.+48     	; 0x1754 <get_fat+0x1b2>
    1724:	01 e0       	ldi	r16, 0x01	; 1
    1726:	10 e0       	ldi	r17, 0x00	; 0
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <get_fat+0x1b2>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    172e:	0f ef       	ldi	r16, 0xFF	; 255
    1730:	1f ef       	ldi	r17, 0xFF	; 255
    1732:	98 01       	movw	r18, r16
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <get_fat+0x1b2>
    1736:	0f ef       	ldi	r16, 0xFF	; 255
    1738:	1f ef       	ldi	r17, 0xFF	; 255
    173a:	98 01       	movw	r18, r16
    173c:	0b c0       	rjmp	.+22     	; 0x1754 <get_fat+0x1b2>
    173e:	0f ef       	ldi	r16, 0xFF	; 255
    1740:	1f ef       	ldi	r17, 0xFF	; 255
    1742:	98 01       	movw	r18, r16
    1744:	07 c0       	rjmp	.+14     	; 0x1754 <get_fat+0x1b2>
    1746:	0f ef       	ldi	r16, 0xFF	; 255
    1748:	1f ef       	ldi	r17, 0xFF	; 255
    174a:	98 01       	movw	r18, r16
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <get_fat+0x1b2>
    174e:	0f ef       	ldi	r16, 0xFF	; 255
    1750:	1f ef       	ldi	r17, 0xFF	; 255
    1752:	98 01       	movw	r18, r16
}
    1754:	60 2f       	mov	r22, r16
    1756:	71 2f       	mov	r23, r17
    1758:	82 2f       	mov	r24, r18
    175a:	93 2f       	mov	r25, r19
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	08 95       	ret

00001770 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1770:	8f 92       	push	r8
    1772:	9f 92       	push	r9
    1774:	af 92       	push	r10
    1776:	bf 92       	push	r11
    1778:	cf 92       	push	r12
    177a:	df 92       	push	r13
    177c:	ef 92       	push	r14
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	ec 01       	movw	r28, r24
    178a:	6a 01       	movw	r12, r20
    178c:	7b 01       	movw	r14, r22
    178e:	48 01       	movw	r8, r16
    1790:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1792:	42 30       	cpi	r20, 0x02	; 2
    1794:	51 05       	cpc	r21, r1
    1796:	61 05       	cpc	r22, r1
    1798:	71 05       	cpc	r23, r1
    179a:	08 f4       	brcc	.+2      	; 0x179e <put_fat+0x2e>
    179c:	c8 c0       	rjmp	.+400    	; 0x192e <put_fat+0x1be>
    179e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17a2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    17a4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    17a6:	48 17       	cp	r20, r24
    17a8:	59 07       	cpc	r21, r25
    17aa:	6a 07       	cpc	r22, r26
    17ac:	7b 07       	cpc	r23, r27
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <put_fat+0x42>
    17b0:	c0 c0       	rjmp	.+384    	; 0x1932 <put_fat+0x1c2>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    17b2:	88 81       	ld	r24, Y
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	09 f4       	brne	.+2      	; 0x17ba <put_fat+0x4a>
    17b8:	6a c0       	rjmp	.+212    	; 0x188e <put_fat+0x11e>
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <put_fat+0x50>
    17be:	82 c0       	rjmp	.+260    	; 0x18c4 <put_fat+0x154>
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <put_fat+0x56>
    17c4:	b0 c0       	rjmp	.+352    	; 0x1926 <put_fat+0x1b6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    17c6:	9a 01       	movw	r18, r20
    17c8:	36 95       	lsr	r19
    17ca:	27 95       	ror	r18
    17cc:	89 01       	movw	r16, r18
    17ce:	04 0f       	add	r16, r20
    17d0:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    17d2:	a8 01       	movw	r20, r16
    17d4:	45 2f       	mov	r20, r21
    17d6:	55 27       	eor	r21, r21
    17d8:	46 95       	lsr	r20
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	8a a1       	lds	r24, 0x4a
    17e0:	9b a1       	lds	r25, 0x4b
    17e2:	ac a1       	lds	r26, 0x4c
    17e4:	bd a1       	lds	r27, 0x4d
    17e6:	48 0f       	add	r20, r24
    17e8:	59 1f       	adc	r21, r25
    17ea:	6a 1f       	adc	r22, r26
    17ec:	7b 1f       	adc	r23, r27
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
			if (res != FR_OK) break;
    17f4:	88 23       	and	r24, r24
    17f6:	09 f0       	breq	.+2      	; 0x17fa <put_fat+0x8a>
    17f8:	97 c0       	rjmp	.+302    	; 0x1928 <put_fat+0x1b8>
			p = &fs->win[bc % SS(fs)];
    17fa:	c8 01       	movw	r24, r16
    17fc:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    17fe:	e1 e0       	ldi	r30, 0x01	; 1
    1800:	ce 22       	and	r12, r30
    1802:	dd 24       	eor	r13, r13
    1804:	c1 14       	cp	r12, r1
    1806:	d1 04       	cpc	r13, r1
    1808:	51 f0       	breq	.+20     	; 0x181e <put_fat+0xae>
    180a:	fe 01       	movw	r30, r28
    180c:	e8 0f       	add	r30, r24
    180e:	f9 1f       	adc	r31, r25
    1810:	22 a9       	sts	0x42, r18
    1812:	2f 70       	andi	r18, 0x0F	; 15
    1814:	38 2d       	mov	r19, r8
    1816:	32 95       	swap	r19
    1818:	30 7f       	andi	r19, 0xF0	; 240
    181a:	23 2b       	or	r18, r19
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <put_fat+0xb0>
    181e:	28 2d       	mov	r18, r8
    1820:	fe 01       	movw	r30, r28
    1822:	e8 0f       	add	r30, r24
    1824:	f9 1f       	adc	r31, r25
    1826:	22 ab       	sts	0x52, r18
			bc++;
    1828:	0f 5f       	subi	r16, 0xFF	; 255
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1830:	a8 01       	movw	r20, r16
    1832:	45 2f       	mov	r20, r21
    1834:	55 27       	eor	r21, r21
    1836:	46 95       	lsr	r20
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	8a a1       	lds	r24, 0x4a
    183e:	9b a1       	lds	r25, 0x4b
    1840:	ac a1       	lds	r26, 0x4c
    1842:	bd a1       	lds	r27, 0x4d
    1844:	48 0f       	add	r20, r24
    1846:	59 1f       	adc	r21, r25
    1848:	6a 1f       	adc	r22, r26
    184a:	7b 1f       	adc	r23, r27
    184c:	ce 01       	movw	r24, r28
    184e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
			if (res != FR_OK) break;
    1852:	88 23       	and	r24, r24
    1854:	09 f0       	breq	.+2      	; 0x1858 <put_fat+0xe8>
    1856:	68 c0       	rjmp	.+208    	; 0x1928 <put_fat+0x1b8>
			p = &fs->win[bc % SS(fs)];
    1858:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    185a:	c1 14       	cp	r12, r1
    185c:	d1 04       	cpc	r13, r1
    185e:	49 f0       	breq	.+18     	; 0x1872 <put_fat+0x102>
    1860:	68 94       	set
    1862:	13 f8       	bld	r1, 3
    1864:	b6 94       	lsr	r11
    1866:	a7 94       	ror	r10
    1868:	97 94       	ror	r9
    186a:	87 94       	ror	r8
    186c:	16 94       	lsr	r1
    186e:	d1 f7       	brne	.-12     	; 0x1864 <put_fat+0xf4>
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <put_fat+0x114>
    1872:	fe 01       	movw	r30, r28
    1874:	e0 0f       	add	r30, r16
    1876:	f1 1f       	adc	r31, r17
    1878:	22 a9       	sts	0x42, r18
    187a:	20 7f       	andi	r18, 0xF0	; 240
    187c:	99 2d       	mov	r25, r9
    187e:	9f 70       	andi	r25, 0x0F	; 15
    1880:	82 2e       	mov	r8, r18
    1882:	89 2a       	or	r8, r25
    1884:	0c 0f       	add	r16, r28
    1886:	1d 1f       	adc	r17, r29
    1888:	f8 01       	movw	r30, r16
    188a:	82 aa       	sts	0x92, r24
			break;
    188c:	4d c0       	rjmp	.+154    	; 0x1928 <put_fat+0x1b8>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    188e:	45 2f       	mov	r20, r21
    1890:	56 2f       	mov	r21, r22
    1892:	67 2f       	mov	r22, r23
    1894:	77 27       	eor	r23, r23
    1896:	8a a1       	lds	r24, 0x4a
    1898:	9b a1       	lds	r25, 0x4b
    189a:	ac a1       	lds	r26, 0x4c
    189c:	bd a1       	lds	r27, 0x4d
    189e:	48 0f       	add	r20, r24
    18a0:	59 1f       	adc	r21, r25
    18a2:	6a 1f       	adc	r22, r26
    18a4:	7b 1f       	adc	r23, r27
    18a6:	ce 01       	movw	r24, r28
    18a8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
			if (res != FR_OK) break;
    18ac:	88 23       	and	r24, r24
    18ae:	e1 f5       	brne	.+120    	; 0x1928 <put_fat+0x1b8>
			p = &fs->win[clst * 2 % SS(fs)];
    18b0:	f6 01       	movw	r30, r12
    18b2:	ee 0f       	add	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	f1 70       	andi	r31, 0x01	; 1
    18b8:	f2 96       	adiw	r30, 0x32	; 50
			ST_WORD(p, (WORD)val);
    18ba:	ec 0f       	add	r30, r28
    18bc:	fd 1f       	adc	r31, r29
    18be:	91 82       	std	Z+1, r9	; 0x01
    18c0:	80 82       	st	Z, r8
			break;
    18c2:	32 c0       	rjmp	.+100    	; 0x1928 <put_fat+0x1b8>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    18c4:	68 94       	set
    18c6:	16 f8       	bld	r1, 6
    18c8:	76 95       	lsr	r23
    18ca:	67 95       	ror	r22
    18cc:	57 95       	ror	r21
    18ce:	47 95       	ror	r20
    18d0:	16 94       	lsr	r1
    18d2:	d1 f7       	brne	.-12     	; 0x18c8 <put_fat+0x158>
    18d4:	8a a1       	lds	r24, 0x4a
    18d6:	9b a1       	lds	r25, 0x4b
    18d8:	ac a1       	lds	r26, 0x4c
    18da:	bd a1       	lds	r27, 0x4d
    18dc:	48 0f       	add	r20, r24
    18de:	59 1f       	adc	r21, r25
    18e0:	6a 1f       	adc	r22, r26
    18e2:	7b 1f       	adc	r23, r27
    18e4:	ce 01       	movw	r24, r28
    18e6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
			if (res != FR_OK) break;
    18ea:	88 23       	and	r24, r24
    18ec:	e9 f4       	brne	.+58     	; 0x1928 <put_fat+0x1b8>
			p = &fs->win[clst * 4 % SS(fs)];
    18ee:	96 01       	movw	r18, r12
    18f0:	22 0f       	add	r18, r18
    18f2:	33 1f       	adc	r19, r19
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	31 70       	andi	r19, 0x01	; 1
    18fa:	2e 5c       	subi	r18, 0xCE	; 206
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	e2 0f       	add	r30, r18
    1902:	f3 1f       	adc	r31, r19
			val |= LD_DWORD(p) & 0xF0000000;
    1904:	40 81       	ld	r20, Z
    1906:	51 81       	ldd	r21, Z+1	; 0x01
    1908:	62 81       	ldd	r22, Z+2	; 0x02
    190a:	73 81       	ldd	r23, Z+3	; 0x03
    190c:	40 70       	andi	r20, 0x00	; 0
    190e:	50 70       	andi	r21, 0x00	; 0
    1910:	60 70       	andi	r22, 0x00	; 0
    1912:	70 7f       	andi	r23, 0xF0	; 240
    1914:	48 29       	or	r20, r8
    1916:	59 29       	or	r21, r9
    1918:	6a 29       	or	r22, r10
    191a:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    191c:	40 83       	st	Z, r20
    191e:	51 83       	std	Z+1, r21	; 0x01
    1920:	62 83       	std	Z+2, r22	; 0x02
    1922:	73 83       	std	Z+3, r23	; 0x03
			break;
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <put_fat+0x1b8>

		default :
			res = FR_INT_ERR;
    1926:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <put_fat+0x1c4>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <put_fat+0x1c4>
    1932:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	9f 90       	pop	r9
    194a:	8f 90       	pop	r8
    194c:	08 95       	ret

0000194e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    194e:	2f 92       	push	r2
    1950:	3f 92       	push	r3
    1952:	4f 92       	push	r4
    1954:	5f 92       	push	r5
    1956:	6f 92       	push	r6
    1958:	7f 92       	push	r7
    195a:	8f 92       	push	r8
    195c:	9f 92       	push	r9
    195e:	af 92       	push	r10
    1960:	bf 92       	push	r11
    1962:	cf 92       	push	r12
    1964:	df 92       	push	r13
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	00 d0       	rcall	.+0      	; 0x1974 <create_chain+0x26>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <create_chain+0x28>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	1c 01       	movw	r2, r24
    197c:	49 83       	std	Y+1, r20	; 0x01
    197e:	5a 83       	std	Y+2, r21	; 0x02
    1980:	6b 83       	std	Y+3, r22	; 0x03
    1982:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;


	if (clst == 0) {		/* Create a new chain */
    1984:	41 15       	cp	r20, r1
    1986:	51 05       	cpc	r21, r1
    1988:	61 05       	cpc	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	c1 f4       	brne	.+48     	; 0x19be <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    198e:	dc 01       	movw	r26, r24
    1990:	1a 96       	adiw	r26, 0x0a	; 10
    1992:	8d 90       	ld	r8, X+
    1994:	9d 90       	ld	r9, X+
    1996:	ad 90       	ld	r10, X+
    1998:	bc 90       	ld	r11, X
    199a:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    199c:	81 14       	cp	r8, r1
    199e:	91 04       	cpc	r9, r1
    19a0:	a1 04       	cpc	r10, r1
    19a2:	b1 04       	cpc	r11, r1
    19a4:	51 f1       	breq	.+84     	; 0x19fa <create_chain+0xac>
    19a6:	5a 96       	adiw	r26, 0x1a	; 26
    19a8:	8d 91       	ld	r24, X+
    19aa:	9d 91       	ld	r25, X+
    19ac:	0d 90       	ld	r0, X+
    19ae:	bc 91       	ld	r27, X
    19b0:	a0 2d       	mov	r26, r0
    19b2:	88 16       	cp	r8, r24
    19b4:	99 06       	cpc	r9, r25
    19b6:	aa 06       	cpc	r10, r26
    19b8:	bb 06       	cpc	r11, r27
    19ba:	20 f5       	brcc	.+72     	; 0x1a04 <create_chain+0xb6>
    19bc:	27 c0       	rjmp	.+78     	; 0x1a0c <create_chain+0xbe>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    19be:	49 81       	ldd	r20, Y+1	; 0x01
    19c0:	5a 81       	ldd	r21, Y+2	; 0x02
    19c2:	6b 81       	ldd	r22, Y+3	; 0x03
    19c4:	7c 81       	ldd	r23, Y+4	; 0x04
    19c6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    19ca:	8b 01       	movw	r16, r22
    19cc:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    19ce:	62 30       	cpi	r22, 0x02	; 2
    19d0:	71 05       	cpc	r23, r1
    19d2:	81 05       	cpc	r24, r1
    19d4:	91 05       	cpc	r25, r1
    19d6:	08 f4       	brcc	.+2      	; 0x19da <create_chain+0x8c>
    19d8:	a8 c0       	rjmp	.+336    	; 0x1b2a <create_chain+0x1dc>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    19da:	f1 01       	movw	r30, r2
    19dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    19de:	93 8d       	ldd	r25, Z+27	; 0x1b
    19e0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    19e2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    19e4:	08 17       	cp	r16, r24
    19e6:	19 07       	cpc	r17, r25
    19e8:	2a 07       	cpc	r18, r26
    19ea:	3b 07       	cpc	r19, r27
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <create_chain+0xa2>
    19ee:	b4 c0       	rjmp	.+360    	; 0x1b58 <create_chain+0x20a>
		scl = clst;
    19f0:	89 80       	ldd	r8, Y+1	; 0x01
    19f2:	9a 80       	ldd	r9, Y+2	; 0x02
    19f4:	ab 80       	ldd	r10, Y+3	; 0x03
    19f6:	bc 80       	ldd	r11, Y+4	; 0x04
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <create_chain+0xbe>
	DWORD cs, ncl, scl;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    19fa:	88 24       	eor	r8, r8
    19fc:	99 24       	eor	r9, r9
    19fe:	54 01       	movw	r10, r8
    1a00:	83 94       	inc	r8
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <create_chain+0xbe>
    1a04:	88 24       	eor	r8, r8
    1a06:	99 24       	eor	r9, r9
    1a08:	54 01       	movw	r10, r8
    1a0a:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    1a0c:	75 01       	movw	r14, r10
    1a0e:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1a10:	44 24       	eor	r4, r4
    1a12:	55 24       	eor	r5, r5
    1a14:	32 01       	movw	r6, r4
    1a16:	68 94       	set
    1a18:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1a1a:	08 94       	sec
    1a1c:	c1 1c       	adc	r12, r1
    1a1e:	d1 1c       	adc	r13, r1
    1a20:	e1 1c       	adc	r14, r1
    1a22:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1a24:	f1 01       	movw	r30, r2
    1a26:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a28:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a2a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1a2c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1a2e:	c8 16       	cp	r12, r24
    1a30:	d9 06       	cpc	r13, r25
    1a32:	ea 06       	cpc	r14, r26
    1a34:	fb 06       	cpc	r15, r27
    1a36:	48 f0       	brcs	.+18     	; 0x1a4a <create_chain+0xfc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1a38:	f2 e0       	ldi	r31, 0x02	; 2
    1a3a:	8f 16       	cp	r8, r31
    1a3c:	91 04       	cpc	r9, r1
    1a3e:	a1 04       	cpc	r10, r1
    1a40:	b1 04       	cpc	r11, r1
    1a42:	08 f4       	brcc	.+2      	; 0x1a46 <create_chain+0xf8>
    1a44:	77 c0       	rjmp	.+238    	; 0x1b34 <create_chain+0x1e6>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1a46:	73 01       	movw	r14, r6
    1a48:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1a4a:	c1 01       	movw	r24, r2
    1a4c:	b7 01       	movw	r22, r14
    1a4e:	a6 01       	movw	r20, r12
    1a50:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    1a54:	8b 01       	movw	r16, r22
    1a56:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1a58:	61 15       	cp	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	81 05       	cpc	r24, r1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	a9 f0       	breq	.+42     	; 0x1a8c <create_chain+0x13e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1a62:	0f 3f       	cpi	r16, 0xFF	; 255
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	18 07       	cpc	r17, r24
    1a68:	8f ef       	ldi	r24, 0xFF	; 255
    1a6a:	28 07       	cpc	r18, r24
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	38 07       	cpc	r19, r24
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <create_chain+0x126>
    1a72:	72 c0       	rjmp	.+228    	; 0x1b58 <create_chain+0x20a>
    1a74:	01 30       	cpi	r16, 0x01	; 1
    1a76:	11 05       	cpc	r17, r1
    1a78:	21 05       	cpc	r18, r1
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <create_chain+0x132>
    1a7e:	6c c0       	rjmp	.+216    	; 0x1b58 <create_chain+0x20a>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1a80:	c8 14       	cp	r12, r8
    1a82:	d9 04       	cpc	r13, r9
    1a84:	ea 04       	cpc	r14, r10
    1a86:	fb 04       	cpc	r15, r11
    1a88:	41 f6       	brne	.-112    	; 0x1a1a <create_chain+0xcc>
    1a8a:	58 c0       	rjmp	.+176    	; 0x1b3c <create_chain+0x1ee>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    1a8c:	8c 2c       	mov	r8, r12
    1a8e:	4d 2c       	mov	r4, r13
    1a90:	be 2c       	mov	r11, r14
    1a92:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "last link" */
    1a94:	c1 01       	movw	r24, r2
    1a96:	4c 2d       	mov	r20, r12
    1a98:	5d 2d       	mov	r21, r13
    1a9a:	6e 2d       	mov	r22, r14
    1a9c:	7f 2d       	mov	r23, r15
    1a9e:	0f ef       	ldi	r16, 0xFF	; 255
    1aa0:	1f ef       	ldi	r17, 0xFF	; 255
    1aa2:	2f ef       	ldi	r18, 0xFF	; 255
    1aa4:	3f e0       	ldi	r19, 0x0F	; 15
    1aa6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <put_fat>
    1aaa:	88 23       	and	r24, r24
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <create_chain+0x162>
    1aae:	4a c0       	rjmp	.+148    	; 0x1b44 <create_chain+0x1f6>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ab6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	a1 05       	cpc	r26, r1
    1abc:	b1 05       	cpc	r27, r1
    1abe:	69 f0       	breq	.+26     	; 0x1ada <create_chain+0x18c>
		if (put_fat(fs, clst, ncl))
    1ac0:	c1 01       	movw	r24, r2
    1ac2:	49 81       	ldd	r20, Y+1	; 0x01
    1ac4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ac6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ac8:	7c 81       	ldd	r23, Y+4	; 0x04
    1aca:	0c 2d       	mov	r16, r12
    1acc:	1d 2d       	mov	r17, r13
    1ace:	2e 2d       	mov	r18, r14
    1ad0:	3f 2d       	mov	r19, r15
    1ad2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <put_fat>
    1ad6:	88 23       	and	r24, r24
    1ad8:	c9 f5       	brne	.+114    	; 0x1b4c <create_chain+0x1fe>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1ada:	d1 01       	movw	r26, r2
    1adc:	1a 96       	adiw	r26, 0x0a	; 10
    1ade:	8c 92       	st	X, r8
    1ae0:	1a 97       	sbiw	r26, 0x0a	; 10
    1ae2:	1b 96       	adiw	r26, 0x0b	; 11
    1ae4:	4c 92       	st	X, r4
    1ae6:	1b 97       	sbiw	r26, 0x0b	; 11
    1ae8:	1c 96       	adiw	r26, 0x0c	; 12
    1aea:	bc 92       	st	X, r11
    1aec:	1c 97       	sbiw	r26, 0x0c	; 12
    1aee:	1d 96       	adiw	r26, 0x0d	; 13
    1af0:	ac 92       	st	X, r10
    1af2:	1d 97       	sbiw	r26, 0x0d	; 13
	if (fs->free_clust != 0xFFFFFFFF) {
    1af4:	1e 96       	adiw	r26, 0x0e	; 14
    1af6:	8d 91       	ld	r24, X+
    1af8:	9d 91       	ld	r25, X+
    1afa:	0d 90       	ld	r0, X+
    1afc:	bc 91       	ld	r27, X
    1afe:	a0 2d       	mov	r26, r0
    1b00:	8f 3f       	cpi	r24, 0xFF	; 255
    1b02:	ef ef       	ldi	r30, 0xFF	; 255
    1b04:	9e 07       	cpc	r25, r30
    1b06:	ef ef       	ldi	r30, 0xFF	; 255
    1b08:	ae 07       	cpc	r26, r30
    1b0a:	ef ef       	ldi	r30, 0xFF	; 255
    1b0c:	be 07       	cpc	r27, r30
    1b0e:	11 f1       	breq	.+68     	; 0x1b54 <create_chain+0x206>
		fs->free_clust--;
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	a1 09       	sbc	r26, r1
    1b14:	b1 09       	sbc	r27, r1
    1b16:	f1 01       	movw	r30, r2
    1b18:	86 87       	std	Z+14, r24	; 0x0e
    1b1a:	97 87       	std	Z+15, r25	; 0x0f
    1b1c:	a0 8b       	std	Z+16, r26	; 0x10
    1b1e:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	85 83       	std	Z+5, r24	; 0x05
    1b24:	97 01       	movw	r18, r14
    1b26:	86 01       	movw	r16, r12
    1b28:	17 c0       	rjmp	.+46     	; 0x1b58 <create_chain+0x20a>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1b2a:	01 e0       	ldi	r16, 0x01	; 1
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	12 c0       	rjmp	.+36     	; 0x1b58 <create_chain+0x20a>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1b34:	00 e0       	ldi	r16, 0x00	; 0
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	98 01       	movw	r18, r16
    1b3a:	0e c0       	rjmp	.+28     	; 0x1b58 <create_chain+0x20a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1b3c:	00 e0       	ldi	r16, 0x00	; 0
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	98 01       	movw	r18, r16
    1b42:	0a c0       	rjmp	.+20     	; 0x1b58 <create_chain+0x20a>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "last link" */
		return 0xFFFFFFFF;
    1b44:	0f ef       	ldi	r16, 0xFF	; 255
    1b46:	1f ef       	ldi	r17, 0xFF	; 255
    1b48:	98 01       	movw	r18, r16
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <create_chain+0x20a>
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
    1b4c:	0f ef       	ldi	r16, 0xFF	; 255
    1b4e:	1f ef       	ldi	r17, 0xFF	; 255
    1b50:	98 01       	movw	r18, r16
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <create_chain+0x20a>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
    1b54:	97 01       	movw	r18, r14
    1b56:	86 01       	movw	r16, r12
		fs->free_clust--;
		fs->fsi_flag = 1;
	}

	return ncl;		/* Return new cluster number */
}
    1b58:	60 2f       	mov	r22, r16
    1b5a:	71 2f       	mov	r23, r17
    1b5c:	82 2f       	mov	r24, r18
    1b5e:	93 2f       	mov	r25, r19
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	bf 90       	pop	r11
    1b7a:	af 90       	pop	r10
    1b7c:	9f 90       	pop	r9
    1b7e:	8f 90       	pop	r8
    1b80:	7f 90       	pop	r7
    1b82:	6f 90       	pop	r6
    1b84:	5f 90       	pop	r5
    1b86:	4f 90       	pop	r4
    1b88:	3f 90       	pop	r3
    1b8a:	2f 90       	pop	r2
    1b8c:	08 95       	ret

00001b8e <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	ec 01       	movw	r28, r24
    1baa:	4a 01       	movw	r8, r20
    1bac:	5b 01       	movw	r10, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1bae:	42 30       	cpi	r20, 0x02	; 2
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	61 05       	cpc	r22, r1
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <remove_chain+0x2c>
    1bb8:	55 c0       	rjmp	.+170    	; 0x1c64 <remove_chain+0xd6>
    1bba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bbc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bbe:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1bc0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1bc2:	48 17       	cp	r20, r24
    1bc4:	59 07       	cpc	r21, r25
    1bc6:	6a 07       	cpc	r22, r26
    1bc8:	7b 07       	cpc	r23, r27
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <remove_chain+0x40>
    1bcc:	4d c0       	rjmp	.+154    	; 0x1c68 <remove_chain+0xda>
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <remove_chain+0x48>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1bd0:	46 01       	movw	r8, r12
    1bd2:	57 01       	movw	r10, r14
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <remove_chain+0x4c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    1bd6:	77 24       	eor	r7, r7
    1bd8:	73 94       	inc	r7
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1bda:	ce 01       	movw	r24, r28
    1bdc:	b5 01       	movw	r22, r10
    1bde:	a4 01       	movw	r20, r8
    1be0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    1be4:	6b 01       	movw	r12, r22
    1be6:	7c 01       	movw	r14, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1be8:	61 15       	cp	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	81 05       	cpc	r24, r1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	e9 f1       	breq	.+122    	; 0x1c6c <remove_chain+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	c9 16       	cp	r12, r25
    1bf6:	d1 04       	cpc	r13, r1
    1bf8:	e1 04       	cpc	r14, r1
    1bfa:	f1 04       	cpc	r15, r1
    1bfc:	c9 f1       	breq	.+114    	; 0x1c70 <remove_chain+0xe2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	c8 16       	cp	r12, r24
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	d8 06       	cpc	r13, r24
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	e8 06       	cpc	r14, r24
    1c0a:	8f ef       	ldi	r24, 0xFF	; 255
    1c0c:	f8 06       	cpc	r15, r24
    1c0e:	91 f1       	breq	.+100    	; 0x1c74 <remove_chain+0xe6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1c10:	ce 01       	movw	r24, r28
    1c12:	b5 01       	movw	r22, r10
    1c14:	a4 01       	movw	r20, r8
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	10 e0       	ldi	r17, 0x00	; 0
    1c1a:	98 01       	movw	r18, r16
    1c1c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <put_fat>
			if (res != FR_OK) break;
    1c20:	88 23       	and	r24, r24
    1c22:	49 f5       	brne	.+82     	; 0x1c76 <remove_chain+0xe8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1c24:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c26:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c28:	68 89       	ldd	r22, Y+16	; 0x10
    1c2a:	79 89       	ldd	r23, Y+17	; 0x11
    1c2c:	4f 3f       	cpi	r20, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	59 07       	cpc	r21, r25
    1c32:	9f ef       	ldi	r25, 0xFF	; 255
    1c34:	69 07       	cpc	r22, r25
    1c36:	9f ef       	ldi	r25, 0xFF	; 255
    1c38:	79 07       	cpc	r23, r25
    1c3a:	49 f0       	breq	.+18     	; 0x1c4e <remove_chain+0xc0>
				fs->free_clust++;
    1c3c:	4f 5f       	subi	r20, 0xFF	; 255
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	6f 4f       	sbci	r22, 0xFF	; 255
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255
    1c44:	4e 87       	std	Y+14, r20	; 0x0e
    1c46:	5f 87       	std	Y+15, r21	; 0x0f
    1c48:	68 8b       	std	Y+16, r22	; 0x10
    1c4a:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag = 1;
    1c4c:	7d 82       	std	Y+5, r7	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1c4e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1c50:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1c52:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1c54:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1c56:	c4 16       	cp	r12, r20
    1c58:	d5 06       	cpc	r13, r21
    1c5a:	e6 06       	cpc	r14, r22
    1c5c:	f7 06       	cpc	r15, r23
    1c5e:	08 f4       	brcc	.+2      	; 0x1c62 <remove_chain+0xd4>
    1c60:	b7 cf       	rjmp	.-146    	; 0x1bd0 <remove_chain+0x42>
    1c62:	09 c0       	rjmp	.+18     	; 0x1c76 <remove_chain+0xe8>
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	07 c0       	rjmp	.+14     	; 0x1c76 <remove_chain+0xe8>
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <remove_chain+0xe8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <remove_chain+0xe8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <remove_chain+0xe8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1c74:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	bf 90       	pop	r11
    1c88:	af 90       	pop	r10
    1c8a:	9f 90       	pop	r9
    1c8c:	8f 90       	pop	r8
    1c8e:	7f 90       	pop	r7
    1c90:	08 95       	ret

00001c92 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
    1c9c:	db 01       	movw	r26, r22
    1c9e:	ca 01       	movw	r24, r20
	clst -= 2;
    1ca0:	02 97       	sbiw	r24, 0x02	; 2
    1ca2:	a1 09       	sbc	r26, r1
    1ca4:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1ca6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1ca8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1caa:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1cac:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1cae:	42 50       	subi	r20, 0x02	; 2
    1cb0:	50 40       	sbci	r21, 0x00	; 0
    1cb2:	60 40       	sbci	r22, 0x00	; 0
    1cb4:	70 40       	sbci	r23, 0x00	; 0
    1cb6:	84 17       	cp	r24, r20
    1cb8:	95 07       	cpc	r25, r21
    1cba:	a6 07       	cpc	r26, r22
    1cbc:	b7 07       	cpc	r27, r23
    1cbe:	98 f4       	brcc	.+38     	; 0x1ce6 <clust2sect+0x54>
	return clst * fs->csize + fs->database;
    1cc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	bc 01       	movw	r22, r24
    1cca:	cd 01       	movw	r24, r26
    1ccc:	0e 94 73 28 	call	0x50e6	; 0x50e6 <__mulsi3>
    1cd0:	8b 01       	movw	r16, r22
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	8a a5       	lds	r24, 0x6a
    1cd6:	9b a5       	lds	r25, 0x6b
    1cd8:	ac a5       	lds	r26, 0x6c
    1cda:	bd a5       	lds	r27, 0x6d
    1cdc:	08 0f       	add	r16, r24
    1cde:	19 1f       	adc	r17, r25
    1ce0:	2a 1f       	adc	r18, r26
    1ce2:	3b 1f       	adc	r19, r27
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1ce6:	00 e0       	ldi	r16, 0x00	; 0
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
    1cea:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
    1cec:	60 2f       	mov	r22, r16
    1cee:	71 2f       	mov	r23, r17
    1cf0:	82 2f       	mov	r24, r18
    1cf2:	93 2f       	mov	r25, r19
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1d0e:	7d 83       	std	Y+5, r23	; 0x05
    1d10:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    1d12:	4e 81       	ldd	r20, Y+6	; 0x06
    1d14:	5f 81       	ldd	r21, Y+7	; 0x07
    1d16:	68 85       	ldd	r22, Y+8	; 0x08
    1d18:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1d1a:	41 30       	cpi	r20, 0x01	; 1
    1d1c:	51 05       	cpc	r21, r1
    1d1e:	61 05       	cpc	r22, r1
    1d20:	71 05       	cpc	r23, r1
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <dir_sdi+0x28>
    1d24:	9f c0       	rjmp	.+318    	; 0x1e64 <dir_sdi+0x166>
    1d26:	e8 81       	ld	r30, Y
    1d28:	f9 81       	ldd	r31, Y+1	; 0x01
    1d2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d2c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d2e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d30:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d32:	48 17       	cp	r20, r24
    1d34:	59 07       	cpc	r21, r25
    1d36:	6a 07       	cpc	r22, r26
    1d38:	7b 07       	cpc	r23, r27
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <dir_sdi+0x40>
    1d3c:	95 c0       	rjmp	.+298    	; 0x1e68 <dir_sdi+0x16a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1d3e:	41 15       	cp	r20, r1
    1d40:	51 05       	cpc	r21, r1
    1d42:	61 05       	cpc	r22, r1
    1d44:	71 05       	cpc	r23, r1
    1d46:	69 f5       	brne	.+90     	; 0x1da2 <dir_sdi+0xa4>
    1d48:	80 81       	ld	r24, Z
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	49 f4       	brne	.+18     	; 0x1d60 <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    1d4e:	46 a1       	lds	r20, 0x46
    1d50:	57 a1       	lds	r21, 0x47
    1d52:	60 a5       	lds	r22, 0x60
    1d54:	71 a5       	lds	r23, 0x61

	if (clst == 0) {	/* Static table */
    1d56:	41 15       	cp	r20, r1
    1d58:	51 05       	cpc	r21, r1
    1d5a:	61 05       	cpc	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	09 f5       	brne	.+66     	; 0x1da2 <dir_sdi+0xa4>
		dj->clust = clst;
    1d60:	1a 86       	std	Y+10, r1	; 0x0a
    1d62:	1b 86       	std	Y+11, r1	; 0x0b
    1d64:	1c 86       	std	Y+12, r1	; 0x0c
    1d66:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1d68:	80 85       	ldd	r24, Z+8	; 0x08
    1d6a:	91 85       	ldd	r25, Z+9	; 0x09
    1d6c:	08 17       	cp	r16, r24
    1d6e:	19 07       	cpc	r17, r25
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <dir_sdi+0x76>
    1d72:	7c c0       	rjmp	.+248    	; 0x1e6c <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1d74:	c8 01       	movw	r24, r16
    1d76:	92 95       	swap	r25
    1d78:	82 95       	swap	r24
    1d7a:	8f 70       	andi	r24, 0x0F	; 15
    1d7c:	89 27       	eor	r24, r25
    1d7e:	9f 70       	andi	r25, 0x0F	; 15
    1d80:	89 27       	eor	r24, r25
    1d82:	ac 01       	movw	r20, r24
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	86 a1       	lds	r24, 0x46
    1d8a:	97 a1       	lds	r25, 0x47
    1d8c:	a0 a5       	lds	r26, 0x60
    1d8e:	b1 a5       	lds	r27, 0x61
    1d90:	84 0f       	add	r24, r20
    1d92:	95 1f       	adc	r25, r21
    1d94:	a6 1f       	adc	r26, r22
    1d96:	b7 1f       	adc	r27, r23
    1d98:	8e 87       	std	Y+14, r24	; 0x0e
    1d9a:	9f 87       	std	Y+15, r25	; 0x0f
    1d9c:	a8 8b       	std	Y+16, r26	; 0x10
    1d9e:	b9 8b       	std	Y+17, r27	; 0x11
    1da0:	4e c0       	rjmp	.+156    	; 0x1e3e <dir_sdi+0x140>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	7c 01       	movw	r14, r24
    1da8:	ee 0c       	add	r14, r14
    1daa:	ff 1c       	adc	r15, r15
    1dac:	ee 0c       	add	r14, r14
    1dae:	ff 1c       	adc	r15, r15
    1db0:	ee 0c       	add	r14, r14
    1db2:	ff 1c       	adc	r15, r15
    1db4:	ee 0c       	add	r14, r14
    1db6:	ff 1c       	adc	r15, r15
		while (idx >= ic) {	/* Follow cluster chain */
    1db8:	0e 15       	cp	r16, r14
    1dba:	1f 05       	cpc	r17, r15
    1dbc:	28 f1       	brcs	.+74     	; 0x1e08 <dir_sdi+0x10a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1dbe:	88 81       	ld	r24, Y
    1dc0:	99 81       	ldd	r25, Y+1	; 0x01
    1dc2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    1dc6:	ab 01       	movw	r20, r22
    1dc8:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1dca:	4f 3f       	cpi	r20, 0xFF	; 255
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	58 07       	cpc	r21, r24
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	68 07       	cpc	r22, r24
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	78 07       	cpc	r23, r24
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <dir_sdi+0xde>
    1dda:	4a c0       	rjmp	.+148    	; 0x1e70 <dir_sdi+0x172>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1ddc:	42 30       	cpi	r20, 0x02	; 2
    1dde:	51 05       	cpc	r21, r1
    1de0:	61 05       	cpc	r22, r1
    1de2:	71 05       	cpc	r23, r1
    1de4:	08 f4       	brcc	.+2      	; 0x1de8 <dir_sdi+0xea>
    1de6:	46 c0       	rjmp	.+140    	; 0x1e74 <dir_sdi+0x176>
    1de8:	e8 81       	ld	r30, Y
    1dea:	f9 81       	ldd	r31, Y+1	; 0x01
    1dec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dee:	93 8d       	ldd	r25, Z+27	; 0x1b
    1df0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1df2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1df4:	48 17       	cp	r20, r24
    1df6:	59 07       	cpc	r21, r25
    1df8:	6a 07       	cpc	r22, r26
    1dfa:	7b 07       	cpc	r23, r27
    1dfc:	e8 f5       	brcc	.+122    	; 0x1e78 <dir_sdi+0x17a>
				return FR_INT_ERR;
			idx -= ic;
    1dfe:	0e 19       	sub	r16, r14
    1e00:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1e02:	0e 15       	cp	r16, r14
    1e04:	1f 05       	cpc	r17, r15
    1e06:	d8 f6       	brcc	.-74     	; 0x1dbe <dir_sdi+0xc0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1e08:	4a 87       	std	Y+10, r20	; 0x0a
    1e0a:	5b 87       	std	Y+11, r21	; 0x0b
    1e0c:	6c 87       	std	Y+12, r22	; 0x0c
    1e0e:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1e10:	88 81       	ld	r24, Y
    1e12:	99 81       	ldd	r25, Y+1	; 0x01
    1e14:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    1e18:	ab 01       	movw	r20, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	92 95       	swap	r25
    1e20:	82 95       	swap	r24
    1e22:	8f 70       	andi	r24, 0x0F	; 15
    1e24:	89 27       	eor	r24, r25
    1e26:	9f 70       	andi	r25, 0x0F	; 15
    1e28:	89 27       	eor	r24, r25
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	84 0f       	add	r24, r20
    1e30:	95 1f       	adc	r25, r21
    1e32:	a6 1f       	adc	r26, r22
    1e34:	b7 1f       	adc	r27, r23
    1e36:	8e 87       	std	Y+14, r24	; 0x0e
    1e38:	9f 87       	std	Y+15, r25	; 0x0f
    1e3a:	a8 8b       	std	Y+16, r26	; 0x10
    1e3c:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1e3e:	88 81       	ld	r24, Y
    1e40:	99 81       	ldd	r25, Y+1	; 0x01
    1e42:	c2 96       	adiw	r24, 0x32	; 50
    1e44:	0f 70       	andi	r16, 0x0F	; 15
    1e46:	10 70       	andi	r17, 0x00	; 0
    1e48:	00 0f       	add	r16, r16
    1e4a:	11 1f       	adc	r17, r17
    1e4c:	02 95       	swap	r16
    1e4e:	12 95       	swap	r17
    1e50:	10 7f       	andi	r17, 0xF0	; 240
    1e52:	10 27       	eor	r17, r16
    1e54:	00 7f       	andi	r16, 0xF0	; 240
    1e56:	10 27       	eor	r17, r16
    1e58:	80 0f       	add	r24, r16
    1e5a:	91 1f       	adc	r25, r17
    1e5c:	9b 8b       	std	Y+19, r25	; 0x13
    1e5e:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	0b c0       	rjmp	.+22     	; 0x1e7a <dir_sdi+0x17c>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	09 c0       	rjmp	.+18     	; 0x1e7a <dir_sdi+0x17c>
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <dir_sdi+0x17c>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <dir_sdi+0x17c>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <dir_sdi+0x17c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <dir_sdi+0x17c>
    1e78:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	08 95       	ret

00001e88 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1e8e:	6c 81       	ldd	r22, Y+4	; 0x04
    1e90:	7d 81       	ldd	r23, Y+5	; 0x05
    1e92:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dir_sdi>
	if (res == FR_OK) {
    1e96:	88 23       	and	r24, r24
    1e98:	91 f4       	brne	.+36     	; 0x1ebe <dir_remove+0x36>
		res = move_window(dj->fs, dj->sect);
    1e9a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e9c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e9e:	68 89       	ldd	r22, Y+16	; 0x10
    1ea0:	79 89       	ldd	r23, Y+17	; 0x11
    1ea2:	88 81       	ld	r24, Y
    1ea4:	99 81       	ldd	r25, Y+1	; 0x01
    1ea6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
		if (res == FR_OK) {
    1eaa:	88 23       	and	r24, r24
    1eac:	41 f4       	brne	.+16     	; 0x1ebe <dir_remove+0x36>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    1eae:	ea 89       	ldd	r30, Y+18	; 0x12
    1eb0:	fb 89       	ldd	r31, Y+19	; 0x13
    1eb2:	95 ee       	ldi	r25, 0xE5	; 229
    1eb4:	90 83       	st	Z, r25
			dj->fs->wflag = 1;
    1eb6:	e8 81       	ld	r30, Y
    1eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	94 83       	std	Z+4, r25	; 0x04
		}
	}
#endif

	return res;
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	8c 01       	movw	r16, r24
    1ede:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	14 96       	adiw	r26, 0x04	; 4
    1ee4:	ed 90       	ld	r14, X+
    1ee6:	fc 90       	ld	r15, X
    1ee8:	15 97       	sbiw	r26, 0x05	; 5
    1eea:	08 94       	sec
    1eec:	e1 1c       	adc	r14, r1
    1eee:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1ef0:	e1 14       	cp	r14, r1
    1ef2:	f1 04       	cpc	r15, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <dir_next+0x34>
    1ef6:	09 c1       	rjmp	.+530    	; 0x210a <dir_next+0x246>
    1ef8:	1e 96       	adiw	r26, 0x0e	; 14
    1efa:	8d 91       	ld	r24, X+
    1efc:	9d 91       	ld	r25, X+
    1efe:	0d 90       	ld	r0, X+
    1f00:	bc 91       	ld	r27, X
    1f02:	a0 2d       	mov	r26, r0
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	a1 05       	cpc	r26, r1
    1f08:	b1 05       	cpc	r27, r1
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <dir_next+0x4a>
    1f0c:	00 c1       	rjmp	.+512    	; 0x210e <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1f0e:	0f 2e       	mov	r0, r31
    1f10:	ff e0       	ldi	r31, 0x0F	; 15
    1f12:	cf 2e       	mov	r12, r31
    1f14:	dd 24       	eor	r13, r13
    1f16:	f0 2d       	mov	r31, r0
    1f18:	ce 20       	and	r12, r14
    1f1a:	df 20       	and	r13, r15
    1f1c:	c1 14       	cp	r12, r1
    1f1e:	d1 04       	cpc	r13, r1
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <dir_next+0x60>
    1f22:	d8 c0       	rjmp	.+432    	; 0x20d4 <dir_next+0x210>
		dj->sect++;					/* Next sector */
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	a1 1d       	adc	r26, r1
    1f28:	b1 1d       	adc	r27, r1
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	86 87       	std	Z+14, r24	; 0x0e
    1f2e:	97 87       	std	Z+15, r25	; 0x0f
    1f30:	a0 8b       	std	Z+16, r26	; 0x10
    1f32:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1f34:	42 85       	ldd	r20, Z+10	; 0x0a
    1f36:	53 85       	ldd	r21, Z+11	; 0x0b
    1f38:	64 85       	ldd	r22, Z+12	; 0x0c
    1f3a:	75 85       	ldd	r23, Z+13	; 0x0d
    1f3c:	41 15       	cp	r20, r1
    1f3e:	51 05       	cpc	r21, r1
    1f40:	61 05       	cpc	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	51 f4       	brne	.+20     	; 0x1f5a <dir_next+0x96>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1f46:	01 90       	ld	r0, Z+
    1f48:	f0 81       	ld	r31, Z
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	80 85       	ldd	r24, Z+8	; 0x08
    1f4e:	91 85       	ldd	r25, Z+9	; 0x09
    1f50:	e8 16       	cp	r14, r24
    1f52:	f9 06       	cpc	r15, r25
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <dir_next+0x94>
    1f56:	dd c0       	rjmp	.+442    	; 0x2112 <dir_next+0x24e>
    1f58:	bd c0       	rjmp	.+378    	; 0x20d4 <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	f0 81       	ld	r31, Z
    1f5e:	e0 2d       	mov	r30, r0
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	97 01       	movw	r18, r14
    1f68:	32 95       	swap	r19
    1f6a:	22 95       	swap	r18
    1f6c:	2f 70       	andi	r18, 0x0F	; 15
    1f6e:	23 27       	eor	r18, r19
    1f70:	3f 70       	andi	r19, 0x0F	; 15
    1f72:	23 27       	eor	r18, r19
    1f74:	82 23       	and	r24, r18
    1f76:	93 23       	and	r25, r19
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <dir_next+0xba>
    1f7c:	ab c0       	rjmp	.+342    	; 0x20d4 <dir_next+0x210>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1f7e:	cf 01       	movw	r24, r30
    1f80:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    1f84:	4b 01       	movw	r8, r22
    1f86:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    1f88:	62 30       	cpi	r22, 0x02	; 2
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	81 05       	cpc	r24, r1
    1f8e:	91 05       	cpc	r25, r1
    1f90:	08 f4       	brcc	.+2      	; 0x1f94 <dir_next+0xd0>
    1f92:	c1 c0       	rjmp	.+386    	; 0x2116 <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f94:	6f 3f       	cpi	r22, 0xFF	; 255
    1f96:	ef ef       	ldi	r30, 0xFF	; 255
    1f98:	7e 07       	cpc	r23, r30
    1f9a:	ef ef       	ldi	r30, 0xFF	; 255
    1f9c:	8e 07       	cpc	r24, r30
    1f9e:	ef ef       	ldi	r30, 0xFF	; 255
    1fa0:	9e 07       	cpc	r25, r30
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <dir_next+0xe2>
    1fa4:	ba c0       	rjmp	.+372    	; 0x211a <dir_next+0x256>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1fa6:	d8 01       	movw	r26, r16
    1fa8:	ed 91       	ld	r30, X+
    1faa:	fc 91       	ld	r31, X
    1fac:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fae:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fb0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1fb2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1fb4:	88 16       	cp	r8, r24
    1fb6:	99 06       	cpc	r9, r25
    1fb8:	aa 06       	cpc	r10, r26
    1fba:	bb 06       	cpc	r11, r27
    1fbc:	08 f4       	brcc	.+2      	; 0x1fc0 <dir_next+0xfc>
    1fbe:	78 c0       	rjmp	.+240    	; 0x20b0 <dir_next+0x1ec>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    1fc0:	20 97       	sbiw	r28, 0x00	; 0
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <dir_next+0x102>
    1fc4:	ac c0       	rjmp	.+344    	; 0x211e <dir_next+0x25a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    1fc6:	d8 01       	movw	r26, r16
    1fc8:	1a 96       	adiw	r26, 0x0a	; 10
    1fca:	4d 91       	ld	r20, X+
    1fcc:	5d 91       	ld	r21, X+
    1fce:	6d 91       	ld	r22, X+
    1fd0:	7c 91       	ld	r23, X
    1fd2:	1d 97       	sbiw	r26, 0x0d	; 13
    1fd4:	cf 01       	movw	r24, r30
    1fd6:	0e 94 a7 0c 	call	0x194e	; 0x194e <create_chain>
    1fda:	4b 01       	movw	r8, r22
    1fdc:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1fde:	61 15       	cp	r22, r1
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	81 05       	cpc	r24, r1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <dir_next+0x126>
    1fe8:	9c c0       	rjmp	.+312    	; 0x2122 <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    1fea:	61 30       	cpi	r22, 0x01	; 1
    1fec:	71 05       	cpc	r23, r1
    1fee:	81 05       	cpc	r24, r1
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <dir_next+0x132>
    1ff4:	98 c0       	rjmp	.+304    	; 0x2126 <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1ff6:	6f 3f       	cpi	r22, 0xFF	; 255
    1ff8:	ef ef       	ldi	r30, 0xFF	; 255
    1ffa:	7e 07       	cpc	r23, r30
    1ffc:	ef ef       	ldi	r30, 0xFF	; 255
    1ffe:	8e 07       	cpc	r24, r30
    2000:	ef ef       	ldi	r30, 0xFF	; 255
    2002:	9e 07       	cpc	r25, r30
    2004:	09 f4       	brne	.+2      	; 0x2008 <dir_next+0x144>
    2006:	91 c0       	rjmp	.+290    	; 0x212a <dir_next+0x266>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2008:	d8 01       	movw	r26, r16
    200a:	8d 91       	ld	r24, X+
    200c:	9c 91       	ld	r25, X
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	50 e0       	ldi	r21, 0x00	; 0
    2012:	ba 01       	movw	r22, r20
    2014:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2018:	88 23       	and	r24, r24
    201a:	09 f0       	breq	.+2      	; 0x201e <dir_next+0x15a>
    201c:	88 c0       	rjmp	.+272    	; 0x212e <dir_next+0x26a>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    201e:	f8 01       	movw	r30, r16
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	c2 96       	adiw	r24, 0x32	; 50
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	52 e0       	ldi	r21, 0x02	; 2
    202e:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2032:	d8 01       	movw	r26, r16
    2034:	cd 91       	ld	r28, X+
    2036:	dc 91       	ld	r29, X
    2038:	ce 01       	movw	r24, r28
    203a:	b5 01       	movw	r22, r10
    203c:	a4 01       	movw	r20, r8
    203e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	8e a7       	lds	r24, 0x7e
    2048:	9f a7       	lds	r25, 0x7f
    204a:	a8 ab       	sts	0x58, r26
    204c:	b9 ab       	sts	0x59, r27
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    204e:	c0 e0       	ldi	r28, 0x00	; 0
						dj->fs->wflag = 1;
    2050:	d1 e0       	ldi	r29, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2052:	1b c0       	rjmp	.+54     	; 0x208a <dir_next+0x1c6>
						dj->fs->wflag = 1;
    2054:	d4 83       	std	Z+4, r29	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2056:	f8 01       	movw	r30, r16
    2058:	80 81       	ld	r24, Z
    205a:	91 81       	ldd	r25, Z+1	; 0x01
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	ba 01       	movw	r22, r20
    2062:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2066:	88 23       	and	r24, r24
    2068:	09 f0       	breq	.+2      	; 0x206c <dir_next+0x1a8>
    206a:	63 c0       	rjmp	.+198    	; 0x2132 <dir_next+0x26e>
						dj->fs->winsect++;
    206c:	d8 01       	movw	r26, r16
    206e:	ed 91       	ld	r30, X+
    2070:	fc 91       	ld	r31, X
    2072:	86 a5       	lds	r24, 0x66
    2074:	97 a5       	lds	r25, 0x67
    2076:	a0 a9       	sts	0x40, r26
    2078:	b1 a9       	sts	0x41, r27
    207a:	01 96       	adiw	r24, 0x01	; 1
    207c:	a1 1d       	adc	r26, r1
    207e:	b1 1d       	adc	r27, r1
    2080:	86 a7       	lds	r24, 0x76
    2082:	97 a7       	lds	r25, 0x77
    2084:	a0 ab       	sts	0x50, r26
    2086:	b1 ab       	sts	0x51, r27
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2088:	cf 5f       	subi	r28, 0xFF	; 255
    208a:	d8 01       	movw	r26, r16
    208c:	ed 91       	ld	r30, X+
    208e:	fc 91       	ld	r31, X
    2090:	11 97       	sbiw	r26, 0x01	; 1
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	c8 17       	cp	r28, r24
    2096:	f0 f2       	brcs	.-68     	; 0x2054 <dir_next+0x190>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2098:	86 a5       	lds	r24, 0x66
    209a:	97 a5       	lds	r25, 0x67
    209c:	a0 a9       	sts	0x40, r26
    209e:	b1 a9       	sts	0x41, r27
    20a0:	8c 1b       	sub	r24, r28
    20a2:	91 09       	sbc	r25, r1
    20a4:	a1 09       	sbc	r26, r1
    20a6:	b1 09       	sbc	r27, r1
    20a8:	86 a7       	lds	r24, 0x76
    20aa:	97 a7       	lds	r25, 0x77
    20ac:	a0 ab       	sts	0x50, r26
    20ae:	b1 ab       	sts	0x51, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    20b0:	f8 01       	movw	r30, r16
    20b2:	82 86       	std	Z+10, r8	; 0x0a
    20b4:	93 86       	std	Z+11, r9	; 0x0b
    20b6:	a4 86       	std	Z+12, r10	; 0x0c
    20b8:	b5 86       	std	Z+13, r11	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	b5 01       	movw	r22, r10
    20c0:	a4 01       	movw	r20, r8
    20c2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	f8 01       	movw	r30, r16
    20cc:	86 87       	std	Z+14, r24	; 0x0e
    20ce:	97 87       	std	Z+15, r25	; 0x0f
    20d0:	a0 8b       	std	Z+16, r26	; 0x10
    20d2:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    20d4:	d8 01       	movw	r26, r16
    20d6:	15 96       	adiw	r26, 0x05	; 5
    20d8:	fc 92       	st	X, r15
    20da:	ee 92       	st	-X, r14
    20dc:	14 97       	sbiw	r26, 0x04	; 4
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    20de:	8d 91       	ld	r24, X+
    20e0:	9c 91       	ld	r25, X
    20e2:	11 97       	sbiw	r26, 0x01	; 1
    20e4:	c2 96       	adiw	r24, 0x32	; 50
    20e6:	cc 0c       	add	r12, r12
    20e8:	dd 1c       	adc	r13, r13
    20ea:	cc 0c       	add	r12, r12
    20ec:	dd 1c       	adc	r13, r13
    20ee:	cc 0c       	add	r12, r12
    20f0:	dd 1c       	adc	r13, r13
    20f2:	cc 0c       	add	r12, r12
    20f4:	dd 1c       	adc	r13, r13
    20f6:	cc 0c       	add	r12, r12
    20f8:	dd 1c       	adc	r13, r13
    20fa:	8c 0d       	add	r24, r12
    20fc:	9d 1d       	adc	r25, r13
    20fe:	53 96       	adiw	r26, 0x13	; 19
    2100:	9c 93       	st	X, r25
    2102:	8e 93       	st	-X, r24
    2104:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	15 c0       	rjmp	.+42     	; 0x2134 <dir_next+0x270>
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    210a:	84 e0       	ldi	r24, 0x04	; 4
    210c:	13 c0       	rjmp	.+38     	; 0x2134 <dir_next+0x270>
    210e:	84 e0       	ldi	r24, 0x04	; 4
    2110:	11 c0       	rjmp	.+34     	; 0x2134 <dir_next+0x270>
	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    2112:	84 e0       	ldi	r24, 0x04	; 4
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	0d c0       	rjmp	.+26     	; 0x2134 <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	0b c0       	rjmp	.+22     	; 0x2134 <dir_next+0x270>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	09 c0       	rjmp	.+18     	; 0x2134 <dir_next+0x270>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2122:	87 e0       	ldi	r24, 0x07	; 7
    2124:	07 c0       	rjmp	.+14     	; 0x2134 <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <dir_next+0x270>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <dir_next+0x270>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2132:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	bf 90       	pop	r11
    2146:	af 90       	pop	r10
    2148:	9f 90       	pop	r9
    214a:	8f 90       	pop	r8
    214c:	08 95       	ret

0000214e <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    214e:	2f 92       	push	r2
    2150:	3f 92       	push	r3
    2152:	4f 92       	push	r4
    2154:	5f 92       	push	r5
    2156:	6f 92       	push	r6
    2158:	7f 92       	push	r7
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	00 d0       	rcall	.+0      	; 0x2174 <follow_path+0x26>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <follow_path+0x28>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <follow_path+0x2a>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8c 01       	movw	r16, r24
    217e:	4b 01       	movw	r8, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    2180:	db 01       	movw	r26, r22
    2182:	8c 91       	ld	r24, X
    2184:	8f 32       	cpi	r24, 0x2F	; 47
    2186:	11 f0       	breq	.+4      	; 0x218c <follow_path+0x3e>
    2188:	8c 35       	cpi	r24, 0x5C	; 92
    218a:	49 f4       	brne	.+18     	; 0x219e <follow_path+0x50>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    218c:	08 94       	sec
    218e:	81 1c       	adc	r8, r1
    2190:	91 1c       	adc	r9, r1
    2192:	f8 01       	movw	r30, r16
    2194:	16 82       	std	Z+6, r1	; 0x06
    2196:	17 82       	std	Z+7, r1	; 0x07
    2198:	10 86       	std	Z+8, r1	; 0x08
    219a:	11 86       	std	Z+9, r1	; 0x09
    219c:	0c c0       	rjmp	.+24     	; 0x21b6 <follow_path+0x68>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    219e:	d8 01       	movw	r26, r16
    21a0:	ed 91       	ld	r30, X+
    21a2:	fc 91       	ld	r31, X
    21a4:	86 89       	ldd	r24, Z+22	; 0x16
    21a6:	97 89       	ldd	r25, Z+23	; 0x17
    21a8:	a0 8d       	ldd	r26, Z+24	; 0x18
    21aa:	b1 8d       	ldd	r27, Z+25	; 0x19
    21ac:	f8 01       	movw	r30, r16
    21ae:	86 83       	std	Z+6, r24	; 0x06
    21b0:	97 83       	std	Z+7, r25	; 0x07
    21b2:	a0 87       	std	Z+8, r26	; 0x08
    21b4:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    21b6:	d4 01       	movw	r26, r8
    21b8:	8c 91       	ld	r24, X
    21ba:	80 32       	cpi	r24, 0x20	; 32
    21bc:	50 f4       	brcc	.+20     	; 0x21d2 <follow_path+0x84>
		res = dir_sdi(dj, 0);
    21be:	c8 01       	movw	r24, r16
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dir_sdi>
    21c8:	48 2f       	mov	r20, r24
		dj->dir = 0;
    21ca:	f8 01       	movw	r30, r16
    21cc:	13 8a       	std	Z+19, r1	; 0x13
    21ce:	12 8a       	std	Z+18, r1	; 0x12
    21d0:	46 c1       	rjmp	.+652    	; 0x245e <follow_path+0x310>
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
    21d2:	0f 2e       	mov	r0, r31
    21d4:	fb e0       	ldi	r31, 0x0B	; 11
    21d6:	6f 2e       	mov	r6, r31
    21d8:	77 24       	eor	r7, r7
    21da:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    21dc:	aa 24       	eor	r10, r10
    21de:	bb 24       	eor	r11, r11
    21e0:	44 24       	eor	r4, r4
    21e2:	55 24       	eor	r5, r5
    21e4:	68 94       	set
    21e6:	43 f8       	bld	r4, 3
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    21e8:	49 82       	std	Y+1, r4	; 0x01
    21ea:	5a 82       	std	Y+2, r5	; 0x02
    21ec:	6b 82       	std	Y+3, r6	; 0x03
    21ee:	7c 82       	std	Y+4, r7	; 0x04
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    21f0:	0f 2e       	mov	r0, r31
    21f2:	f0 e9       	ldi	r31, 0x90	; 144
    21f4:	2f 2e       	mov	r2, r31
    21f6:	f4 e0       	ldi	r31, 0x04	; 4
    21f8:	3f 2e       	mov	r3, r31
    21fa:	f0 2d       	mov	r31, r0
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    21fc:	d8 01       	movw	r26, r16
    21fe:	54 96       	adiw	r26, 0x14	; 20
    2200:	ed 90       	ld	r14, X+
    2202:	fc 90       	ld	r15, X
    2204:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    2206:	c7 01       	movw	r24, r14
    2208:	60 e2       	ldi	r22, 0x20	; 32
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	a3 01       	movw	r20, r6
    220e:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2212:	f4 01       	movw	r30, r8
    2214:	80 81       	ld	r24, Z
    2216:	8e 32       	cpi	r24, 0x2E	; 46
    2218:	39 f0       	breq	.+14     	; 0x2228 <follow_path+0xda>
    221a:	d4 01       	movw	r26, r8
    221c:	b5 01       	movw	r22, r10
    221e:	62 01       	movw	r12, r4
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	be 82       	std	Y+6, r11	; 0x06
    2224:	ad 82       	std	Y+5, r10	; 0x05
    2226:	29 c0       	rjmp	.+82     	; 0x227a <follow_path+0x12c>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    2228:	ee e2       	ldi	r30, 0x2E	; 46
    222a:	d7 01       	movw	r26, r14
    222c:	ec 93       	st	X, r30
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    222e:	d4 01       	movw	r26, r8
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	2c 91       	ld	r18, X
    2234:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    2236:	2e 32       	cpi	r18, 0x2E	; 46
    2238:	59 f4       	brne	.+22     	; 0x2250 <follow_path+0x102>
			sfn[i++] = c;
    223a:	8e e2       	ldi	r24, 0x2E	; 46
    223c:	f7 01       	movw	r30, r14
    223e:	81 83       	std	Z+1, r24	; 0x01
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2240:	12 96       	adiw	r26, 0x02	; 2
    2242:	2c 91       	ld	r18, X
    2244:	12 97       	sbiw	r26, 0x02	; 2
			if (c != '.' || si >= 3) break;
    2246:	2e 32       	cpi	r18, 0x2E	; 46
    2248:	51 f0       	breq	.+20     	; 0x225e <follow_path+0x110>
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <follow_path+0x106>
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2254:	2f 32       	cpi	r18, 0x2F	; 47
    2256:	49 f0       	breq	.+18     	; 0x226a <follow_path+0x11c>
    2258:	2c 35       	cpi	r18, 0x5C	; 92
    225a:	39 f0       	breq	.+14     	; 0x226a <follow_path+0x11c>
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <follow_path+0x114>
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2262:	21 32       	cpi	r18, 0x21	; 33
    2264:	08 f0       	brcs	.+2      	; 0x2268 <follow_path+0x11a>
    2266:	ec c0       	rjmp	.+472    	; 0x2440 <follow_path+0x2f2>
    2268:	14 c1       	rjmp	.+552    	; 0x2492 <follow_path+0x344>
		*path = &p[si];									/* Return pointer to the next segment */
    226a:	88 0e       	add	r8, r24
    226c:	99 1e       	adc	r9, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    226e:	80 e2       	ldi	r24, 0x20	; 32
    2270:	d7 01       	movw	r26, r14
    2272:	1b 96       	adiw	r26, 0x0b	; 11
    2274:	8c 93       	st	X, r24
    2276:	1b 97       	sbiw	r26, 0x0b	; 11
    2278:	17 c1       	rjmp	.+558    	; 0x24a8 <follow_path+0x35a>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    227a:	2d 91       	ld	r18, X+
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2280:	21 32       	cpi	r18, 0x21	; 33
    2282:	08 f4       	brcc	.+2      	; 0x2286 <follow_path+0x138>
    2284:	48 c0       	rjmp	.+144    	; 0x2316 <follow_path+0x1c8>
    2286:	2f 32       	cpi	r18, 0x2F	; 47
    2288:	09 f4       	brne	.+2      	; 0x228c <follow_path+0x13e>
    228a:	07 c1       	rjmp	.+526    	; 0x249a <follow_path+0x34c>
    228c:	2c 35       	cpi	r18, 0x5C	; 92
    228e:	09 f4       	brne	.+2      	; 0x2292 <follow_path+0x144>
    2290:	04 c1       	rjmp	.+520    	; 0x249a <follow_path+0x34c>
		if (c == '.' || i >= ni) {
    2292:	2e 32       	cpi	r18, 0x2E	; 46
    2294:	29 f0       	breq	.+10     	; 0x22a0 <follow_path+0x152>
    2296:	ed 81       	ldd	r30, Y+5	; 0x05
    2298:	fe 81       	ldd	r31, Y+6	; 0x06
    229a:	ec 15       	cp	r30, r12
    229c:	fd 05       	cpc	r31, r13
    229e:	8c f0       	brlt	.+34     	; 0x22c2 <follow_path+0x174>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    22a0:	f8 e0       	ldi	r31, 0x08	; 8
    22a2:	cf 16       	cp	r12, r31
    22a4:	d1 04       	cpc	r13, r1
    22a6:	09 f0       	breq	.+2      	; 0x22aa <follow_path+0x15c>
    22a8:	cd c0       	rjmp	.+410    	; 0x2444 <follow_path+0x2f6>
    22aa:	2e 32       	cpi	r18, 0x2E	; 46
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <follow_path+0x162>
    22ae:	cc c0       	rjmp	.+408    	; 0x2448 <follow_path+0x2fa>
			i = 8; ni = 11;
			b <<= 2; continue;
    22b0:	33 0f       	add	r19, r19
    22b2:	33 0f       	add	r19, r19
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	cb 80       	ldd	r12, Y+3	; 0x03
    22be:	dc 80       	ldd	r13, Y+4	; 0x04
    22c0:	dc cf       	rjmp	.-72     	; 0x227a <follow_path+0x12c>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
    22c2:	22 23       	and	r18, r18
    22c4:	0c f4       	brge	.+2      	; 0x22c8 <follow_path+0x17a>
    22c6:	c2 c0       	rjmp	.+388    	; 0x244c <follow_path+0x2fe>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    22c8:	42 2f       	mov	r20, r18
    22ca:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    22cc:	42 32       	cpi	r20, 0x22	; 34
    22ce:	51 05       	cpc	r21, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <follow_path+0x186>
    22d2:	be c0       	rjmp	.+380    	; 0x2450 <follow_path+0x302>
    22d4:	f1 01       	movw	r30, r2
    22d6:	81 91       	ld	r24, Z+
    22d8:	88 23       	and	r24, r24
    22da:	31 f0       	breq	.+12     	; 0x22e8 <follow_path+0x19a>
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	48 17       	cp	r20, r24
    22e0:	59 07       	cpc	r21, r25
    22e2:	c9 f7       	brne	.-14     	; 0x22d6 <follow_path+0x188>
    22e4:	46 e0       	ldi	r20, 0x06	; 6
    22e6:	bb c0       	rjmp	.+374    	; 0x245e <follow_path+0x310>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    22e8:	82 2f       	mov	r24, r18
    22ea:	81 54       	subi	r24, 0x41	; 65
    22ec:	8a 31       	cpi	r24, 0x1A	; 26
    22ee:	10 f4       	brcc	.+4      	; 0x22f4 <follow_path+0x1a6>
				b |= 2;
    22f0:	32 60       	ori	r19, 0x02	; 2
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <follow_path+0x1b2>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    22f4:	82 2f       	mov	r24, r18
    22f6:	81 56       	subi	r24, 0x61	; 97
    22f8:	8a 31       	cpi	r24, 0x1A	; 26
    22fa:	10 f4       	brcc	.+4      	; 0x2300 <follow_path+0x1b2>
					b |= 1; c -= 0x20;
    22fc:	31 60       	ori	r19, 0x01	; 1
    22fe:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2300:	ed 81       	ldd	r30, Y+5	; 0x05
    2302:	fe 81       	ldd	r31, Y+6	; 0x06
    2304:	ee 0d       	add	r30, r14
    2306:	ff 1d       	adc	r31, r15
    2308:	20 83       	st	Z, r18
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	b2 cf       	rjmp	.-156    	; 0x227a <follow_path+0x12c>
    2316:	ed 81       	ldd	r30, Y+5	; 0x05
    2318:	fe 81       	ldd	r31, Y+6	; 0x06
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    231a:	86 0e       	add	r8, r22
    231c:	97 1e       	adc	r9, r23
    231e:	83 2f       	mov	r24, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    2320:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2322:	30 97       	sbiw	r30, 0x00	; 0
    2324:	09 f4       	brne	.+2      	; 0x2328 <follow_path+0x1da>
    2326:	96 c0       	rjmp	.+300    	; 0x2454 <follow_path+0x306>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2328:	d7 01       	movw	r26, r14
    232a:	9c 91       	ld	r25, X
    232c:	95 3e       	cpi	r25, 0xE5	; 229
    232e:	11 f4       	brne	.+4      	; 0x2334 <follow_path+0x1e6>
    2330:	e5 e0       	ldi	r30, 0x05	; 5
    2332:	ec 93       	st	X, r30

	if (ni == 8) b <<= 2;
    2334:	f8 e0       	ldi	r31, 0x08	; 8
    2336:	cf 16       	cp	r12, r31
    2338:	d1 04       	cpc	r13, r1
    233a:	19 f4       	brne	.+6      	; 0x2342 <follow_path+0x1f4>
    233c:	38 2f       	mov	r19, r24
    233e:	33 0f       	add	r19, r19
    2340:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    2342:	83 2f       	mov	r24, r19
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 01       	movw	r18, r24
    2348:	23 70       	andi	r18, 0x03	; 3
    234a:	30 70       	andi	r19, 0x00	; 0
    234c:	21 30       	cpi	r18, 0x01	; 1
    234e:	31 05       	cpc	r19, r1
    2350:	09 f4       	brne	.+2      	; 0x2354 <follow_path+0x206>
    2352:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    2354:	8c 70       	andi	r24, 0x0C	; 12
    2356:	90 70       	andi	r25, 0x00	; 0
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	91 05       	cpc	r25, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <follow_path+0x212>
    235e:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2360:	d7 01       	movw	r26, r14
    2362:	1b 96       	adiw	r26, 0x0b	; 11
    2364:	4c 93       	st	X, r20
    2366:	1b 97       	sbiw	r26, 0x0b	; 11
    2368:	9f c0       	rjmp	.+318    	; 0x24a8 <follow_path+0x35a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    236a:	f8 01       	movw	r30, r16
    236c:	46 85       	ldd	r20, Z+14	; 0x0e
    236e:	57 85       	ldd	r21, Z+15	; 0x0f
    2370:	60 89       	ldd	r22, Z+16	; 0x10
    2372:	71 89       	ldd	r23, Z+17	; 0x11
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
		if (res != FR_OK) break;
    237c:	88 23       	and	r24, r24
    237e:	41 f5       	brne	.+80     	; 0x23d0 <follow_path+0x282>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2380:	d8 01       	movw	r26, r16
    2382:	52 96       	adiw	r26, 0x12	; 18
    2384:	4d 91       	ld	r20, X+
    2386:	5c 91       	ld	r21, X
    2388:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    238a:	fa 01       	movw	r30, r20
    238c:	90 81       	ld	r25, Z
    238e:	99 23       	and	r25, r25
    2390:	09 f4       	brne	.+2      	; 0x2394 <follow_path+0x246>
    2392:	9a c0       	rjmp	.+308    	; 0x24c8 <follow_path+0x37a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2394:	93 85       	ldd	r25, Z+11	; 0x0b
    2396:	93 fd       	sbrc	r25, 3
    2398:	13 c0       	rjmp	.+38     	; 0x23c0 <follow_path+0x272>
    239a:	54 96       	adiw	r26, 0x14	; 20
    239c:	6d 91       	ld	r22, X+
    239e:	7c 91       	ld	r23, X
    23a0:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    23a2:	9a 01       	movw	r18, r20
    23a4:	25 5f       	subi	r18, 0xF5	; 245
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    23a8:	db 01       	movw	r26, r22
    23aa:	7a 01       	movw	r14, r20
    23ac:	48 2f       	mov	r20, r24
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <follow_path+0x26a>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    23b0:	e2 17       	cp	r30, r18
    23b2:	f3 07       	cpc	r31, r19
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <follow_path+0x26a>
    23b6:	81 c0       	rjmp	.+258    	; 0x24ba <follow_path+0x36c>
    23b8:	91 91       	ld	r25, Z+
    23ba:	8d 91       	ld	r24, X+
    23bc:	98 17       	cp	r25, r24
    23be:	c1 f3       	breq	.-16     	; 0x23b0 <follow_path+0x262>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    23c0:	c8 01       	movw	r24, r16
    23c2:	b5 01       	movw	r22, r10
    23c4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <dir_next>
	} while (res == FR_OK);
    23c8:	88 23       	and	r24, r24
    23ca:	79 f2       	breq	.-98     	; 0x236a <follow_path+0x21c>
    23cc:	48 2f       	mov	r20, r24
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <follow_path+0x284>
    23d0:	48 2f       	mov	r20, r24
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    23d2:	d8 01       	movw	r26, r16
    23d4:	54 96       	adiw	r26, 0x14	; 20
    23d6:	ed 91       	ld	r30, X+
    23d8:	fc 91       	ld	r31, X
    23da:	55 97       	sbiw	r26, 0x15	; 21
    23dc:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    23de:	44 30       	cpi	r20, 0x04	; 4
    23e0:	f1 f5       	brne	.+124    	; 0x245e <follow_path+0x310>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    23e2:	85 ff       	sbrs	r24, 5
    23e4:	0b c0       	rjmp	.+22     	; 0x23fc <follow_path+0x2ae>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    23e6:	f8 01       	movw	r30, r16
    23e8:	16 82       	std	Z+6, r1	; 0x06
    23ea:	17 82       	std	Z+7, r1	; 0x07
    23ec:	10 86       	std	Z+8, r1	; 0x08
    23ee:	11 86       	std	Z+9, r1	; 0x09
    23f0:	13 8a       	std	Z+19, r1	; 0x13
    23f2:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    23f4:	82 ff       	sbrs	r24, 2
    23f6:	02 cf       	rjmp	.-508    	; 0x21fc <follow_path+0xae>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	31 c0       	rjmp	.+98     	; 0x245e <follow_path+0x310>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    23fc:	82 ff       	sbrs	r24, 2
    23fe:	2c c0       	rjmp	.+88     	; 0x2458 <follow_path+0x30a>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    2400:	44 e0       	ldi	r20, 0x04	; 4
    2402:	2d c0       	rjmp	.+90     	; 0x245e <follow_path+0x310>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    2404:	d7 01       	movw	r26, r14
    2406:	1b 96       	adiw	r26, 0x0b	; 11
    2408:	8c 91       	ld	r24, X
    240a:	1b 97       	sbiw	r26, 0x0b	; 11
    240c:	84 ff       	sbrs	r24, 4
    240e:	26 c0       	rjmp	.+76     	; 0x245c <follow_path+0x30e>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2410:	54 96       	adiw	r26, 0x14	; 20
    2412:	8d 91       	ld	r24, X+
    2414:	9c 91       	ld	r25, X
    2416:	55 97       	sbiw	r26, 0x15	; 21
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	bc 01       	movw	r22, r24
    241e:	55 27       	eor	r21, r21
    2420:	44 27       	eor	r20, r20
    2422:	f7 01       	movw	r30, r14
    2424:	82 8d       	ldd	r24, Z+26	; 0x1a
    2426:	93 8d       	ldd	r25, Z+27	; 0x1b
    2428:	a0 e0       	ldi	r26, 0x00	; 0
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	84 2b       	or	r24, r20
    242e:	95 2b       	or	r25, r21
    2430:	a6 2b       	or	r26, r22
    2432:	b7 2b       	or	r27, r23
    2434:	f8 01       	movw	r30, r16
    2436:	86 83       	std	Z+6, r24	; 0x06
    2438:	97 83       	std	Z+7, r25	; 0x07
    243a:	a0 87       	std	Z+8, r26	; 0x08
    243c:	b1 87       	std	Z+9, r27	; 0x09
    243e:	de ce       	rjmp	.-580    	; 0x21fc <follow_path+0xae>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2440:	46 e0       	ldi	r20, 0x06	; 6
    2442:	0d c0       	rjmp	.+26     	; 0x245e <follow_path+0x310>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2444:	46 e0       	ldi	r20, 0x06	; 6
    2446:	0b c0       	rjmp	.+22     	; 0x245e <follow_path+0x310>
    2448:	46 e0       	ldi	r20, 0x06	; 6
    244a:	09 c0       	rjmp	.+18     	; 0x245e <follow_path+0x310>
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
    244c:	46 e0       	ldi	r20, 0x06	; 6
    244e:	07 c0       	rjmp	.+14     	; 0x245e <follow_path+0x310>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2450:	46 e0       	ldi	r20, 0x06	; 6
    2452:	05 c0       	rjmp	.+10     	; 0x245e <follow_path+0x310>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2454:	46 e0       	ldi	r20, 0x06	; 6
    2456:	03 c0       	rjmp	.+6      	; 0x245e <follow_path+0x310>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2458:	45 e0       	ldi	r20, 0x05	; 5
    245a:	01 c0       	rjmp	.+2      	; 0x245e <follow_path+0x310>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    245c:	45 e0       	ldi	r20, 0x05	; 5
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
    245e:	84 2f       	mov	r24, r20
    2460:	26 96       	adiw	r28, 0x06	; 6
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	ff 90       	pop	r15
    2476:	ef 90       	pop	r14
    2478:	df 90       	pop	r13
    247a:	cf 90       	pop	r12
    247c:	bf 90       	pop	r11
    247e:	af 90       	pop	r10
    2480:	9f 90       	pop	r9
    2482:	8f 90       	pop	r8
    2484:	7f 90       	pop	r7
    2486:	6f 90       	pop	r6
    2488:	5f 90       	pop	r5
    248a:	4f 90       	pop	r4
    248c:	3f 90       	pop	r3
    248e:	2f 90       	pop	r2
    2490:	08 95       	ret
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    2492:	88 0e       	add	r8, r24
    2494:	99 1e       	adc	r9, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    2496:	84 e2       	ldi	r24, 0x24	; 36
    2498:	eb ce       	rjmp	.-554    	; 0x2270 <follow_path+0x122>
    249a:	ed 81       	ldd	r30, Y+5	; 0x05
    249c:	fe 81       	ldd	r31, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    249e:	86 0e       	add	r8, r22
    24a0:	97 1e       	adc	r9, r23
    24a2:	83 2f       	mov	r24, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	3d cf       	rjmp	.-390    	; 0x2322 <follow_path+0x1d4>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    24a8:	c8 01       	movw	r24, r16
    24aa:	b5 01       	movw	r22, r10
    24ac:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dir_sdi>
    24b0:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    24b2:	88 23       	and	r24, r24
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <follow_path+0x36a>
    24b6:	59 cf       	rjmp	.-334    	; 0x236a <follow_path+0x21c>
    24b8:	8c cf       	rjmp	.-232    	; 0x23d2 <follow_path+0x284>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    24ba:	db 01       	movw	r26, r22
    24bc:	1b 96       	adiw	r26, 0x0b	; 11
    24be:	8c 91       	ld	r24, X
    24c0:	1b 97       	sbiw	r26, 0x0b	; 11
    24c2:	82 ff       	sbrs	r24, 2
    24c4:	9f cf       	rjmp	.-194    	; 0x2404 <follow_path+0x2b6>
    24c6:	cb cf       	rjmp	.-106    	; 0x245e <follow_path+0x310>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    24c8:	d8 01       	movw	r26, r16
    24ca:	54 96       	adiw	r26, 0x14	; 20
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	55 97       	sbiw	r26, 0x15	; 21
    24d2:	83 85       	ldd	r24, Z+11	; 0x0b
    24d4:	86 cf       	rjmp	.-244    	; 0x23e2 <follow_path+0x294>

000024d6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dir_sdi>
    24ea:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    24ec:	88 23       	and	r24, r24
    24ee:	d9 f5       	brne	.+118    	; 0x2566 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    24f0:	d8 01       	movw	r26, r16
    24f2:	1e 96       	adiw	r26, 0x0e	; 14
    24f4:	4d 91       	ld	r20, X+
    24f6:	5d 91       	ld	r21, X+
    24f8:	6d 91       	ld	r22, X+
    24fa:	7c 91       	ld	r23, X
    24fc:	51 97       	sbiw	r26, 0x11	; 17
    24fe:	8d 91       	ld	r24, X+
    2500:	9c 91       	ld	r25, X
    2502:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2506:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    2508:	88 23       	and	r24, r24
    250a:	69 f5       	brne	.+90     	; 0x2566 <dir_register+0x90>
			c = *dj->dir;
    250c:	d8 01       	movw	r26, r16
    250e:	52 96       	adiw	r26, 0x12	; 18
    2510:	ed 91       	ld	r30, X+
    2512:	fc 91       	ld	r31, X
    2514:	53 97       	sbiw	r26, 0x13	; 19
    2516:	80 81       	ld	r24, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2518:	85 3e       	cpi	r24, 0xE5	; 229
    251a:	61 f1       	breq	.+88     	; 0x2574 <dir_register+0x9e>
    251c:	88 23       	and	r24, r24
    251e:	51 f1       	breq	.+84     	; 0x2574 <dir_register+0x9e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2520:	c8 01       	movw	r24, r16
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <dir_next>
    252a:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    252c:	88 23       	and	r24, r24
    252e:	01 f3       	breq	.-64     	; 0x24f0 <dir_register+0x1a>
    2530:	1a c0       	rjmp	.+52     	; 0x2566 <dir_register+0x90>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2532:	f8 01       	movw	r30, r16
    2534:	e2 88       	ldd	r14, Z+18	; 0x12
    2536:	f3 88       	ldd	r15, Z+19	; 0x13
			mem_set(dir, 0, 32);		/* Clean the entry */
    2538:	c7 01       	movw	r24, r14
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2546:	d8 01       	movw	r26, r16
    2548:	54 96       	adiw	r26, 0x14	; 20
    254a:	6d 91       	ld	r22, X+
    254c:	7c 91       	ld	r23, X
    254e:	55 97       	sbiw	r26, 0x15	; 21
    2550:	c7 01       	movw	r24, r14
    2552:	4b e0       	ldi	r20, 0x0B	; 11
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    255a:	d8 01       	movw	r26, r16
    255c:	ed 91       	ld	r30, X+
    255e:	fc 91       	ld	r31, X
    2560:	11 97       	sbiw	r26, 0x01	; 1
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2566:	8c 2f       	mov	r24, r28
    2568:	cf 91       	pop	r28
    256a:	1f 91       	pop	r17
    256c:	0f 91       	pop	r16
    256e:	ff 90       	pop	r15
    2570:	ef 90       	pop	r14
    2572:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2574:	f8 01       	movw	r30, r16
    2576:	46 85       	ldd	r20, Z+14	; 0x0e
    2578:	57 85       	ldd	r21, Z+15	; 0x0f
    257a:	60 89       	ldd	r22, Z+16	; 0x10
    257c:	71 89       	ldd	r23, Z+17	; 0x11
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2586:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    2588:	88 23       	and	r24, r24
    258a:	69 f7       	brne	.-38     	; 0x2566 <dir_register+0x90>
    258c:	d2 cf       	rjmp	.-92     	; 0x2532 <dir_register+0x5c>

0000258e <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    2594:	84 e0       	ldi	r24, 0x04	; 4
	while (dj->sect) {
    2596:	17 c0       	rjmp	.+46     	; 0x25c6 <dir_read+0x38>
		res = move_window(dj->fs, dj->sect);
    2598:	88 81       	ld	r24, Y
    259a:	99 81       	ldd	r25, Y+1	; 0x01
    259c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
		if (res != FR_OK) break;
    25a0:	88 23       	and	r24, r24
    25a2:	e1 f4       	brne	.+56     	; 0x25dc <dir_read+0x4e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    25a4:	ea 89       	ldd	r30, Y+18	; 0x12
    25a6:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    25a8:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    25aa:	99 23       	and	r25, r25
    25ac:	f1 f0       	breq	.+60     	; 0x25ea <dir_read+0x5c>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    25ae:	95 3e       	cpi	r25, 0xE5	; 229
    25b0:	19 f0       	breq	.+6      	; 0x25b8 <dir_read+0x2a>
    25b2:	93 85       	ldd	r25, Z+11	; 0x0b
    25b4:	93 ff       	sbrs	r25, 3
    25b6:	16 c0       	rjmp	.+44     	; 0x25e4 <dir_read+0x56>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    25b8:	ce 01       	movw	r24, r28
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <dir_next>
		if (res != FR_OK) break;
    25c2:	88 23       	and	r24, r24
    25c4:	59 f4       	brne	.+22     	; 0x25dc <dir_read+0x4e>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    25c6:	4e 85       	ldd	r20, Y+14	; 0x0e
    25c8:	5f 85       	ldd	r21, Y+15	; 0x0f
    25ca:	68 89       	ldd	r22, Y+16	; 0x10
    25cc:	79 89       	ldd	r23, Y+17	; 0x11
    25ce:	41 15       	cp	r20, r1
    25d0:	51 05       	cpc	r21, r1
    25d2:	61 05       	cpc	r22, r1
    25d4:	71 05       	cpc	r23, r1
    25d6:	01 f7       	brne	.-64     	; 0x2598 <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    25d8:	88 23       	and	r24, r24
    25da:	21 f0       	breq	.+8      	; 0x25e4 <dir_read+0x56>
    25dc:	1e 86       	std	Y+14, r1	; 0x0e
    25de:	1f 86       	std	Y+15, r1	; 0x0f
    25e0:	18 8a       	std	Y+16, r1	; 0x10
    25e2:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    25ea:	84 e0       	ldi	r24, 0x04	; 4
    25ec:	f7 cf       	rjmp	.-18     	; 0x25dc <dir_read+0x4e>

000025ee <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    25ee:	82 30       	cpi	r24, 0x02	; 2
    25f0:	d0 f4       	brcc	.+52     	; 0x2626 <f_mount+0x38>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	fc 01       	movw	r30, r24
    25f6:	ee 0f       	add	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	ec 57       	subi	r30, 0x7C	; 124
    25fc:	fa 4f       	sbci	r31, 0xFA	; 250
    25fe:	01 90       	ld	r0, Z+
    2600:	f0 81       	ld	r31, Z
    2602:	e0 2d       	mov	r30, r0

	if (rfs) {
    2604:	30 97       	sbiw	r30, 0x00	; 0
    2606:	09 f0       	breq	.+2      	; 0x260a <f_mount+0x1c>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2608:	10 82       	st	Z, r1
	}

	if (fs) {
    260a:	61 15       	cp	r22, r1
    260c:	71 05       	cpc	r23, r1
    260e:	11 f0       	breq	.+4      	; 0x2614 <f_mount+0x26>
		fs->fs_type = 0;			/* Clear new fs object */
    2610:	fb 01       	movw	r30, r22
    2612:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2614:	fc 01       	movw	r30, r24
    2616:	ee 0f       	add	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	ec 57       	subi	r30, 0x7C	; 124
    261c:	fa 4f       	sbci	r31, 0xFA	; 250
    261e:	71 83       	std	Z+1, r23	; 0x01
    2620:	60 83       	st	Z, r22

	return FR_OK;
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    2626:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    2628:	08 95       	ret

0000262a <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    262a:	4f 92       	push	r4
    262c:	5f 92       	push	r5
    262e:	6f 92       	push	r6
    2630:	7f 92       	push	r7
    2632:	8f 92       	push	r8
    2634:	9f 92       	push	r9
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	a4 97       	sbiw	r28, 0x24	; 36
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	7c 01       	movw	r14, r24
    265c:	7c a3       	lds	r23, 0x5c
    265e:	6b a3       	lds	r22, 0x5b
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    2660:	dc 01       	movw	r26, r24
    2662:	1d 92       	st	X+, r1
    2664:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2666:	14 2f       	mov	r17, r20
    2668:	1f 71       	andi	r17, 0x1F	; 31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    266a:	4e 71       	andi	r20, 0x1E	; 30
    266c:	ce 01       	movw	r24, r28
    266e:	83 96       	adiw	r24, 0x23	; 35
    2670:	be 01       	movw	r22, r28
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    267a:	9e 01       	movw	r18, r28
    267c:	29 5e       	subi	r18, 0xE9	; 233
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	3e 8b       	std	Y+22, r19	; 0x16
    2682:	2d 8b       	std	Y+21, r18	; 0x15
	if (res == FR_OK)
    2684:	88 23       	and	r24, r24
    2686:	09 f0       	breq	.+2      	; 0x268a <f_open+0x60>
    2688:	f6 c0       	rjmp	.+492    	; 0x2876 <f_open+0x24c>
		res = follow_path(&dj, path);	/* Follow the file path */
    268a:	6b a1       	lds	r22, 0x4b
    268c:	7c a1       	lds	r23, 0x4c
    268e:	ce 01       	movw	r24, r28
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
	dir = dj.dir;
    2696:	cb 88       	ldd	r12, Y+19	; 0x13
    2698:	dc 88       	ldd	r13, Y+20	; 0x14

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    269a:	88 23       	and	r24, r24
    269c:	21 f4       	brne	.+8      	; 0x26a6 <f_open+0x7c>
		if (!dir)	/* Current dir itself */
    269e:	c1 14       	cp	r12, r1
    26a0:	d1 04       	cpc	r13, r1
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <f_open+0x7c>
			res = FR_INVALID_NAME;
    26a4:	86 e0       	ldi	r24, 0x06	; 6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    26a6:	21 2f       	mov	r18, r17
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	a9 01       	movw	r20, r18
    26ac:	4c 71       	andi	r20, 0x1C	; 28
    26ae:	50 70       	andi	r21, 0x00	; 0
    26b0:	41 15       	cp	r20, r1
    26b2:	51 05       	cpc	r21, r1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <f_open+0x8e>
    26b6:	65 c0       	rjmp	.+202    	; 0x2782 <f_open+0x158>
		DWORD dw, cl;

		if (res != FR_OK) {				/* No file, create new */
    26b8:	88 23       	and	r24, r24
    26ba:	71 f0       	breq	.+28     	; 0x26d8 <f_open+0xae>
			if (res == FR_NO_FILE)		/* There is no file to open, create a new entry */
    26bc:	84 30       	cpi	r24, 0x04	; 4
    26be:	09 f0       	breq	.+2      	; 0x26c2 <f_open+0x98>
    26c0:	c3 c0       	rjmp	.+390    	; 0x2848 <f_open+0x21e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    26c2:	ce 01       	movw	r24, r28
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <dir_register>
#endif
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;				/* New entry */
    26ca:	cb 88       	ldd	r12, Y+19	; 0x13
    26cc:	dc 88       	ldd	r13, Y+20	; 0x14
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    26ce:	88 23       	and	r24, r24
    26d0:	09 f0       	breq	.+2      	; 0x26d4 <f_open+0xaa>
    26d2:	ba c0       	rjmp	.+372    	; 0x2848 <f_open+0x21e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;
    26d4:	18 60       	ori	r17, 0x08	; 8
    26d6:	07 c0       	rjmp	.+14     	; 0x26e6 <f_open+0xbc>
			dir = dj.dir;				/* New entry */
		}
		else {							/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {			/* Cannot create new */
    26d8:	12 fd       	sbrc	r17, 2
    26da:	d0 c0       	rjmp	.+416    	; 0x287c <f_open+0x252>
				res = FR_EXIST;
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
    26dc:	f6 01       	movw	r30, r12
    26de:	83 85       	ldd	r24, Z+11	; 0x0b
    26e0:	81 71       	andi	r24, 0x11	; 17
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <f_open+0xbc>
    26e4:	cd c0       	rjmp	.+410    	; 0x2880 <f_open+0x256>
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    26e6:	13 ff       	sbrs	r17, 3
    26e8:	d1 c0       	rjmp	.+418    	; 0x288c <f_open+0x262>
			dw = get_fattime();						/* Created time */
    26ea:	0e 94 00 06 	call	0xc00	; 0xc00 <get_fattime>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
			ST_DWORD(dir+DIR_CrtTime, dw);
    26f2:	f6 01       	movw	r30, r12
    26f4:	86 87       	std	Z+14, r24	; 0x0e
    26f6:	97 87       	std	Z+15, r25	; 0x0f
    26f8:	a0 8b       	std	Z+16, r26	; 0x10
    26fa:	b1 8b       	std	Z+17, r27	; 0x11
			dir[DIR_Attr] = 0;					/* Reset attribute */
    26fc:	13 86       	std	Z+11, r1	; 0x0b
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    26fe:	14 8e       	std	Z+28, r1	; 0x1c
    2700:	15 8e       	std	Z+29, r1	; 0x1d
    2702:	16 8e       	std	Z+30, r1	; 0x1e
    2704:	17 8e       	std	Z+31, r1	; 0x1f
			cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2706:	84 89       	ldd	r24, Z+20	; 0x14
    2708:	95 89       	ldd	r25, Z+21	; 0x15
    270a:	a0 e0       	ldi	r26, 0x00	; 0
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	bc 01       	movw	r22, r24
    2710:	55 27       	eor	r21, r21
    2712:	44 27       	eor	r20, r20
    2714:	82 8d       	ldd	r24, Z+26	; 0x1a
    2716:	93 8d       	ldd	r25, Z+27	; 0x1b
    2718:	a0 e0       	ldi	r26, 0x00	; 0
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	4a 01       	movw	r8, r20
    271e:	5b 01       	movw	r10, r22
    2720:	88 2a       	or	r8, r24
    2722:	99 2a       	or	r9, r25
    2724:	aa 2a       	or	r10, r26
    2726:	bb 2a       	or	r11, r27
			ST_WORD(dir+DIR_FstClusHI, 0);		/* cluster = 0 */
    2728:	15 8a       	std	Z+21, r1	; 0x15
    272a:	14 8a       	std	Z+20, r1	; 0x14
			ST_WORD(dir+DIR_FstClusLO, 0);
    272c:	13 8e       	std	Z+27, r1	; 0x1b
    272e:	12 8e       	std	Z+26, r1	; 0x1a
			dj.fs->wflag = 1;
    2730:	e9 81       	ldd	r30, Y+1	; 0x01
    2732:	fa 81       	ldd	r31, Y+2	; 0x02
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    2738:	81 14       	cp	r8, r1
    273a:	91 04       	cpc	r9, r1
    273c:	a1 04       	cpc	r10, r1
    273e:	b1 04       	cpc	r11, r1
    2740:	09 f4       	brne	.+2      	; 0x2744 <f_open+0x11a>
    2742:	a4 c0       	rjmp	.+328    	; 0x288c <f_open+0x262>
				dw = dj.fs->winsect;
    2744:	46 a4       	lds	r20, 0xa6
    2746:	57 a4       	lds	r21, 0xa7
    2748:	60 a8       	sts	0x00, r22
    274a:	71 a8       	sts	0x81, r23
				res = remove_chain(dj.fs, cl);
    274c:	cf 01       	movw	r24, r30
    274e:	b5 01       	movw	r22, r10
    2750:	a4 01       	movw	r20, r8
    2752:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <remove_chain>
				if (res == FR_OK) {
    2756:	88 23       	and	r24, r24
    2758:	09 f0       	breq	.+2      	; 0x275c <f_open+0x132>
    275a:	76 c0       	rjmp	.+236    	; 0x2848 <f_open+0x21e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	d5 01       	movw	r26, r10
    2762:	c4 01       	movw	r24, r8
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	a1 09       	sbc	r26, r1
    2768:	b1 09       	sbc	r27, r1
    276a:	82 87       	std	Z+10, r24	; 0x0a
    276c:	93 87       	std	Z+11, r25	; 0x0b
    276e:	a4 87       	std	Z+12, r26	; 0x0c
    2770:	b5 87       	std	Z+13, r27	; 0x0d
					res = move_window(dj.fs, dw);
    2772:	cf 01       	movw	r24, r30
    2774:	b3 01       	movw	r22, r6
    2776:	a2 01       	movw	r20, r4
    2778:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    277c:	88 23       	and	r24, r24
    277e:	79 f0       	breq	.+30     	; 0x279e <f_open+0x174>
    2780:	63 c0       	rjmp	.+198    	; 0x2848 <f_open+0x21e>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    2782:	88 23       	and	r24, r24
    2784:	09 f0       	breq	.+2      	; 0x2788 <f_open+0x15e>
    2786:	60 c0       	rjmp	.+192    	; 0x2848 <f_open+0x21e>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2788:	d6 01       	movw	r26, r12
    278a:	1b 96       	adiw	r26, 0x0b	; 11
    278c:	8c 91       	ld	r24, X
    278e:	1b 97       	sbiw	r26, 0x0b	; 11
    2790:	84 fd       	sbrc	r24, 4
    2792:	78 c0       	rjmp	.+240    	; 0x2884 <f_open+0x25a>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2794:	11 ff       	sbrs	r17, 1
    2796:	7a c0       	rjmp	.+244    	; 0x288c <f_open+0x262>
    2798:	80 fd       	sbrc	r24, 0
    279a:	76 c0       	rjmp	.+236    	; 0x2888 <f_open+0x25e>
    279c:	77 c0       	rjmp	.+238    	; 0x288c <f_open+0x262>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
    279e:	91 2f       	mov	r25, r17
    27a0:	9e 71       	andi	r25, 0x1E	; 30
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <f_open+0x17c>
			mode |= FA__WRITTEN;				/* Set file changed flag */
    27a4:	10 62       	ori	r17, 0x20	; 32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    27a6:	e9 81       	ldd	r30, Y+1	; 0x01
    27a8:	fa 81       	ldd	r31, Y+2	; 0x02
    27aa:	46 a5       	lds	r20, 0x66
    27ac:	57 a5       	lds	r21, 0x67
    27ae:	60 a9       	sts	0x40, r22
    27b0:	71 a9       	sts	0x41, r23
    27b2:	d7 01       	movw	r26, r14
    27b4:	5a 96       	adiw	r26, 0x1a	; 26
    27b6:	4d 93       	st	X+, r20
    27b8:	5d 93       	st	X+, r21
    27ba:	6d 93       	st	X+, r22
    27bc:	7c 93       	st	X, r23
    27be:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    27c0:	5f 96       	adiw	r26, 0x1f	; 31
    27c2:	dc 92       	st	X, r13
    27c4:	ce 92       	st	-X, r12
    27c6:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    27c8:	14 96       	adiw	r26, 0x04	; 4
    27ca:	1c 93       	st	X, r17
		fp->org_clust =						/* File start cluster */
			((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    27cc:	d6 01       	movw	r26, r12
    27ce:	54 96       	adiw	r26, 0x14	; 20
    27d0:	0d 91       	ld	r16, X+
    27d2:	1c 91       	ld	r17, X
    27d4:	55 97       	sbiw	r26, 0x15	; 21
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	98 01       	movw	r18, r16
    27dc:	11 27       	eor	r17, r17
    27de:	00 27       	eor	r16, r16
    27e0:	5a 96       	adiw	r26, 0x1a	; 26
    27e2:	4d 91       	ld	r20, X+
    27e4:	5c 91       	ld	r21, X
    27e6:	5b 97       	sbiw	r26, 0x1b	; 27
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	40 2b       	or	r20, r16
    27ee:	51 2b       	or	r21, r17
    27f0:	62 2b       	or	r22, r18
    27f2:	73 2b       	or	r23, r19
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->org_clust =						/* File start cluster */
    27f4:	d7 01       	movw	r26, r14
    27f6:	1e 96       	adiw	r26, 0x0e	; 14
    27f8:	4d 93       	st	X+, r20
    27fa:	5d 93       	st	X+, r21
    27fc:	6d 93       	st	X+, r22
    27fe:	7c 93       	st	X, r23
    2800:	51 97       	sbiw	r26, 0x11	; 17
			((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2802:	d6 01       	movw	r26, r12
    2804:	5c 96       	adiw	r26, 0x1c	; 28
    2806:	4d 91       	ld	r20, X+
    2808:	5d 91       	ld	r21, X+
    280a:	6d 91       	ld	r22, X+
    280c:	7c 91       	ld	r23, X
    280e:	5f 97       	sbiw	r26, 0x1f	; 31
    2810:	d7 01       	movw	r26, r14
    2812:	1a 96       	adiw	r26, 0x0a	; 10
    2814:	4d 93       	st	X+, r20
    2816:	5d 93       	st	X+, r21
    2818:	6d 93       	st	X+, r22
    281a:	7c 93       	st	X, r23
    281c:	1d 97       	sbiw	r26, 0x0d	; 13
		fp->fptr = 0;						/* File pointer */
    281e:	16 96       	adiw	r26, 0x06	; 6
    2820:	1d 92       	st	X+, r1
    2822:	1d 92       	st	X+, r1
    2824:	1d 92       	st	X+, r1
    2826:	1c 92       	st	X, r1
    2828:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    282a:	56 96       	adiw	r26, 0x16	; 22
    282c:	1d 92       	st	X+, r1
    282e:	1d 92       	st	X+, r1
    2830:	1d 92       	st	X+, r1
    2832:	1c 92       	st	X, r1
    2834:	59 97       	sbiw	r26, 0x19	; 25
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2836:	11 96       	adiw	r26, 0x01	; 1
    2838:	fc 93       	st	X, r31
    283a:	ee 93       	st	-X, r30
    283c:	26 81       	ldd	r18, Z+6	; 0x06
    283e:	37 81       	ldd	r19, Z+7	; 0x07
    2840:	13 96       	adiw	r26, 0x03	; 3
    2842:	3c 93       	st	X, r19
    2844:	2e 93       	st	-X, r18
    2846:	12 97       	sbiw	r26, 0x02	; 2
	}

	LEAVE_FF(dj.fs, res);
}
    2848:	a4 96       	adiw	r28, 0x24	; 36
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	bf 90       	pop	r11
    2866:	af 90       	pop	r10
    2868:	9f 90       	pop	r9
    286a:	8f 90       	pop	r8
    286c:	7f 90       	pop	r7
    286e:	6f 90       	pop	r6
    2870:	5f 90       	pop	r5
    2872:	4f 90       	pop	r4
    2874:	08 95       	ret
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    2876:	cb 88       	ldd	r12, Y+19	; 0x13
    2878:	dc 88       	ldd	r13, Y+20	; 0x14
    287a:	15 cf       	rjmp	.-470    	; 0x26a6 <f_open+0x7c>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;				/* New entry */
		}
		else {							/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {			/* Cannot create new */
				res = FR_EXIST;
    287c:	88 e0       	ldi	r24, 0x08	; 8
    287e:	e4 cf       	rjmp	.-56     	; 0x2848 <f_open+0x21e>
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    2880:	87 e0       	ldi	r24, 0x07	; 7
    2882:	e2 cf       	rjmp	.-60     	; 0x2848 <f_open+0x21e>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
    2884:	84 e0       	ldi	r24, 0x04	; 4
    2886:	e0 cf       	rjmp	.-64     	; 0x2848 <f_open+0x21e>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
    2888:	87 e0       	ldi	r24, 0x07	; 7
    288a:	de cf       	rjmp	.-68     	; 0x2848 <f_open+0x21e>
	dir = dj.dir;

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	87 cf       	rjmp	.-242    	; 0x279e <f_open+0x174>

00002890 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2890:	2f 92       	push	r2
    2892:	3f 92       	push	r3
    2894:	4f 92       	push	r4
    2896:	5f 92       	push	r5
    2898:	6f 92       	push	r6
    289a:	7f 92       	push	r7
    289c:	8f 92       	push	r8
    289e:	9f 92       	push	r9
    28a0:	bf 92       	push	r11
    28a2:	cf 92       	push	r12
    28a4:	df 92       	push	r13
    28a6:	ef 92       	push	r14
    28a8:	ff 92       	push	r15
    28aa:	0f 93       	push	r16
    28ac:	1f 93       	push	r17
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <f_read+0x24>
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <f_read+0x26>
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	c6 2e       	mov	r12, r22
    28c0:	17 2f       	mov	r17, r23
    28c2:	4a 01       	movw	r8, r20
    28c4:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    28c6:	d9 01       	movw	r26, r18
    28c8:	1d 92       	st	X+, r1
    28ca:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    28cc:	fc 01       	movw	r30, r24
    28ce:	62 81       	ldd	r22, Z+2	; 0x02
    28d0:	73 81       	ldd	r23, Z+3	; 0x03
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	0e 94 a2 06 	call	0xd44	; 0xd44 <validate>
    28da:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    28dc:	88 23       	and	r24, r24
    28de:	09 f0       	breq	.+2      	; 0x28e2 <f_read+0x52>
    28e0:	7b c1       	rjmp	.+758    	; 0x2bd8 <f_read+0x348>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    28e2:	ab 81       	ldd	r26, Y+3	; 0x03
    28e4:	bc 81       	ldd	r27, Y+4	; 0x04
    28e6:	14 96       	adiw	r26, 0x04	; 4
    28e8:	8c 91       	ld	r24, X
    28ea:	14 97       	sbiw	r26, 0x04	; 4
    28ec:	88 23       	and	r24, r24
    28ee:	0c f4       	brge	.+2      	; 0x28f2 <f_read+0x62>
    28f0:	6b c1       	rjmp	.+726    	; 0x2bc8 <f_read+0x338>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    28f2:	80 ff       	sbrs	r24, 0
    28f4:	6d c1       	rjmp	.+730    	; 0x2bd0 <f_read+0x340>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    28f6:	1a 96       	adiw	r26, 0x0a	; 10
    28f8:	8d 91       	ld	r24, X+
    28fa:	9d 91       	ld	r25, X+
    28fc:	0d 90       	ld	r0, X+
    28fe:	bc 91       	ld	r27, X
    2900:	a0 2d       	mov	r26, r0
    2902:	eb 81       	ldd	r30, Y+3	; 0x03
    2904:	fc 81       	ldd	r31, Y+4	; 0x04
    2906:	46 81       	ldd	r20, Z+6	; 0x06
    2908:	57 81       	ldd	r21, Z+7	; 0x07
    290a:	60 85       	ldd	r22, Z+8	; 0x08
    290c:	71 85       	ldd	r23, Z+9	; 0x09
    290e:	84 1b       	sub	r24, r20
    2910:	95 0b       	sbc	r25, r21
    2912:	a6 0b       	sbc	r26, r22
    2914:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    2916:	a4 01       	movw	r20, r8
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	84 17       	cp	r24, r20
    291e:	95 07       	cpc	r25, r21
    2920:	a6 07       	cpc	r26, r22
    2922:	b7 07       	cpc	r27, r23
    2924:	08 f4       	brcc	.+2      	; 0x2928 <f_read+0x98>
    2926:	4c 01       	movw	r8, r24

	for ( ;  btr;									/* Repeat until all data transferred */
    2928:	81 14       	cp	r8, r1
    292a:	91 04       	cpc	r9, r1
    292c:	09 f4       	brne	.+2      	; 0x2930 <f_read+0xa0>
    292e:	54 c1       	rjmp	.+680    	; 0x2bd8 <f_read+0x348>
    2930:	c9 82       	std	Y+1, r12	; 0x01
    2932:	1a 83       	std	Y+2, r17	; 0x02
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    2934:	ab 81       	ldd	r26, Y+3	; 0x03
    2936:	bc 81       	ldd	r27, Y+4	; 0x04
    2938:	16 96       	adiw	r26, 0x06	; 6
    293a:	4d 91       	ld	r20, X+
    293c:	5d 91       	ld	r21, X+
    293e:	6d 91       	ld	r22, X+
    2940:	7c 91       	ld	r23, X
    2942:	19 97       	sbiw	r26, 0x09	; 9
    2944:	db 01       	movw	r26, r22
    2946:	ca 01       	movw	r24, r20
    2948:	91 70       	andi	r25, 0x01	; 1
    294a:	a0 70       	andi	r26, 0x00	; 0
    294c:	b0 70       	andi	r27, 0x00	; 0
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	a1 05       	cpc	r26, r1
    2952:	b1 05       	cpc	r27, r1
    2954:	09 f0       	breq	.+2      	; 0x2958 <f_read+0xc8>
    2956:	da c0       	rjmp	.+436    	; 0x2b0c <f_read+0x27c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2958:	ab 81       	ldd	r26, Y+3	; 0x03
    295a:	bc 81       	ldd	r27, Y+4	; 0x04
    295c:	ed 91       	ld	r30, X+
    295e:	fc 91       	ld	r31, X
    2960:	db 01       	movw	r26, r22
    2962:	ca 01       	movw	r24, r20
    2964:	07 2e       	mov	r0, r23
    2966:	79 e0       	ldi	r23, 0x09	; 9
    2968:	b6 95       	lsr	r27
    296a:	a7 95       	ror	r26
    296c:	97 95       	ror	r25
    296e:	87 95       	ror	r24
    2970:	7a 95       	dec	r23
    2972:	d1 f7       	brne	.-12     	; 0x2968 <f_read+0xd8>
    2974:	70 2d       	mov	r23, r0
    2976:	12 81       	ldd	r17, Z+2	; 0x02
    2978:	11 50       	subi	r17, 0x01	; 1
    297a:	18 23       	and	r17, r24
			if (!csect) {							/* On the cluster boundary? */
    297c:	09 f0       	breq	.+2      	; 0x2980 <f_read+0xf0>
    297e:	41 c0       	rjmp	.+130    	; 0x2a02 <f_read+0x172>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
    2980:	41 15       	cp	r20, r1
    2982:	51 05       	cpc	r21, r1
    2984:	61 05       	cpc	r22, r1
    2986:	71 05       	cpc	r23, r1
    2988:	39 f4       	brne	.+14     	; 0x2998 <f_read+0x108>
    298a:	eb 81       	ldd	r30, Y+3	; 0x03
    298c:	fc 81       	ldd	r31, Y+4	; 0x04
    298e:	86 85       	ldd	r24, Z+14	; 0x0e
    2990:	97 85       	ldd	r25, Z+15	; 0x0f
    2992:	a0 89       	ldd	r26, Z+16	; 0x10
    2994:	b1 89       	ldd	r27, Z+17	; 0x11
    2996:	0d c0       	rjmp	.+26     	; 0x29b2 <f_read+0x122>
    2998:	ab 81       	ldd	r26, Y+3	; 0x03
    299a:	bc 81       	ldd	r27, Y+4	; 0x04
    299c:	52 96       	adiw	r26, 0x12	; 18
    299e:	4d 91       	ld	r20, X+
    29a0:	5d 91       	ld	r21, X+
    29a2:	6d 91       	ld	r22, X+
    29a4:	7c 91       	ld	r23, X
    29a6:	55 97       	sbiw	r26, 0x15	; 21
    29a8:	cf 01       	movw	r24, r30
    29aa:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    29b2:	82 30       	cpi	r24, 0x02	; 2
    29b4:	91 05       	cpc	r25, r1
    29b6:	a1 05       	cpc	r26, r1
    29b8:	b1 05       	cpc	r27, r1
    29ba:	48 f4       	brcc	.+18     	; 0x29ce <f_read+0x13e>
    29bc:	eb 81       	ldd	r30, Y+3	; 0x03
    29be:	fc 81       	ldd	r31, Y+4	; 0x04
    29c0:	84 81       	ldd	r24, Z+4	; 0x04
    29c2:	80 68       	ori	r24, 0x80	; 128
    29c4:	84 83       	std	Z+4, r24	; 0x04
    29c6:	bb 24       	eor	r11, r11
    29c8:	68 94       	set
    29ca:	b1 f8       	bld	r11, 1
    29cc:	05 c1       	rjmp	.+522    	; 0x2bd8 <f_read+0x348>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    29ce:	8f 3f       	cpi	r24, 0xFF	; 255
    29d0:	ff ef       	ldi	r31, 0xFF	; 255
    29d2:	9f 07       	cpc	r25, r31
    29d4:	ff ef       	ldi	r31, 0xFF	; 255
    29d6:	af 07       	cpc	r26, r31
    29d8:	ff ef       	ldi	r31, 0xFF	; 255
    29da:	bf 07       	cpc	r27, r31
    29dc:	61 f4       	brne	.+24     	; 0x29f6 <f_read+0x166>
    29de:	ab 81       	ldd	r26, Y+3	; 0x03
    29e0:	bc 81       	ldd	r27, Y+4	; 0x04
    29e2:	14 96       	adiw	r26, 0x04	; 4
    29e4:	8c 91       	ld	r24, X
    29e6:	14 97       	sbiw	r26, 0x04	; 4
    29e8:	80 68       	ori	r24, 0x80	; 128
    29ea:	14 96       	adiw	r26, 0x04	; 4
    29ec:	8c 93       	st	X, r24
    29ee:	14 97       	sbiw	r26, 0x04	; 4
    29f0:	bb 24       	eor	r11, r11
    29f2:	b3 94       	inc	r11
    29f4:	f1 c0       	rjmp	.+482    	; 0x2bd8 <f_read+0x348>
				fp->curr_clust = clst;				/* Update current cluster */
    29f6:	eb 81       	ldd	r30, Y+3	; 0x03
    29f8:	fc 81       	ldd	r31, Y+4	; 0x04
    29fa:	82 8b       	std	Z+18, r24	; 0x12
    29fc:	93 8b       	std	Z+19, r25	; 0x13
    29fe:	a4 8b       	std	Z+20, r26	; 0x14
    2a00:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    2a02:	ab 81       	ldd	r26, Y+3	; 0x03
    2a04:	bc 81       	ldd	r27, Y+4	; 0x04
    2a06:	6d 90       	ld	r6, X+
    2a08:	7c 90       	ld	r7, X
    2a0a:	11 97       	sbiw	r26, 0x01	; 1
    2a0c:	52 96       	adiw	r26, 0x12	; 18
    2a0e:	4d 91       	ld	r20, X+
    2a10:	5d 91       	ld	r21, X+
    2a12:	6d 91       	ld	r22, X+
    2a14:	7c 91       	ld	r23, X
    2a16:	55 97       	sbiw	r26, 0x15	; 21
    2a18:	c3 01       	movw	r24, r6
    2a1a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	a1 05       	cpc	r26, r1
    2a26:	b1 05       	cpc	r27, r1
    2a28:	49 f4       	brne	.+18     	; 0x2a3c <f_read+0x1ac>
    2a2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a2e:	84 81       	ldd	r24, Z+4	; 0x04
    2a30:	80 68       	ori	r24, 0x80	; 128
    2a32:	84 83       	std	Z+4, r24	; 0x04
    2a34:	bb 24       	eor	r11, r11
    2a36:	68 94       	set
    2a38:	b1 f8       	bld	r11, 1
    2a3a:	ce c0       	rjmp	.+412    	; 0x2bd8 <f_read+0x348>
			sect += csect;
    2a3c:	6c 01       	movw	r12, r24
    2a3e:	7d 01       	movw	r14, r26
    2a40:	c1 0e       	add	r12, r17
    2a42:	d1 1c       	adc	r13, r1
    2a44:	e1 1c       	adc	r14, r1
    2a46:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2a48:	24 01       	movw	r4, r8
    2a4a:	45 2c       	mov	r4, r5
    2a4c:	55 24       	eor	r5, r5
    2a4e:	46 94       	lsr	r4
			if (cc) {								/* Read maximum contiguous sectors directly */
    2a50:	41 14       	cp	r4, r1
    2a52:	51 04       	cpc	r5, r1
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <f_read+0x1c8>
    2a56:	52 c0       	rjmp	.+164    	; 0x2afc <f_read+0x26c>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    2a58:	d3 01       	movw	r26, r6
    2a5a:	12 96       	adiw	r26, 0x02	; 2
    2a5c:	4c 91       	ld	r20, X
    2a5e:	12 97       	sbiw	r26, 0x02	; 2
    2a60:	c2 01       	movw	r24, r4
    2a62:	81 0f       	add	r24, r17
    2a64:	91 1d       	adc	r25, r1
    2a66:	24 2f       	mov	r18, r20
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	28 17       	cp	r18, r24
    2a6c:	39 07       	cpc	r19, r25
    2a6e:	20 f4       	brcc	.+8      	; 0x2a78 <f_read+0x1e8>
					cc = fp->fs->csize - csect;
    2a70:	c9 01       	movw	r24, r18
    2a72:	2c 01       	movw	r4, r24
    2a74:	41 1a       	sub	r4, r17
    2a76:	51 08       	sbc	r5, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    2a78:	f3 01       	movw	r30, r6
    2a7a:	81 81       	ldd	r24, Z+1	; 0x01
    2a7c:	69 81       	ldd	r22, Y+1	; 0x01
    2a7e:	7a 81       	ldd	r23, Y+2	; 0x02
    2a80:	a7 01       	movw	r20, r14
    2a82:	96 01       	movw	r18, r12
    2a84:	04 2d       	mov	r16, r4
    2a86:	0e 94 2a 03 	call	0x654	; 0x654 <disk_read>
    2a8a:	88 23       	and	r24, r24
    2a8c:	61 f0       	breq	.+24     	; 0x2aa6 <f_read+0x216>
					ABORT(fp->fs, FR_DISK_ERR);
    2a8e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a90:	bc 81       	ldd	r27, Y+4	; 0x04
    2a92:	14 96       	adiw	r26, 0x04	; 4
    2a94:	8c 91       	ld	r24, X
    2a96:	14 97       	sbiw	r26, 0x04	; 4
    2a98:	80 68       	ori	r24, 0x80	; 128
    2a9a:	14 96       	adiw	r26, 0x04	; 4
    2a9c:	8c 93       	st	X, r24
    2a9e:	14 97       	sbiw	r26, 0x04	; 4
    2aa0:	bb 24       	eor	r11, r11
    2aa2:	b3 94       	inc	r11
    2aa4:	99 c0       	rjmp	.+306    	; 0x2bd8 <f_read+0x348>
#if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    2aa6:	ab 81       	ldd	r26, Y+3	; 0x03
    2aa8:	bc 81       	ldd	r27, Y+4	; 0x04
    2aaa:	ed 91       	ld	r30, X+
    2aac:	fc 91       	ld	r31, X
    2aae:	11 97       	sbiw	r26, 0x01	; 1
    2ab0:	84 81       	ldd	r24, Z+4	; 0x04
    2ab2:	88 23       	and	r24, r24
    2ab4:	f1 f0       	breq	.+60     	; 0x2af2 <f_read+0x262>
    2ab6:	86 a5       	lds	r24, 0x66
    2ab8:	97 a5       	lds	r25, 0x67
    2aba:	a0 a9       	sts	0x40, r26
    2abc:	b1 a9       	sts	0x41, r27
    2abe:	8c 19       	sub	r24, r12
    2ac0:	9d 09       	sbc	r25, r13
    2ac2:	ae 09       	sbc	r26, r14
    2ac4:	bf 09       	sbc	r27, r15
    2ac6:	a2 01       	movw	r20, r4
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	84 17       	cp	r24, r20
    2ace:	95 07       	cpc	r25, r21
    2ad0:	a6 07       	cpc	r26, r22
    2ad2:	b7 07       	cpc	r27, r23
    2ad4:	70 f4       	brcc	.+28     	; 0x2af2 <f_read+0x262>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	88 27       	eor	r24, r24
    2ada:	99 0f       	add	r25, r25
    2adc:	bf 01       	movw	r22, r30
    2ade:	6e 5c       	subi	r22, 0xCE	; 206
    2ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae6:	8e 0f       	add	r24, r30
    2ae8:	9f 1f       	adc	r25, r31
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	52 e0       	ldi	r21, 0x02	; 2
    2aee:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    2af2:	62 01       	movw	r12, r4
    2af4:	dc 2c       	mov	r13, r12
    2af6:	cc 24       	eor	r12, r12
    2af8:	dd 0c       	add	r13, r13
				continue;
    2afa:	41 c0       	rjmp	.+130    	; 0x2b7e <f_read+0x2ee>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2afc:	ab 81       	ldd	r26, Y+3	; 0x03
    2afe:	bc 81       	ldd	r27, Y+4	; 0x04
    2b00:	56 96       	adiw	r26, 0x16	; 22
    2b02:	cd 92       	st	X+, r12
    2b04:	dd 92       	st	X+, r13
    2b06:	ed 92       	st	X+, r14
    2b08:	fc 92       	st	X, r15
    2b0a:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2b0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b10:	c6 80       	ldd	r12, Z+6	; 0x06
    2b12:	d7 80       	ldd	r13, Z+7	; 0x07
    2b14:	e0 84       	ldd	r14, Z+8	; 0x08
    2b16:	f1 84       	ldd	r15, Z+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    2b18:	46 89       	ldd	r20, Z+22	; 0x16
    2b1a:	57 89       	ldd	r21, Z+23	; 0x17
    2b1c:	60 8d       	ldd	r22, Z+24	; 0x18
    2b1e:	71 8d       	ldd	r23, Z+25	; 0x19
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2b28:	88 23       	and	r24, r24
    2b2a:	61 f0       	breq	.+24     	; 0x2b44 <f_read+0x2b4>
			ABORT(fp->fs, FR_DISK_ERR);
    2b2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b30:	14 96       	adiw	r26, 0x04	; 4
    2b32:	8c 91       	ld	r24, X
    2b34:	14 97       	sbiw	r26, 0x04	; 4
    2b36:	80 68       	ori	r24, 0x80	; 128
    2b38:	14 96       	adiw	r26, 0x04	; 4
    2b3a:	8c 93       	st	X, r24
    2b3c:	14 97       	sbiw	r26, 0x04	; 4
    2b3e:	bb 24       	eor	r11, r11
    2b40:	b3 94       	inc	r11
    2b42:	4a c0       	rjmp	.+148    	; 0x2bd8 <f_read+0x348>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2b44:	c6 01       	movw	r24, r12
    2b46:	91 70       	andi	r25, 0x01	; 1
    2b48:	e0 e0       	ldi	r30, 0x00	; 0
    2b4a:	f2 e0       	ldi	r31, 0x02	; 2
    2b4c:	e8 1b       	sub	r30, r24
    2b4e:	f9 0b       	sbc	r31, r25
    2b50:	64 01       	movw	r12, r8
    2b52:	e8 15       	cp	r30, r8
    2b54:	f9 05       	cpc	r31, r9
    2b56:	08 f4       	brcc	.+2      	; 0x2b5a <f_read+0x2ca>
    2b58:	6f 01       	movw	r12, r30
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2b5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b5e:	16 96       	adiw	r26, 0x06	; 6
    2b60:	6d 91       	ld	r22, X+
    2b62:	7c 91       	ld	r23, X
    2b64:	17 97       	sbiw	r26, 0x07	; 7
    2b66:	71 70       	andi	r23, 0x01	; 1
    2b68:	cb 01       	movw	r24, r22
    2b6a:	c2 96       	adiw	r24, 0x32	; 50
    2b6c:	6d 91       	ld	r22, X+
    2b6e:	7c 91       	ld	r23, X
    2b70:	68 0f       	add	r22, r24
    2b72:	79 1f       	adc	r23, r25
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	a6 01       	movw	r20, r12
    2b7a:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b80:	fa 81       	ldd	r31, Y+2	; 0x02
    2b82:	ec 0d       	add	r30, r12
    2b84:	fd 1d       	adc	r31, r13
    2b86:	fa 83       	std	Y+2, r31	; 0x02
    2b88:	e9 83       	std	Y+1, r30	; 0x01
    2b8a:	a6 01       	movw	r20, r12
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	eb 81       	ldd	r30, Y+3	; 0x03
    2b92:	fc 81       	ldd	r31, Y+4	; 0x04
    2b94:	86 81       	ldd	r24, Z+6	; 0x06
    2b96:	97 81       	ldd	r25, Z+7	; 0x07
    2b98:	a0 85       	ldd	r26, Z+8	; 0x08
    2b9a:	b1 85       	ldd	r27, Z+9	; 0x09
    2b9c:	84 0f       	add	r24, r20
    2b9e:	95 1f       	adc	r25, r21
    2ba0:	a6 1f       	adc	r26, r22
    2ba2:	b7 1f       	adc	r27, r23
    2ba4:	86 83       	std	Z+6, r24	; 0x06
    2ba6:	97 83       	std	Z+7, r25	; 0x07
    2ba8:	a0 87       	std	Z+8, r26	; 0x08
    2baa:	b1 87       	std	Z+9, r27	; 0x09
    2bac:	d1 01       	movw	r26, r2
    2bae:	8d 91       	ld	r24, X+
    2bb0:	9c 91       	ld	r25, X
    2bb2:	11 97       	sbiw	r26, 0x01	; 1
    2bb4:	8c 0d       	add	r24, r12
    2bb6:	9d 1d       	adc	r25, r13
    2bb8:	11 96       	adiw	r26, 0x01	; 1
    2bba:	9c 93       	st	X, r25
    2bbc:	8e 93       	st	-X, r24
    2bbe:	8c 18       	sub	r8, r12
    2bc0:	9d 08       	sbc	r9, r13
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <f_read+0x336>
    2bc4:	b7 ce       	rjmp	.-658    	; 0x2934 <f_read+0xa4>
    2bc6:	08 c0       	rjmp	.+16     	; 0x2bd8 <f_read+0x348>
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2bc8:	bb 24       	eor	r11, r11
    2bca:	68 94       	set
    2bcc:	b1 f8       	bld	r11, 1
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <f_read+0x348>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2bd0:	0f 2e       	mov	r0, r31
    2bd2:	f7 e0       	ldi	r31, 0x07	; 7
    2bd4:	bf 2e       	mov	r11, r31
    2bd6:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2bd8:	8b 2d       	mov	r24, r11
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	bf 90       	pop	r11
    2bf4:	9f 90       	pop	r9
    2bf6:	8f 90       	pop	r8
    2bf8:	7f 90       	pop	r7
    2bfa:	6f 90       	pop	r6
    2bfc:	5f 90       	pop	r5
    2bfe:	4f 90       	pop	r4
    2c00:	3f 90       	pop	r3
    2c02:	2f 90       	pop	r2
    2c04:	08 95       	ret

00002c06 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2c06:	2f 92       	push	r2
    2c08:	3f 92       	push	r3
    2c0a:	4f 92       	push	r4
    2c0c:	5f 92       	push	r5
    2c0e:	6f 92       	push	r6
    2c10:	7f 92       	push	r7
    2c12:	8f 92       	push	r8
    2c14:	9f 92       	push	r9
    2c16:	af 92       	push	r10
    2c18:	bf 92       	push	r11
    2c1a:	cf 92       	push	r12
    2c1c:	df 92       	push	r13
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <f_write+0x26>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <f_write+0x28>
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	9c 83       	std	Y+4, r25	; 0x04
    2c34:	8b 83       	std	Y+3, r24	; 0x03
    2c36:	c6 2e       	mov	r12, r22
    2c38:	17 2f       	mov	r17, r23
    2c3a:	4a 01       	movw	r8, r20
    2c3c:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    2c3e:	d9 01       	movw	r26, r18
    2c40:	1d 92       	st	X+, r1
    2c42:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    2c44:	fc 01       	movw	r30, r24
    2c46:	62 81       	ldd	r22, Z+2	; 0x02
    2c48:	73 81       	ldd	r23, Z+3	; 0x03
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	0e 94 a2 06 	call	0xd44	; 0xd44 <validate>
    2c52:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2c54:	88 23       	and	r24, r24
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <f_write+0x54>
    2c58:	fc c1       	rjmp	.+1016   	; 0x3052 <f_write+0x44c>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    2c5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c5e:	14 96       	adiw	r26, 0x04	; 4
    2c60:	8c 91       	ld	r24, X
    2c62:	14 97       	sbiw	r26, 0x04	; 4
    2c64:	88 23       	and	r24, r24
    2c66:	0c f4       	brge	.+2      	; 0x2c6a <f_write+0x64>
    2c68:	ec c1       	rjmp	.+984    	; 0x3042 <f_write+0x43c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    2c6a:	81 ff       	sbrs	r24, 1
    2c6c:	ee c1       	rjmp	.+988    	; 0x304a <f_write+0x444>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    2c6e:	1a 96       	adiw	r26, 0x0a	; 10
    2c70:	4d 91       	ld	r20, X+
    2c72:	5d 91       	ld	r21, X+
    2c74:	6d 91       	ld	r22, X+
    2c76:	7c 91       	ld	r23, X
    2c78:	1d 97       	sbiw	r26, 0x0d	; 13
    2c7a:	c4 01       	movw	r24, r8
    2c7c:	a0 e0       	ldi	r26, 0x00	; 0
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	84 0f       	add	r24, r20
    2c82:	95 1f       	adc	r25, r21
    2c84:	a6 1f       	adc	r26, r22
    2c86:	b7 1f       	adc	r27, r23
    2c88:	84 17       	cp	r24, r20
    2c8a:	95 07       	cpc	r25, r21
    2c8c:	a6 07       	cpc	r26, r22
    2c8e:	b7 07       	cpc	r27, r23
    2c90:	08 f4       	brcc	.+2      	; 0x2c94 <f_write+0x8e>
    2c92:	ba c1       	rjmp	.+884    	; 0x3008 <f_write+0x402>

	for ( ;  btw;									/* Repeat until all data transferred */
    2c94:	81 14       	cp	r8, r1
    2c96:	91 04       	cpc	r9, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <f_write+0x96>
    2c9a:	b6 c1       	rjmp	.+876    	; 0x3008 <f_write+0x402>
    2c9c:	c9 82       	std	Y+1, r12	; 0x01
    2c9e:	1a 83       	std	Y+2, r17	; 0x02
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    2ca0:	aa 24       	eor	r10, r10
    2ca2:	a3 94       	inc	r10
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    2ca4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca8:	46 81       	ldd	r20, Z+6	; 0x06
    2caa:	57 81       	ldd	r21, Z+7	; 0x07
    2cac:	60 85       	ldd	r22, Z+8	; 0x08
    2cae:	71 85       	ldd	r23, Z+9	; 0x09
    2cb0:	db 01       	movw	r26, r22
    2cb2:	ca 01       	movw	r24, r20
    2cb4:	91 70       	andi	r25, 0x01	; 1
    2cb6:	a0 70       	andi	r26, 0x00	; 0
    2cb8:	b0 70       	andi	r27, 0x00	; 0
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	a1 05       	cpc	r26, r1
    2cbe:	b1 05       	cpc	r27, r1
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <f_write+0xbe>
    2cc2:	3f c1       	rjmp	.+638    	; 0x2f42 <f_write+0x33c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2cc4:	20 81       	ld	r18, Z
    2cc6:	31 81       	ldd	r19, Z+1	; 0x01
    2cc8:	db 01       	movw	r26, r22
    2cca:	ca 01       	movw	r24, r20
    2ccc:	07 2e       	mov	r0, r23
    2cce:	79 e0       	ldi	r23, 0x09	; 9
    2cd0:	b6 95       	lsr	r27
    2cd2:	a7 95       	ror	r26
    2cd4:	97 95       	ror	r25
    2cd6:	87 95       	ror	r24
    2cd8:	7a 95       	dec	r23
    2cda:	d1 f7       	brne	.-12     	; 0x2cd0 <f_write+0xca>
    2cdc:	70 2d       	mov	r23, r0
    2cde:	f9 01       	movw	r30, r18
    2ce0:	12 81       	ldd	r17, Z+2	; 0x02
    2ce2:	11 50       	subi	r17, 0x01	; 1
    2ce4:	18 23       	and	r17, r24
			if (!csect) {							/* On the cluster boundary? */
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <f_write+0xe4>
    2ce8:	58 c0       	rjmp	.+176    	; 0x2d9a <f_write+0x194>
				if (fp->fptr == 0) {				/* On the top of the file? */
    2cea:	41 15       	cp	r20, r1
    2cec:	51 05       	cpc	r21, r1
    2cee:	61 05       	cpc	r22, r1
    2cf0:	71 05       	cpc	r23, r1
    2cf2:	c9 f4       	brne	.+50     	; 0x2d26 <f_write+0x120>
					clst = fp->org_clust;			/* Follow from the origin */
    2cf4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf8:	86 85       	ldd	r24, Z+14	; 0x0e
    2cfa:	97 85       	ldd	r25, Z+15	; 0x0f
    2cfc:	a0 89       	ldd	r26, Z+16	; 0x10
    2cfe:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)					/* When there is no cluster chain, */
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	a1 05       	cpc	r26, r1
    2d04:	b1 05       	cpc	r27, r1
    2d06:	09 f5       	brne	.+66     	; 0x2d4a <f_write+0x144>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2d08:	c9 01       	movw	r24, r18
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	ba 01       	movw	r22, r20
    2d10:	0e 94 a7 0c 	call	0x194e	; 0x194e <create_chain>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	eb 81       	ldd	r30, Y+3	; 0x03
    2d1a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d1c:	86 87       	std	Z+14, r24	; 0x0e
    2d1e:	97 87       	std	Z+15, r25	; 0x0f
    2d20:	a0 8b       	std	Z+16, r26	; 0x10
    2d22:	b1 8b       	std	Z+17, r27	; 0x11
    2d24:	0d c0       	rjmp	.+26     	; 0x2d40 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
    2d26:	ab 81       	ldd	r26, Y+3	; 0x03
    2d28:	bc 81       	ldd	r27, Y+4	; 0x04
    2d2a:	52 96       	adiw	r26, 0x12	; 18
    2d2c:	4d 91       	ld	r20, X+
    2d2e:	5d 91       	ld	r21, X+
    2d30:	6d 91       	ld	r22, X+
    2d32:	7c 91       	ld	r23, X
    2d34:	55 97       	sbiw	r26, 0x15	; 21
    2d36:	c9 01       	movw	r24, r18
    2d38:	0e 94 a7 0c 	call	0x194e	; 0x194e <create_chain>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	a1 05       	cpc	r26, r1
    2d44:	b1 05       	cpc	r27, r1
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <f_write+0x144>
    2d48:	5f c1       	rjmp	.+702    	; 0x3008 <f_write+0x402>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	91 05       	cpc	r25, r1
    2d4e:	a1 05       	cpc	r26, r1
    2d50:	b1 05       	cpc	r27, r1
    2d52:	49 f4       	brne	.+18     	; 0x2d66 <f_write+0x160>
    2d54:	eb 81       	ldd	r30, Y+3	; 0x03
    2d56:	fc 81       	ldd	r31, Y+4	; 0x04
    2d58:	84 81       	ldd	r24, Z+4	; 0x04
    2d5a:	80 68       	ori	r24, 0x80	; 128
    2d5c:	84 83       	std	Z+4, r24	; 0x04
    2d5e:	bb 24       	eor	r11, r11
    2d60:	68 94       	set
    2d62:	b1 f8       	bld	r11, 1
    2d64:	76 c1       	rjmp	.+748    	; 0x3052 <f_write+0x44c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2d66:	8f 3f       	cpi	r24, 0xFF	; 255
    2d68:	ff ef       	ldi	r31, 0xFF	; 255
    2d6a:	9f 07       	cpc	r25, r31
    2d6c:	ff ef       	ldi	r31, 0xFF	; 255
    2d6e:	af 07       	cpc	r26, r31
    2d70:	ff ef       	ldi	r31, 0xFF	; 255
    2d72:	bf 07       	cpc	r27, r31
    2d74:	61 f4       	brne	.+24     	; 0x2d8e <f_write+0x188>
    2d76:	ab 81       	ldd	r26, Y+3	; 0x03
    2d78:	bc 81       	ldd	r27, Y+4	; 0x04
    2d7a:	14 96       	adiw	r26, 0x04	; 4
    2d7c:	8c 91       	ld	r24, X
    2d7e:	14 97       	sbiw	r26, 0x04	; 4
    2d80:	80 68       	ori	r24, 0x80	; 128
    2d82:	14 96       	adiw	r26, 0x04	; 4
    2d84:	8c 93       	st	X, r24
    2d86:	14 97       	sbiw	r26, 0x04	; 4
    2d88:	bb 24       	eor	r11, r11
    2d8a:	b3 94       	inc	r11
    2d8c:	62 c1       	rjmp	.+708    	; 0x3052 <f_write+0x44c>
				fp->curr_clust = clst;				/* Update current cluster */
    2d8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d90:	fc 81       	ldd	r31, Y+4	; 0x04
    2d92:	82 8b       	std	Z+18, r24	; 0x12
    2d94:	93 8b       	std	Z+19, r25	; 0x13
    2d96:	a4 8b       	std	Z+20, r26	; 0x14
    2d98:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    2d9a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d9c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d9e:	2d 91       	ld	r18, X+
    2da0:	3c 91       	ld	r19, X
    2da2:	f9 01       	movw	r30, r18
    2da4:	86 a5       	lds	r24, 0x66
    2da6:	97 a5       	lds	r25, 0x67
    2da8:	a0 a9       	sts	0x40, r26
    2daa:	b1 a9       	sts	0x41, r27
    2dac:	eb 81       	ldd	r30, Y+3	; 0x03
    2dae:	fc 81       	ldd	r31, Y+4	; 0x04
    2db0:	46 89       	ldd	r20, Z+22	; 0x16
    2db2:	57 89       	ldd	r21, Z+23	; 0x17
    2db4:	60 8d       	ldd	r22, Z+24	; 0x18
    2db6:	71 8d       	ldd	r23, Z+25	; 0x19
    2db8:	84 17       	cp	r24, r20
    2dba:	95 07       	cpc	r25, r21
    2dbc:	a6 07       	cpc	r26, r22
    2dbe:	b7 07       	cpc	r27, r23
    2dc0:	a1 f4       	brne	.+40     	; 0x2dea <f_write+0x1e4>
    2dc2:	c9 01       	movw	r24, r18
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	ba 01       	movw	r22, r20
    2dca:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2dce:	88 23       	and	r24, r24
    2dd0:	61 f0       	breq	.+24     	; 0x2dea <f_write+0x1e4>
				ABORT(fp->fs, FR_DISK_ERR);
    2dd2:	ab 81       	ldd	r26, Y+3	; 0x03
    2dd4:	bc 81       	ldd	r27, Y+4	; 0x04
    2dd6:	14 96       	adiw	r26, 0x04	; 4
    2dd8:	8c 91       	ld	r24, X
    2dda:	14 97       	sbiw	r26, 0x04	; 4
    2ddc:	80 68       	ori	r24, 0x80	; 128
    2dde:	14 96       	adiw	r26, 0x04	; 4
    2de0:	8c 93       	st	X, r24
    2de2:	14 97       	sbiw	r26, 0x04	; 4
    2de4:	bb 24       	eor	r11, r11
    2de6:	b3 94       	inc	r11
    2de8:	34 c1       	rjmp	.+616    	; 0x3052 <f_write+0x44c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    2dea:	eb 81       	ldd	r30, Y+3	; 0x03
    2dec:	fc 81       	ldd	r31, Y+4	; 0x04
    2dee:	40 80       	ld	r4, Z
    2df0:	51 80       	ldd	r5, Z+1	; 0x01
    2df2:	42 89       	ldd	r20, Z+18	; 0x12
    2df4:	53 89       	ldd	r21, Z+19	; 0x13
    2df6:	64 89       	ldd	r22, Z+20	; 0x14
    2df8:	75 89       	ldd	r23, Z+21	; 0x15
    2dfa:	c2 01       	movw	r24, r4
    2dfc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	a1 05       	cpc	r26, r1
    2e08:	b1 05       	cpc	r27, r1
    2e0a:	69 f4       	brne	.+26     	; 0x2e26 <f_write+0x220>
    2e0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2e0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2e10:	14 96       	adiw	r26, 0x04	; 4
    2e12:	8c 91       	ld	r24, X
    2e14:	14 97       	sbiw	r26, 0x04	; 4
    2e16:	80 68       	ori	r24, 0x80	; 128
    2e18:	14 96       	adiw	r26, 0x04	; 4
    2e1a:	8c 93       	st	X, r24
    2e1c:	14 97       	sbiw	r26, 0x04	; 4
    2e1e:	bb 24       	eor	r11, r11
    2e20:	68 94       	set
    2e22:	b1 f8       	bld	r11, 1
    2e24:	16 c1       	rjmp	.+556    	; 0x3052 <f_write+0x44c>
			sect += csect;
    2e26:	6c 01       	movw	r12, r24
    2e28:	7d 01       	movw	r14, r26
    2e2a:	c1 0e       	add	r12, r17
    2e2c:	d1 1c       	adc	r13, r1
    2e2e:	e1 1c       	adc	r14, r1
    2e30:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2e32:	34 01       	movw	r6, r8
    2e34:	67 2c       	mov	r6, r7
    2e36:	77 24       	eor	r7, r7
    2e38:	66 94       	lsr	r6
			if (cc) {								/* Write maximum contiguous sectors directly */
    2e3a:	61 14       	cp	r6, r1
    2e3c:	71 04       	cpc	r7, r1
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <f_write+0x23c>
    2e40:	4f c0       	rjmp	.+158    	; 0x2ee0 <f_write+0x2da>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    2e42:	f2 01       	movw	r30, r4
    2e44:	42 81       	ldd	r20, Z+2	; 0x02
    2e46:	c3 01       	movw	r24, r6
    2e48:	81 0f       	add	r24, r17
    2e4a:	91 1d       	adc	r25, r1
    2e4c:	24 2f       	mov	r18, r20
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	28 17       	cp	r18, r24
    2e52:	39 07       	cpc	r19, r25
    2e54:	20 f4       	brcc	.+8      	; 0x2e5e <f_write+0x258>
					cc = fp->fs->csize - csect;
    2e56:	c9 01       	movw	r24, r18
    2e58:	3c 01       	movw	r6, r24
    2e5a:	61 1a       	sub	r6, r17
    2e5c:	71 08       	sbc	r7, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2e5e:	d2 01       	movw	r26, r4
    2e60:	11 96       	adiw	r26, 0x01	; 1
    2e62:	8c 91       	ld	r24, X
    2e64:	69 81       	ldd	r22, Y+1	; 0x01
    2e66:	7a 81       	ldd	r23, Y+2	; 0x02
    2e68:	a7 01       	movw	r20, r14
    2e6a:	96 01       	movw	r18, r12
    2e6c:	06 2d       	mov	r16, r6
    2e6e:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
    2e72:	88 23       	and	r24, r24
    2e74:	41 f0       	breq	.+16     	; 0x2e86 <f_write+0x280>
					ABORT(fp->fs, FR_DISK_ERR);
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	84 81       	ldd	r24, Z+4	; 0x04
    2e7c:	80 68       	ori	r24, 0x80	; 128
    2e7e:	84 83       	std	Z+4, r24	; 0x04
    2e80:	bb 24       	eor	r11, r11
    2e82:	b3 94       	inc	r11
    2e84:	e6 c0       	rjmp	.+460    	; 0x3052 <f_write+0x44c>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    2e86:	ab 81       	ldd	r26, Y+3	; 0x03
    2e88:	bc 81       	ldd	r27, Y+4	; 0x04
    2e8a:	ed 91       	ld	r30, X+
    2e8c:	fc 91       	ld	r31, X
    2e8e:	86 a5       	lds	r24, 0x66
    2e90:	97 a5       	lds	r25, 0x67
    2e92:	a0 a9       	sts	0x40, r26
    2e94:	b1 a9       	sts	0x41, r27
    2e96:	8c 19       	sub	r24, r12
    2e98:	9d 09       	sbc	r25, r13
    2e9a:	ae 09       	sbc	r26, r14
    2e9c:	bf 09       	sbc	r27, r15
    2e9e:	a3 01       	movw	r20, r6
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	84 17       	cp	r24, r20
    2ea6:	95 07       	cpc	r25, r21
    2ea8:	a6 07       	cpc	r26, r22
    2eaa:	b7 07       	cpc	r27, r23
    2eac:	a0 f4       	brcc	.+40     	; 0x2ed6 <f_write+0x2d0>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2eae:	bc 01       	movw	r22, r24
    2eb0:	76 2f       	mov	r23, r22
    2eb2:	66 27       	eor	r22, r22
    2eb4:	77 0f       	add	r23, r23
    2eb6:	29 81       	ldd	r18, Y+1	; 0x01
    2eb8:	3a 81       	ldd	r19, Y+2	; 0x02
    2eba:	62 0f       	add	r22, r18
    2ebc:	73 1f       	adc	r23, r19
    2ebe:	cf 01       	movw	r24, r30
    2ec0:	c2 96       	adiw	r24, 0x32	; 50
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	52 e0       	ldi	r21, 0x02	; 2
    2ec6:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
					fp->fs->wflag = 0;
    2eca:	ab 81       	ldd	r26, Y+3	; 0x03
    2ecc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ece:	ed 91       	ld	r30, X+
    2ed0:	fc 91       	ld	r31, X
    2ed2:	11 97       	sbiw	r26, 0x01	; 1
    2ed4:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    2ed6:	63 01       	movw	r12, r6
    2ed8:	dc 2c       	mov	r13, r12
    2eda:	cc 24       	eor	r12, r12
    2edc:	dd 0c       	add	r13, r13
				continue;
    2ede:	70 c0       	rjmp	.+224    	; 0x2fc0 <f_write+0x3ba>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    2ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee4:	86 81       	ldd	r24, Z+6	; 0x06
    2ee6:	97 81       	ldd	r25, Z+7	; 0x07
    2ee8:	a0 85       	ldd	r26, Z+8	; 0x08
    2eea:	b1 85       	ldd	r27, Z+9	; 0x09
    2eec:	42 85       	ldd	r20, Z+10	; 0x0a
    2eee:	53 85       	ldd	r21, Z+11	; 0x0b
    2ef0:	64 85       	ldd	r22, Z+12	; 0x0c
    2ef2:	75 85       	ldd	r23, Z+13	; 0x0d
    2ef4:	84 17       	cp	r24, r20
    2ef6:	95 07       	cpc	r25, r21
    2ef8:	a6 07       	cpc	r26, r22
    2efa:	b7 07       	cpc	r27, r23
    2efc:	e0 f0       	brcs	.+56     	; 0x2f36 <f_write+0x330>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    2efe:	c2 01       	movw	r24, r4
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	50 e0       	ldi	r21, 0x00	; 0
    2f04:	ba 01       	movw	r22, r20
    2f06:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2f0a:	88 23       	and	r24, r24
    2f0c:	61 f0       	breq	.+24     	; 0x2f26 <f_write+0x320>
    2f0e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f10:	bc 81       	ldd	r27, Y+4	; 0x04
    2f12:	14 96       	adiw	r26, 0x04	; 4
    2f14:	8c 91       	ld	r24, X
    2f16:	14 97       	sbiw	r26, 0x04	; 4
    2f18:	80 68       	ori	r24, 0x80	; 128
    2f1a:	14 96       	adiw	r26, 0x04	; 4
    2f1c:	8c 93       	st	X, r24
    2f1e:	14 97       	sbiw	r26, 0x04	; 4
    2f20:	bb 24       	eor	r11, r11
    2f22:	b3 94       	inc	r11
    2f24:	96 c0       	rjmp	.+300    	; 0x3052 <f_write+0x44c>
				fp->fs->winsect = sect;
    2f26:	ab 81       	ldd	r26, Y+3	; 0x03
    2f28:	bc 81       	ldd	r27, Y+4	; 0x04
    2f2a:	ed 91       	ld	r30, X+
    2f2c:	fc 91       	ld	r31, X
    2f2e:	c6 a6       	lds	r28, 0xb6
    2f30:	d7 a6       	lds	r29, 0xb7
    2f32:	e0 aa       	sts	0x90, r30
    2f34:	f1 aa       	sts	0x91, r31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2f36:	eb 81       	ldd	r30, Y+3	; 0x03
    2f38:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3a:	c6 8a       	std	Z+22, r12	; 0x16
    2f3c:	d7 8a       	std	Z+23, r13	; 0x17
    2f3e:	e0 8e       	std	Z+24, r14	; 0x18
    2f40:	f1 8e       	std	Z+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    2f42:	ab 81       	ldd	r26, Y+3	; 0x03
    2f44:	bc 81       	ldd	r27, Y+4	; 0x04
    2f46:	16 96       	adiw	r26, 0x06	; 6
    2f48:	cd 90       	ld	r12, X+
    2f4a:	dd 90       	ld	r13, X+
    2f4c:	ed 90       	ld	r14, X+
    2f4e:	fc 90       	ld	r15, X
    2f50:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    2f52:	56 96       	adiw	r26, 0x16	; 22
    2f54:	4d 91       	ld	r20, X+
    2f56:	5d 91       	ld	r21, X+
    2f58:	6d 91       	ld	r22, X+
    2f5a:	7c 91       	ld	r23, X
    2f5c:	59 97       	sbiw	r26, 0x19	; 25
    2f5e:	8d 91       	ld	r24, X+
    2f60:	9c 91       	ld	r25, X
    2f62:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    2f66:	88 23       	and	r24, r24
    2f68:	41 f0       	breq	.+16     	; 0x2f7a <f_write+0x374>
			ABORT(fp->fs, FR_DISK_ERR);
    2f6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f6e:	84 81       	ldd	r24, Z+4	; 0x04
    2f70:	80 68       	ori	r24, 0x80	; 128
    2f72:	84 83       	std	Z+4, r24	; 0x04
    2f74:	bb 24       	eor	r11, r11
    2f76:	b3 94       	inc	r11
    2f78:	6c c0       	rjmp	.+216    	; 0x3052 <f_write+0x44c>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    2f7a:	c6 01       	movw	r24, r12
    2f7c:	91 70       	andi	r25, 0x01	; 1
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	32 e0       	ldi	r19, 0x02	; 2
    2f82:	28 1b       	sub	r18, r24
    2f84:	39 0b       	sbc	r19, r25
    2f86:	64 01       	movw	r12, r8
    2f88:	28 15       	cp	r18, r8
    2f8a:	39 05       	cpc	r19, r9
    2f8c:	08 f4       	brcc	.+2      	; 0x2f90 <f_write+0x38a>
    2f8e:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2f90:	ab 81       	ldd	r26, Y+3	; 0x03
    2f92:	bc 81       	ldd	r27, Y+4	; 0x04
    2f94:	16 96       	adiw	r26, 0x06	; 6
    2f96:	8d 91       	ld	r24, X+
    2f98:	9c 91       	ld	r25, X
    2f9a:	17 97       	sbiw	r26, 0x07	; 7
    2f9c:	91 70       	andi	r25, 0x01	; 1
    2f9e:	9c 01       	movw	r18, r24
    2fa0:	2e 5c       	subi	r18, 0xCE	; 206
    2fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa4:	8d 91       	ld	r24, X+
    2fa6:	9c 91       	ld	r25, X
    2fa8:	82 0f       	add	r24, r18
    2faa:	93 1f       	adc	r25, r19
    2fac:	69 81       	ldd	r22, Y+1	; 0x01
    2fae:	7a 81       	ldd	r23, Y+2	; 0x02
    2fb0:	a6 01       	movw	r20, r12
    2fb2:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
		fp->fs->wflag = 1;
    2fb6:	ab 81       	ldd	r26, Y+3	; 0x03
    2fb8:	bc 81       	ldd	r27, Y+4	; 0x04
    2fba:	ed 91       	ld	r30, X+
    2fbc:	fc 91       	ld	r31, X
    2fbe:	a4 82       	std	Z+4, r10	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc4:	ec 0d       	add	r30, r12
    2fc6:	fd 1d       	adc	r31, r13
    2fc8:	fa 83       	std	Y+2, r31	; 0x02
    2fca:	e9 83       	std	Y+1, r30	; 0x01
    2fcc:	a6 01       	movw	r20, r12
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd6:	86 81       	ldd	r24, Z+6	; 0x06
    2fd8:	97 81       	ldd	r25, Z+7	; 0x07
    2fda:	a0 85       	ldd	r26, Z+8	; 0x08
    2fdc:	b1 85       	ldd	r27, Z+9	; 0x09
    2fde:	84 0f       	add	r24, r20
    2fe0:	95 1f       	adc	r25, r21
    2fe2:	a6 1f       	adc	r26, r22
    2fe4:	b7 1f       	adc	r27, r23
    2fe6:	86 83       	std	Z+6, r24	; 0x06
    2fe8:	97 83       	std	Z+7, r25	; 0x07
    2fea:	a0 87       	std	Z+8, r26	; 0x08
    2fec:	b1 87       	std	Z+9, r27	; 0x09
    2fee:	d1 01       	movw	r26, r2
    2ff0:	8d 91       	ld	r24, X+
    2ff2:	9c 91       	ld	r25, X
    2ff4:	11 97       	sbiw	r26, 0x01	; 1
    2ff6:	8c 0d       	add	r24, r12
    2ff8:	9d 1d       	adc	r25, r13
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	9c 93       	st	X, r25
    2ffe:	8e 93       	st	-X, r24
    3000:	8c 18       	sub	r8, r12
    3002:	9d 08       	sbc	r9, r13
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    3004:	09 f0       	breq	.+2      	; 0x3008 <f_write+0x402>
    3006:	4e ce       	rjmp	.-868    	; 0x2ca4 <f_write+0x9e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3008:	eb 81       	ldd	r30, Y+3	; 0x03
    300a:	fc 81       	ldd	r31, Y+4	; 0x04
    300c:	86 81       	ldd	r24, Z+6	; 0x06
    300e:	97 81       	ldd	r25, Z+7	; 0x07
    3010:	a0 85       	ldd	r26, Z+8	; 0x08
    3012:	b1 85       	ldd	r27, Z+9	; 0x09
    3014:	42 85       	ldd	r20, Z+10	; 0x0a
    3016:	53 85       	ldd	r21, Z+11	; 0x0b
    3018:	64 85       	ldd	r22, Z+12	; 0x0c
    301a:	75 85       	ldd	r23, Z+13	; 0x0d
    301c:	48 17       	cp	r20, r24
    301e:	59 07       	cpc	r21, r25
    3020:	6a 07       	cpc	r22, r26
    3022:	7b 07       	cpc	r23, r27
    3024:	20 f4       	brcc	.+8      	; 0x302e <f_write+0x428>
    3026:	82 87       	std	Z+10, r24	; 0x0a
    3028:	93 87       	std	Z+11, r25	; 0x0b
    302a:	a4 87       	std	Z+12, r26	; 0x0c
    302c:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    302e:	ab 81       	ldd	r26, Y+3	; 0x03
    3030:	bc 81       	ldd	r27, Y+4	; 0x04
    3032:	14 96       	adiw	r26, 0x04	; 4
    3034:	8c 91       	ld	r24, X
    3036:	14 97       	sbiw	r26, 0x04	; 4
    3038:	80 62       	ori	r24, 0x20	; 32
    303a:	14 96       	adiw	r26, 0x04	; 4
    303c:	8c 93       	st	X, r24
    303e:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    3040:	08 c0       	rjmp	.+16     	; 0x3052 <f_write+0x44c>
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3042:	bb 24       	eor	r11, r11
    3044:	68 94       	set
    3046:	b1 f8       	bld	r11, 1
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <f_write+0x44c>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    304a:	0f 2e       	mov	r0, r31
    304c:	f7 e0       	ldi	r31, 0x07	; 7
    304e:	bf 2e       	mov	r11, r31
    3050:	f0 2d       	mov	r31, r0

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    3052:	8b 2d       	mov	r24, r11
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	ff 90       	pop	r15
    3066:	ef 90       	pop	r14
    3068:	df 90       	pop	r13
    306a:	cf 90       	pop	r12
    306c:	bf 90       	pop	r11
    306e:	af 90       	pop	r10
    3070:	9f 90       	pop	r9
    3072:	8f 90       	pop	r8
    3074:	7f 90       	pop	r7
    3076:	6f 90       	pop	r6
    3078:	5f 90       	pop	r5
    307a:	4f 90       	pop	r4
    307c:	3f 90       	pop	r3
    307e:	2f 90       	pop	r2
    3080:	08 95       	ret

00003082 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    308c:	6a 81       	ldd	r22, Y+2	; 0x02
    308e:	7b 81       	ldd	r23, Y+3	; 0x03
    3090:	88 81       	ld	r24, Y
    3092:	99 81       	ldd	r25, Y+1	; 0x01
    3094:	0e 94 a2 06 	call	0xd44	; 0xd44 <validate>
	if (res == FR_OK) {
    3098:	88 23       	and	r24, r24
    309a:	c9 f5       	brne	.+114    	; 0x310e <f_sync+0x8c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	95 ff       	sbrs	r25, 5
    30a0:	36 c0       	rjmp	.+108    	; 0x310e <f_sync+0x8c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    30a2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    30a4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    30a6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    30a8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    30aa:	88 81       	ld	r24, Y
    30ac:	99 81       	ldd	r25, Y+1	; 0x01
    30ae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
			if (res == FR_OK) {
    30b2:	88 23       	and	r24, r24
    30b4:	61 f5       	brne	.+88     	; 0x310e <f_sync+0x8c>
				dir = fp->dir_ptr;
    30b6:	0e 8d       	ldd	r16, Y+30	; 0x1e
    30b8:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    30ba:	f8 01       	movw	r30, r16
    30bc:	83 85       	ldd	r24, Z+11	; 0x0b
    30be:	80 62       	ori	r24, 0x20	; 32
    30c0:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    30c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    30c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    30c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    30c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    30ca:	84 8f       	std	Z+28, r24	; 0x1c
    30cc:	95 8f       	std	Z+29, r25	; 0x1d
    30ce:	a6 8f       	std	Z+30, r26	; 0x1e
    30d0:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    30d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    30d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    30d6:	93 8f       	std	Z+27, r25	; 0x1b
    30d8:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    30da:	8e 85       	ldd	r24, Y+14	; 0x0e
    30dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    30de:	a8 89       	ldd	r26, Y+16	; 0x10
    30e0:	b9 89       	ldd	r27, Y+17	; 0x11
    30e2:	b5 8b       	std	Z+21, r27	; 0x15
    30e4:	a4 8b       	std	Z+20, r26	; 0x14
				tim = get_fattime();						/* Update updated time */
    30e6:	0e 94 00 06 	call	0xc00	; 0xc00 <get_fattime>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
				ST_DWORD(dir+DIR_WrtTime, tim);
    30ee:	f8 01       	movw	r30, r16
    30f0:	86 8b       	std	Z+22, r24	; 0x16
    30f2:	97 8b       	std	Z+23, r25	; 0x17
    30f4:	a0 8f       	std	Z+24, r26	; 0x18
    30f6:	b1 8f       	std	Z+25, r27	; 0x19
				fp->flag &= ~FA__WRITTEN;
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	8f 7d       	andi	r24, 0xDF	; 223
    30fc:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    30fe:	e8 81       	ld	r30, Y
    3100:	f9 81       	ldd	r31, Y+1	; 0x01
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3106:	88 81       	ld	r24, Y
    3108:	99 81       	ldd	r25, Y+1	; 0x01
    310a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <sync>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    311e:	0e 94 41 18 	call	0x3082	; 0x3082 <f_sync>
#else
		res = dec_lock(fp->fs, fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    3122:	88 23       	and	r24, r24
    3124:	11 f4       	brne	.+4      	; 0x312a <f_close+0x12>
    3126:	19 82       	std	Y+1, r1	; 0x01
    3128:	18 82       	st	Y, r1
	return res;
#endif
}
    312a:	df 91       	pop	r29
    312c:	cf 91       	pop	r28
    312e:	08 95       	ret

00003130 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    3130:	82 30       	cpi	r24, 0x02	; 2
    3132:	20 f4       	brcc	.+8      	; 0x313c <f_chdrive+0xc>

	Drive = drv;
    3134:	80 93 88 05 	sts	0x0588, r24

	return FR_OK;
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	08 95       	ret

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    313c:	8b e0       	ldi	r24, 0x0B	; 11

	Drive = drv;

	return FR_OK;
}
    313e:	08 95       	ret

00003140 <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    3140:	0f 93       	push	r16
    3142:	1f 93       	push	r17
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	a4 97       	sbiw	r28, 0x24	; 36
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	9c a3       	lds	r25, 0x5c
    315a:	8b a3       	lds	r24, 0x5b
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    315c:	ce 01       	movw	r24, r28
    315e:	83 96       	adiw	r24, 0x23	; 35
    3160:	be 01       	movw	r22, r28
    3162:	6f 5f       	subi	r22, 0xFF	; 255
    3164:	7f 4f       	sbci	r23, 0xFF	; 255
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
	if (res == FR_OK) {
    316c:	88 23       	and	r24, r24
    316e:	c9 f5       	brne	.+114    	; 0x31e2 <f_chdir+0xa2>
		INIT_BUF(dj);
    3170:	ce 01       	movw	r24, r28
    3172:	47 96       	adiw	r24, 0x17	; 23
    3174:	9e 8b       	std	Y+22, r25	; 0x16
    3176:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the path */
    3178:	6b a1       	lds	r22, 0x4b
    317a:	7c a1       	lds	r23, 0x4c
    317c:	ce 01       	movw	r24, r28
    317e:	01 96       	adiw	r24, 0x01	; 1
    3180:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    3184:	88 23       	and	r24, r24
    3186:	51 f5       	brne	.+84     	; 0x31dc <f_chdir+0x9c>
			dir = dj.dir;					/* Pointer to the entry */
    3188:	eb 89       	ldd	r30, Y+19	; 0x13
    318a:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {
    318c:	30 97       	sbiw	r30, 0x00	; 0
    318e:	59 f4       	brne	.+22     	; 0x31a6 <f_chdir+0x66>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    3190:	e9 81       	ldd	r30, Y+1	; 0x01
    3192:	fa 81       	ldd	r31, Y+2	; 0x02
    3194:	4f 81       	ldd	r20, Y+7	; 0x07
    3196:	58 85       	ldd	r21, Y+8	; 0x08
    3198:	69 85       	ldd	r22, Y+9	; 0x09
    319a:	7a 85       	ldd	r23, Y+10	; 0x0a
    319c:	46 8b       	std	Z+22, r20	; 0x16
    319e:	57 8b       	std	Z+23, r21	; 0x17
    31a0:	60 8f       	std	Z+24, r22	; 0x18
    31a2:	71 8f       	std	Z+25, r23	; 0x19
    31a4:	1e c0       	rjmp	.+60     	; 0x31e2 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    31a6:	93 85       	ldd	r25, Z+11	; 0x0b
    31a8:	94 ff       	sbrs	r25, 4
    31aa:	26 c0       	rjmp	.+76     	; 0x31f8 <f_chdir+0xb8>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    31ac:	a9 81       	ldd	r26, Y+1	; 0x01
    31ae:	ba 81       	ldd	r27, Y+2	; 0x02
    31b0:	44 89       	ldd	r20, Z+20	; 0x14
    31b2:	55 89       	ldd	r21, Z+21	; 0x15
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	70 e0       	ldi	r23, 0x00	; 0
    31b8:	ba 01       	movw	r22, r20
    31ba:	55 27       	eor	r21, r21
    31bc:	44 27       	eor	r20, r20
    31be:	02 8d       	ldd	r16, Z+26	; 0x1a
    31c0:	13 8d       	ldd	r17, Z+27	; 0x1b
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 2b       	or	r20, r16
    31c8:	51 2b       	or	r21, r17
    31ca:	62 2b       	or	r22, r18
    31cc:	73 2b       	or	r23, r19
    31ce:	56 96       	adiw	r26, 0x16	; 22
    31d0:	4d 93       	st	X+, r20
    31d2:	5d 93       	st	X+, r21
    31d4:	6d 93       	st	X+, r22
    31d6:	7c 93       	st	X, r23
    31d8:	59 97       	sbiw	r26, 0x19	; 25
    31da:	03 c0       	rjmp	.+6      	; 0x31e2 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    31dc:	84 30       	cpi	r24, 0x04	; 4
    31de:	09 f4       	brne	.+2      	; 0x31e2 <f_chdir+0xa2>
    31e0:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    31e2:	a4 96       	adiw	r28, 0x24	; 36
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	df 91       	pop	r29
    31f0:	cf 91       	pop	r28
    31f2:	1f 91       	pop	r17
    31f4:	0f 91       	pop	r16
    31f6:	08 95       	ret
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    31f8:	85 e0       	ldi	r24, 0x05	; 5
    31fa:	f3 cf       	rjmp	.-26     	; 0x31e2 <f_chdir+0xa2>

000031fc <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    31fc:	2f 92       	push	r2
    31fe:	3f 92       	push	r3
    3200:	4f 92       	push	r4
    3202:	5f 92       	push	r5
    3204:	6f 92       	push	r6
    3206:	7f 92       	push	r7
    3208:	8f 92       	push	r8
    320a:	9f 92       	push	r9
    320c:	af 92       	push	r10
    320e:	bf 92       	push	r11
    3210:	cf 92       	push	r12
    3212:	df 92       	push	r13
    3214:	ef 92       	push	r14
    3216:	ff 92       	push	r15
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	00 d0       	rcall	.+0      	; 0x3220 <f_lseek+0x24>
    3220:	00 d0       	rcall	.+0      	; 0x3222 <f_lseek+0x26>
    3222:	00 d0       	rcall	.+0      	; 0x3224 <f_lseek+0x28>
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	9e 83       	std	Y+6, r25	; 0x06
    322a:	8d 83       	std	Y+5, r24	; 0x05
    322c:	6a 01       	movw	r12, r20
    322e:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3230:	dc 01       	movw	r26, r24
    3232:	12 96       	adiw	r26, 0x02	; 2
    3234:	6d 91       	ld	r22, X+
    3236:	7c 91       	ld	r23, X
    3238:	13 97       	sbiw	r26, 0x03	; 3
    323a:	8d 91       	ld	r24, X+
    323c:	9c 91       	ld	r25, X
    323e:	0e 94 a2 06 	call	0xd44	; 0xd44 <validate>
    3242:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3244:	88 23       	and	r24, r24
    3246:	09 f0       	breq	.+2      	; 0x324a <f_lseek+0x4e>
    3248:	a5 c1       	rjmp	.+842    	; 0x3594 <f_lseek+0x398>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    324a:	ed 81       	ldd	r30, Y+5	; 0x05
    324c:	fe 81       	ldd	r31, Y+6	; 0x06
    324e:	24 81       	ldd	r18, Z+4	; 0x04
    3250:	22 23       	and	r18, r18
    3252:	0c f4       	brge	.+2      	; 0x3256 <f_lseek+0x5a>
    3254:	9e c1       	rjmp	.+828    	; 0x3592 <f_lseek+0x396>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3256:	82 85       	ldd	r24, Z+10	; 0x0a
    3258:	93 85       	ldd	r25, Z+11	; 0x0b
    325a:	a4 85       	ldd	r26, Z+12	; 0x0c
    325c:	b5 85       	ldd	r27, Z+13	; 0x0d
    325e:	8c 15       	cp	r24, r12
    3260:	9d 05       	cpc	r25, r13
    3262:	ae 05       	cpc	r26, r14
    3264:	bf 05       	cpc	r27, r15
    3266:	20 f4       	brcc	.+8      	; 0x3270 <f_lseek+0x74>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    3268:	21 fd       	sbrc	r18, 1
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <f_lseek+0x74>
#endif
			) ofs = fp->fsize;
    326c:	6c 01       	movw	r12, r24
    326e:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    3270:	ad 81       	ldd	r26, Y+5	; 0x05
    3272:	be 81       	ldd	r27, Y+6	; 0x06
    3274:	16 96       	adiw	r26, 0x06	; 6
    3276:	4d 91       	ld	r20, X+
    3278:	5d 91       	ld	r21, X+
    327a:	6d 91       	ld	r22, X+
    327c:	7c 91       	ld	r23, X
    327e:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    3280:	fd 01       	movw	r30, r26
    3282:	16 82       	std	Z+6, r1	; 0x06
    3284:	17 82       	std	Z+7, r1	; 0x07
    3286:	10 86       	std	Z+8, r1	; 0x08
    3288:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    328a:	c1 14       	cp	r12, r1
    328c:	d1 04       	cpc	r13, r1
    328e:	e1 04       	cpc	r14, r1
    3290:	f1 04       	cpc	r15, r1
    3292:	09 f4       	brne	.+2      	; 0x3296 <f_lseek+0x9a>
    3294:	7f c1       	rjmp	.+766    	; 0x3594 <f_lseek+0x398>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3296:	20 80       	ld	r2, Z
    3298:	31 80       	ldd	r3, Z+1	; 0x01
    329a:	d1 01       	movw	r26, r2
    329c:	12 96       	adiw	r26, 0x02	; 2
    329e:	8c 91       	ld	r24, X
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	4c 01       	movw	r8, r24
    32a8:	5d 01       	movw	r10, r26
    32aa:	07 2e       	mov	r0, r23
    32ac:	79 e0       	ldi	r23, 0x09	; 9
    32ae:	88 0c       	add	r8, r8
    32b0:	99 1c       	adc	r9, r9
    32b2:	aa 1c       	adc	r10, r10
    32b4:	bb 1c       	adc	r11, r11
    32b6:	7a 95       	dec	r23
    32b8:	d1 f7       	brne	.-12     	; 0x32ae <f_lseek+0xb2>
    32ba:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    32bc:	41 15       	cp	r20, r1
    32be:	51 05       	cpc	r21, r1
    32c0:	61 05       	cpc	r22, r1
    32c2:	71 05       	cpc	r23, r1
    32c4:	f1 f1       	breq	.+124    	; 0x3342 <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    32c6:	2a 01       	movw	r4, r20
    32c8:	3b 01       	movw	r6, r22
    32ca:	08 94       	sec
    32cc:	41 08       	sbc	r4, r1
    32ce:	51 08       	sbc	r5, r1
    32d0:	61 08       	sbc	r6, r1
    32d2:	71 08       	sbc	r7, r1
    32d4:	c7 01       	movw	r24, r14
    32d6:	b6 01       	movw	r22, r12
    32d8:	61 50       	subi	r22, 0x01	; 1
    32da:	70 40       	sbci	r23, 0x00	; 0
    32dc:	80 40       	sbci	r24, 0x00	; 0
    32de:	90 40       	sbci	r25, 0x00	; 0
    32e0:	a5 01       	movw	r20, r10
    32e2:	94 01       	movw	r18, r8
    32e4:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>
    32e8:	29 83       	std	Y+1, r18	; 0x01
    32ea:	3a 83       	std	Y+2, r19	; 0x02
    32ec:	4b 83       	std	Y+3, r20	; 0x03
    32ee:	5c 83       	std	Y+4, r21	; 0x04
    32f0:	c3 01       	movw	r24, r6
    32f2:	b2 01       	movw	r22, r4
    32f4:	a5 01       	movw	r20, r10
    32f6:	94 01       	movw	r18, r8
    32f8:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3300:	ab 81       	ldd	r26, Y+3	; 0x03
    3302:	bc 81       	ldd	r27, Y+4	; 0x04
    3304:	82 17       	cp	r24, r18
    3306:	93 07       	cpc	r25, r19
    3308:	a4 07       	cpc	r26, r20
    330a:	b5 07       	cpc	r27, r21
    330c:	d0 f0       	brcs	.+52     	; 0x3342 <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    330e:	88 27       	eor	r24, r24
    3310:	99 27       	eor	r25, r25
    3312:	dc 01       	movw	r26, r24
    3314:	88 19       	sub	r24, r8
    3316:	99 09       	sbc	r25, r9
    3318:	aa 09       	sbc	r26, r10
    331a:	bb 09       	sbc	r27, r11
    331c:	84 21       	and	r24, r4
    331e:	95 21       	and	r25, r5
    3320:	a6 21       	and	r26, r6
    3322:	b7 21       	and	r27, r7
    3324:	ed 81       	ldd	r30, Y+5	; 0x05
    3326:	fe 81       	ldd	r31, Y+6	; 0x06
    3328:	86 83       	std	Z+6, r24	; 0x06
    332a:	97 83       	std	Z+7, r25	; 0x07
    332c:	a0 87       	std	Z+8, r26	; 0x08
    332e:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    3330:	c8 1a       	sub	r12, r24
    3332:	d9 0a       	sbc	r13, r25
    3334:	ea 0a       	sbc	r14, r26
    3336:	fb 0a       	sbc	r15, r27
				clst = fp->curr_clust;
    3338:	42 89       	ldd	r20, Z+18	; 0x12
    333a:	53 89       	ldd	r21, Z+19	; 0x13
    333c:	64 89       	ldd	r22, Z+20	; 0x14
    333e:	75 89       	ldd	r23, Z+21	; 0x15
    3340:	42 c0       	rjmp	.+132    	; 0x33c6 <f_lseek+0x1ca>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    3342:	ad 81       	ldd	r26, Y+5	; 0x05
    3344:	be 81       	ldd	r27, Y+6	; 0x06
    3346:	1e 96       	adiw	r26, 0x0e	; 14
    3348:	4d 91       	ld	r20, X+
    334a:	5d 91       	ld	r21, X+
    334c:	6d 91       	ld	r22, X+
    334e:	7c 91       	ld	r23, X
    3350:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3352:	41 15       	cp	r20, r1
    3354:	51 05       	cpc	r21, r1
    3356:	61 05       	cpc	r22, r1
    3358:	71 05       	cpc	r23, r1
    335a:	69 f5       	brne	.+90     	; 0x33b6 <f_lseek+0x1ba>
					clst = create_chain(fp->fs, 0);
    335c:	c1 01       	movw	r24, r2
    335e:	40 e0       	ldi	r20, 0x00	; 0
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	ba 01       	movw	r22, r20
    3364:	0e 94 a7 0c 	call	0x194e	; 0x194e <create_chain>
    3368:	ab 01       	movw	r20, r22
    336a:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    336c:	41 30       	cpi	r20, 0x01	; 1
    336e:	51 05       	cpc	r21, r1
    3370:	61 05       	cpc	r22, r1
    3372:	71 05       	cpc	r23, r1
    3374:	39 f4       	brne	.+14     	; 0x3384 <f_lseek+0x188>
    3376:	ed 81       	ldd	r30, Y+5	; 0x05
    3378:	fe 81       	ldd	r31, Y+6	; 0x06
    337a:	84 81       	ldd	r24, Z+4	; 0x04
    337c:	80 68       	ori	r24, 0x80	; 128
    337e:	84 83       	std	Z+4, r24	; 0x04
    3380:	12 e0       	ldi	r17, 0x02	; 2
    3382:	08 c1       	rjmp	.+528    	; 0x3594 <f_lseek+0x398>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3384:	4f 3f       	cpi	r20, 0xFF	; 255
    3386:	ff ef       	ldi	r31, 0xFF	; 255
    3388:	5f 07       	cpc	r21, r31
    338a:	ff ef       	ldi	r31, 0xFF	; 255
    338c:	6f 07       	cpc	r22, r31
    338e:	ff ef       	ldi	r31, 0xFF	; 255
    3390:	7f 07       	cpc	r23, r31
    3392:	59 f4       	brne	.+22     	; 0x33aa <f_lseek+0x1ae>
    3394:	ad 81       	ldd	r26, Y+5	; 0x05
    3396:	be 81       	ldd	r27, Y+6	; 0x06
    3398:	14 96       	adiw	r26, 0x04	; 4
    339a:	8c 91       	ld	r24, X
    339c:	14 97       	sbiw	r26, 0x04	; 4
    339e:	80 68       	ori	r24, 0x80	; 128
    33a0:	14 96       	adiw	r26, 0x04	; 4
    33a2:	8c 93       	st	X, r24
    33a4:	14 97       	sbiw	r26, 0x04	; 4
    33a6:	11 e0       	ldi	r17, 0x01	; 1
    33a8:	f5 c0       	rjmp	.+490    	; 0x3594 <f_lseek+0x398>
					fp->org_clust = clst;
    33aa:	ed 81       	ldd	r30, Y+5	; 0x05
    33ac:	fe 81       	ldd	r31, Y+6	; 0x06
    33ae:	46 87       	std	Z+14, r20	; 0x0e
    33b0:	57 87       	std	Z+15, r21	; 0x0f
    33b2:	60 8b       	std	Z+16, r22	; 0x10
    33b4:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->curr_clust = clst;
    33b6:	ad 81       	ldd	r26, Y+5	; 0x05
    33b8:	be 81       	ldd	r27, Y+6	; 0x06
    33ba:	52 96       	adiw	r26, 0x12	; 18
    33bc:	4d 93       	st	X+, r20
    33be:	5d 93       	st	X+, r21
    33c0:	6d 93       	st	X+, r22
    33c2:	7c 93       	st	X, r23
    33c4:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    33c6:	41 15       	cp	r20, r1
    33c8:	51 05       	cpc	r21, r1
    33ca:	61 05       	cpc	r22, r1
    33cc:	71 05       	cpc	r23, r1
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <f_lseek+0x1d6>
    33d0:	a8 c0       	rjmp	.+336    	; 0x3522 <f_lseek+0x326>
				while (ofs > bcs) {						/* Cluster following loop */
    33d2:	8c 14       	cp	r8, r12
    33d4:	9d 04       	cpc	r9, r13
    33d6:	ae 04       	cpc	r10, r14
    33d8:	bf 04       	cpc	r11, r15
    33da:	08 f0       	brcs	.+2      	; 0x33de <f_lseek+0x1e2>
    33dc:	68 c0       	rjmp	.+208    	; 0x34ae <f_lseek+0x2b2>
    33de:	4d 80       	ldd	r4, Y+5	; 0x05
    33e0:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    33e2:	f2 01       	movw	r30, r4
    33e4:	84 81       	ldd	r24, Z+4	; 0x04
    33e6:	81 ff       	sbrs	r24, 1
    33e8:	0c c0       	rjmp	.+24     	; 0x3402 <f_lseek+0x206>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    33ea:	80 81       	ld	r24, Z
    33ec:	91 81       	ldd	r25, Z+1	; 0x01
    33ee:	0e 94 a7 0c 	call	0x194e	; 0x194e <create_chain>
    33f2:	ab 01       	movw	r20, r22
    33f4:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    33f6:	41 15       	cp	r20, r1
    33f8:	51 05       	cpc	r21, r1
    33fa:	61 05       	cpc	r22, r1
    33fc:	71 05       	cpc	r23, r1
    33fe:	39 f4       	brne	.+14     	; 0x340e <f_lseek+0x212>
    3400:	52 c0       	rjmp	.+164    	; 0x34a6 <f_lseek+0x2aa>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    340a:	ab 01       	movw	r20, r22
    340c:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    340e:	4f 3f       	cpi	r20, 0xFF	; 255
    3410:	bf ef       	ldi	r27, 0xFF	; 255
    3412:	5b 07       	cpc	r21, r27
    3414:	bf ef       	ldi	r27, 0xFF	; 255
    3416:	6b 07       	cpc	r22, r27
    3418:	bf ef       	ldi	r27, 0xFF	; 255
    341a:	7b 07       	cpc	r23, r27
    341c:	41 f4       	brne	.+16     	; 0x342e <f_lseek+0x232>
    341e:	5e 82       	std	Y+6, r5	; 0x06
    3420:	4d 82       	std	Y+5, r4	; 0x05
    3422:	f2 01       	movw	r30, r4
    3424:	84 81       	ldd	r24, Z+4	; 0x04
    3426:	80 68       	ori	r24, 0x80	; 128
    3428:	84 83       	std	Z+4, r24	; 0x04
    342a:	11 e0       	ldi	r17, 0x01	; 1
    342c:	b3 c0       	rjmp	.+358    	; 0x3594 <f_lseek+0x398>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    342e:	42 30       	cpi	r20, 0x02	; 2
    3430:	51 05       	cpc	r21, r1
    3432:	61 05       	cpc	r22, r1
    3434:	71 05       	cpc	r23, r1
    3436:	60 f0       	brcs	.+24     	; 0x3450 <f_lseek+0x254>
    3438:	d2 01       	movw	r26, r4
    343a:	ed 91       	ld	r30, X+
    343c:	fc 91       	ld	r31, X
    343e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3440:	93 8d       	ldd	r25, Z+27	; 0x1b
    3442:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3444:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3446:	48 17       	cp	r20, r24
    3448:	59 07       	cpc	r21, r25
    344a:	6a 07       	cpc	r22, r26
    344c:	7b 07       	cpc	r23, r27
    344e:	40 f0       	brcs	.+16     	; 0x3460 <f_lseek+0x264>
    3450:	5e 82       	std	Y+6, r5	; 0x06
    3452:	4d 82       	std	Y+5, r4	; 0x05
    3454:	f2 01       	movw	r30, r4
    3456:	84 81       	ldd	r24, Z+4	; 0x04
    3458:	80 68       	ori	r24, 0x80	; 128
    345a:	84 83       	std	Z+4, r24	; 0x04
    345c:	12 e0       	ldi	r17, 0x02	; 2
    345e:	9a c0       	rjmp	.+308    	; 0x3594 <f_lseek+0x398>
					fp->curr_clust = clst;
    3460:	d2 01       	movw	r26, r4
    3462:	52 96       	adiw	r26, 0x12	; 18
    3464:	4d 93       	st	X+, r20
    3466:	5d 93       	st	X+, r21
    3468:	6d 93       	st	X+, r22
    346a:	7c 93       	st	X, r23
    346c:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    346e:	16 96       	adiw	r26, 0x06	; 6
    3470:	8d 91       	ld	r24, X+
    3472:	9d 91       	ld	r25, X+
    3474:	0d 90       	ld	r0, X+
    3476:	bc 91       	ld	r27, X
    3478:	a0 2d       	mov	r26, r0
    347a:	88 0d       	add	r24, r8
    347c:	99 1d       	adc	r25, r9
    347e:	aa 1d       	adc	r26, r10
    3480:	bb 1d       	adc	r27, r11
    3482:	f2 01       	movw	r30, r4
    3484:	86 83       	std	Z+6, r24	; 0x06
    3486:	97 83       	std	Z+7, r25	; 0x07
    3488:	a0 87       	std	Z+8, r26	; 0x08
    348a:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    348c:	c8 18       	sub	r12, r8
    348e:	d9 08       	sbc	r13, r9
    3490:	ea 08       	sbc	r14, r10
    3492:	fb 08       	sbc	r15, r11
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    3494:	8c 14       	cp	r8, r12
    3496:	9d 04       	cpc	r9, r13
    3498:	ae 04       	cpc	r10, r14
    349a:	bf 04       	cpc	r11, r15
    349c:	08 f4       	brcc	.+2      	; 0x34a0 <f_lseek+0x2a4>
    349e:	a1 cf       	rjmp	.-190    	; 0x33e2 <f_lseek+0x1e6>
    34a0:	5e 82       	std	Y+6, r5	; 0x06
    34a2:	4d 82       	std	Y+5, r4	; 0x05
    34a4:	04 c0       	rjmp	.+8      	; 0x34ae <f_lseek+0x2b2>
    34a6:	5e 82       	std	Y+6, r5	; 0x06
    34a8:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    34aa:	75 01       	movw	r14, r10
    34ac:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    34ae:	ed 81       	ldd	r30, Y+5	; 0x05
    34b0:	fe 81       	ldd	r31, Y+6	; 0x06
    34b2:	86 81       	ldd	r24, Z+6	; 0x06
    34b4:	97 81       	ldd	r25, Z+7	; 0x07
    34b6:	a0 85       	ldd	r26, Z+8	; 0x08
    34b8:	b1 85       	ldd	r27, Z+9	; 0x09
    34ba:	8c 0d       	add	r24, r12
    34bc:	9d 1d       	adc	r25, r13
    34be:	ae 1d       	adc	r26, r14
    34c0:	bf 1d       	adc	r27, r15
    34c2:	86 83       	std	Z+6, r24	; 0x06
    34c4:	97 83       	std	Z+7, r25	; 0x07
    34c6:	a0 87       	std	Z+8, r26	; 0x08
    34c8:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    34ca:	d7 01       	movw	r26, r14
    34cc:	c6 01       	movw	r24, r12
    34ce:	91 70       	andi	r25, 0x01	; 1
    34d0:	a0 70       	andi	r26, 0x00	; 0
    34d2:	b0 70       	andi	r27, 0x00	; 0
    34d4:	00 97       	sbiw	r24, 0x00	; 0
    34d6:	a1 05       	cpc	r26, r1
    34d8:	b1 05       	cpc	r27, r1
    34da:	39 f1       	breq	.+78     	; 0x352a <f_lseek+0x32e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    34dc:	80 81       	ld	r24, Z
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	a1 05       	cpc	r26, r1
    34ec:	b1 05       	cpc	r27, r1
    34ee:	59 f4       	brne	.+22     	; 0x3506 <f_lseek+0x30a>
    34f0:	ad 81       	ldd	r26, Y+5	; 0x05
    34f2:	be 81       	ldd	r27, Y+6	; 0x06
    34f4:	14 96       	adiw	r26, 0x04	; 4
    34f6:	8c 91       	ld	r24, X
    34f8:	14 97       	sbiw	r26, 0x04	; 4
    34fa:	80 68       	ori	r24, 0x80	; 128
    34fc:	14 96       	adiw	r26, 0x04	; 4
    34fe:	8c 93       	st	X, r24
    3500:	14 97       	sbiw	r26, 0x04	; 4
    3502:	12 e0       	ldi	r17, 0x02	; 2
    3504:	47 c0       	rjmp	.+142    	; 0x3594 <f_lseek+0x398>
					nsect += ofs / SS(fp->fs);
    3506:	0b 2e       	mov	r0, r27
    3508:	b9 e0       	ldi	r27, 0x09	; 9
    350a:	f6 94       	lsr	r15
    350c:	e7 94       	ror	r14
    350e:	d7 94       	ror	r13
    3510:	c7 94       	ror	r12
    3512:	ba 95       	dec	r27
    3514:	d1 f7       	brne	.-12     	; 0x350a <f_lseek+0x30e>
    3516:	b0 2d       	mov	r27, r0
    3518:	c8 0e       	add	r12, r24
    351a:	d9 1e       	adc	r13, r25
    351c:	ea 1e       	adc	r14, r26
    351e:	fb 1e       	adc	r15, r27
    3520:	07 c0       	rjmp	.+14     	; 0x3530 <f_lseek+0x334>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    3522:	cc 24       	eor	r12, r12
    3524:	dd 24       	eor	r13, r13
    3526:	76 01       	movw	r14, r12
    3528:	03 c0       	rjmp	.+6      	; 0x3530 <f_lseek+0x334>
    352a:	cc 24       	eor	r12, r12
    352c:	dd 24       	eor	r13, r13
    352e:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3530:	ed 81       	ldd	r30, Y+5	; 0x05
    3532:	fe 81       	ldd	r31, Y+6	; 0x06
    3534:	86 81       	ldd	r24, Z+6	; 0x06
    3536:	97 81       	ldd	r25, Z+7	; 0x07
    3538:	a0 85       	ldd	r26, Z+8	; 0x08
    353a:	b1 85       	ldd	r27, Z+9	; 0x09
    353c:	91 70       	andi	r25, 0x01	; 1
    353e:	a0 70       	andi	r26, 0x00	; 0
    3540:	b0 70       	andi	r27, 0x00	; 0
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	a1 05       	cpc	r26, r1
    3546:	b1 05       	cpc	r27, r1
    3548:	69 f0       	breq	.+26     	; 0x3564 <f_lseek+0x368>
    354a:	86 89       	ldd	r24, Z+22	; 0x16
    354c:	97 89       	ldd	r25, Z+23	; 0x17
    354e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3550:	b1 8d       	ldd	r27, Z+25	; 0x19
    3552:	8c 15       	cp	r24, r12
    3554:	9d 05       	cpc	r25, r13
    3556:	ae 05       	cpc	r26, r14
    3558:	bf 05       	cpc	r27, r15
    355a:	21 f0       	breq	.+8      	; 0x3564 <f_lseek+0x368>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    355c:	c6 8a       	std	Z+22, r12	; 0x16
    355e:	d7 8a       	std	Z+23, r13	; 0x17
    3560:	e0 8e       	std	Z+24, r14	; 0x18
    3562:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3564:	ed 81       	ldd	r30, Y+5	; 0x05
    3566:	fe 81       	ldd	r31, Y+6	; 0x06
    3568:	86 81       	ldd	r24, Z+6	; 0x06
    356a:	97 81       	ldd	r25, Z+7	; 0x07
    356c:	a0 85       	ldd	r26, Z+8	; 0x08
    356e:	b1 85       	ldd	r27, Z+9	; 0x09
    3570:	42 85       	ldd	r20, Z+10	; 0x0a
    3572:	53 85       	ldd	r21, Z+11	; 0x0b
    3574:	64 85       	ldd	r22, Z+12	; 0x0c
    3576:	75 85       	ldd	r23, Z+13	; 0x0d
    3578:	48 17       	cp	r20, r24
    357a:	59 07       	cpc	r21, r25
    357c:	6a 07       	cpc	r22, r26
    357e:	7b 07       	cpc	r23, r27
    3580:	48 f4       	brcc	.+18     	; 0x3594 <f_lseek+0x398>
			fp->fsize = fp->fptr;
    3582:	82 87       	std	Z+10, r24	; 0x0a
    3584:	93 87       	std	Z+11, r25	; 0x0b
    3586:	a4 87       	std	Z+12, r26	; 0x0c
    3588:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    358a:	84 81       	ldd	r24, Z+4	; 0x04
    358c:	80 62       	ori	r24, 0x20	; 32
    358e:	84 83       	std	Z+4, r24	; 0x04
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <f_lseek+0x398>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3592:	12 e0       	ldi	r17, 0x02	; 2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    3594:	81 2f       	mov	r24, r17
    3596:	26 96       	adiw	r28, 0x06	; 6
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	df 90       	pop	r13
    35ae:	cf 90       	pop	r12
    35b0:	bf 90       	pop	r11
    35b2:	af 90       	pop	r10
    35b4:	9f 90       	pop	r9
    35b6:	8f 90       	pop	r8
    35b8:	7f 90       	pop	r7
    35ba:	6f 90       	pop	r6
    35bc:	5f 90       	pop	r5
    35be:	4f 90       	pop	r4
    35c0:	3f 90       	pop	r3
    35c2:	2f 90       	pop	r2
    35c4:	08 95       	ret

000035c6 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
    35d2:	2e 97       	sbiw	r28, 0x0e	; 14
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	8c 01       	movw	r16, r24
    35e0:	7e 87       	std	Y+14, r23	; 0x0e
    35e2:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    35e4:	ce 01       	movw	r24, r28
    35e6:	0d 96       	adiw	r24, 0x0d	; 13
    35e8:	b8 01       	movw	r22, r16
    35ea:	40 e0       	ldi	r20, 0x00	; 0
    35ec:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
	if (res == FR_OK) {
    35f0:	88 23       	and	r24, r24
    35f2:	09 f0       	breq	.+2      	; 0x35f6 <f_opendir+0x30>
    35f4:	41 c0       	rjmp	.+130    	; 0x3678 <f_opendir+0xb2>
		INIT_BUF(*dj);
    35f6:	ce 01       	movw	r24, r28
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	d8 01       	movw	r26, r16
    35fc:	55 96       	adiw	r26, 0x15	; 21
    35fe:	9c 93       	st	X, r25
    3600:	8e 93       	st	-X, r24
    3602:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3604:	6d 85       	ldd	r22, Y+13	; 0x0d
    3606:	7e 85       	ldd	r23, Y+14	; 0x0e
    3608:	c8 01       	movw	r24, r16
    360a:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    360e:	88 23       	and	r24, r24
    3610:	69 f5       	brne	.+90     	; 0x366c <f_opendir+0xa6>
			dir = dj->dir;
    3612:	d8 01       	movw	r26, r16
    3614:	52 96       	adiw	r26, 0x12	; 18
    3616:	ed 91       	ld	r30, X+
    3618:	fc 91       	ld	r31, X
    361a:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the current dir */
    361c:	30 97       	sbiw	r30, 0x00	; 0
    361e:	b9 f0       	breq	.+46     	; 0x364e <f_opendir+0x88>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3620:	83 85       	ldd	r24, Z+11	; 0x0b
    3622:	84 ff       	sbrs	r24, 4
    3624:	26 c0       	rjmp	.+76     	; 0x3672 <f_opendir+0xac>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3626:	44 89       	ldd	r20, Z+20	; 0x14
    3628:	55 89       	ldd	r21, Z+21	; 0x15
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	70 e0       	ldi	r23, 0x00	; 0
    362e:	ba 01       	movw	r22, r20
    3630:	55 27       	eor	r21, r21
    3632:	44 27       	eor	r20, r20
    3634:	82 8d       	ldd	r24, Z+26	; 0x1a
    3636:	93 8d       	ldd	r25, Z+27	; 0x1b
    3638:	a0 e0       	ldi	r26, 0x00	; 0
    363a:	b0 e0       	ldi	r27, 0x00	; 0
    363c:	48 2b       	or	r20, r24
    363e:	59 2b       	or	r21, r25
    3640:	6a 2b       	or	r22, r26
    3642:	7b 2b       	or	r23, r27
    3644:	f8 01       	movw	r30, r16
    3646:	46 83       	std	Z+6, r20	; 0x06
    3648:	57 83       	std	Z+7, r21	; 0x07
    364a:	60 87       	std	Z+8, r22	; 0x08
    364c:	71 87       	std	Z+9, r23	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    364e:	d8 01       	movw	r26, r16
    3650:	ed 91       	ld	r30, X+
    3652:	fc 91       	ld	r31, X
    3654:	11 97       	sbiw	r26, 0x01	; 1
    3656:	86 81       	ldd	r24, Z+6	; 0x06
    3658:	97 81       	ldd	r25, Z+7	; 0x07
    365a:	13 96       	adiw	r26, 0x03	; 3
    365c:	9c 93       	st	X, r25
    365e:	8e 93       	st	-X, r24
    3660:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    3662:	c8 01       	movw	r24, r16
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	70 e0       	ldi	r23, 0x00	; 0
    3668:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    366c:	84 30       	cpi	r24, 0x04	; 4
    366e:	19 f0       	breq	.+6      	; 0x3676 <f_opendir+0xb0>
    3670:	03 c0       	rjmp	.+6      	; 0x3678 <f_opendir+0xb2>
			dir = dj->dir;
			if (dir) {							/* It is not the current dir */
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    3672:	85 e0       	ldi	r24, 0x05	; 5
    3674:	01 c0       	rjmp	.+2      	; 0x3678 <f_opendir+0xb2>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3676:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3678:	2e 96       	adiw	r28, 0x0e	; 14
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	f8 94       	cli
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	cd bf       	out	0x3d, r28	; 61
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	08 95       	ret

0000368e <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    368e:	cf 92       	push	r12
    3690:	df 92       	push	r13
    3692:	ef 92       	push	r14
    3694:	ff 92       	push	r15
    3696:	1f 93       	push	r17
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	2c 97       	sbiw	r28, 0x0c	; 12
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	7c 01       	movw	r14, r24
    36ae:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    36b0:	fc 01       	movw	r30, r24
    36b2:	62 81       	ldd	r22, Z+2	; 0x02
    36b4:	73 81       	ldd	r23, Z+3	; 0x03
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	0e 94 a2 06 	call	0xd44	; 0xd44 <validate>
    36be:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    36c0:	88 23       	and	r24, r24
    36c2:	81 f5       	brne	.+96     	; 0x3724 <f_readdir+0x96>
		if (!fno) {
    36c4:	c1 14       	cp	r12, r1
    36c6:	d1 04       	cpc	r13, r1
    36c8:	39 f4       	brne	.+14     	; 0x36d8 <f_readdir+0x4a>
			res = dir_sdi(dj, 0);
    36ca:	c7 01       	movw	r24, r14
    36cc:	60 e0       	ldi	r22, 0x00	; 0
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dir_sdi>
    36d4:	18 2f       	mov	r17, r24
    36d6:	26 c0       	rjmp	.+76     	; 0x3724 <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    36d8:	ce 01       	movw	r24, r28
    36da:	01 96       	adiw	r24, 0x01	; 1
    36dc:	f7 01       	movw	r30, r14
    36de:	95 8b       	std	Z+21, r25	; 0x15
    36e0:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);
    36e2:	c7 01       	movw	r24, r14
    36e4:	0e 94 c7 12 	call	0x258e	; 0x258e <dir_read>
			if (res == FR_NO_FILE) {
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	31 f4       	brne	.+12     	; 0x36f8 <f_readdir+0x6a>
				dj->sect = 0;
    36ec:	f7 01       	movw	r30, r14
    36ee:	16 86       	std	Z+14, r1	; 0x0e
    36f0:	17 86       	std	Z+15, r1	; 0x0f
    36f2:	10 8a       	std	Z+16, r1	; 0x10
    36f4:	11 8a       	std	Z+17, r1	; 0x11
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    36f8:	88 23       	and	r24, r24
    36fa:	89 f4       	brne	.+34     	; 0x371e <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    36fc:	c7 01       	movw	r24, r14
    36fe:	b6 01       	movw	r22, r12
    3700:	0e 94 40 06 	call	0xc80	; 0xc80 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    3704:	c7 01       	movw	r24, r14
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <dir_next>
				if (res == FR_NO_FILE) {
    370e:	84 30       	cpi	r24, 0x04	; 4
    3710:	41 f4       	brne	.+16     	; 0x3722 <f_readdir+0x94>
					dj->sect = 0;
    3712:	f7 01       	movw	r30, r14
    3714:	16 86       	std	Z+14, r1	; 0x0e
    3716:	17 86       	std	Z+15, r1	; 0x0f
    3718:	10 8a       	std	Z+16, r1	; 0x10
    371a:	11 8a       	std	Z+17, r1	; 0x11
    371c:	03 c0       	rjmp	.+6      	; 0x3724 <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);
    371e:	18 2f       	mov	r17, r24
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    3722:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3724:	81 2f       	mov	r24, r17
    3726:	2c 96       	adiw	r28, 0x0c	; 12
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	df 91       	pop	r29
    3734:	cf 91       	pop	r28
    3736:	1f 91       	pop	r17
    3738:	ff 90       	pop	r15
    373a:	ef 90       	pop	r14
    373c:	df 90       	pop	r13
    373e:	cf 90       	pop	r12
    3740:	08 95       	ret

00003742 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3742:	ef 92       	push	r14
    3744:	ff 92       	push	r15
    3746:	1f 93       	push	r17
    3748:	cf 93       	push	r28
    374a:	df 93       	push	r29
    374c:	cd b7       	in	r28, 0x3d	; 61
    374e:	de b7       	in	r29, 0x3e	; 62
    3750:	a4 97       	sbiw	r28, 0x24	; 36
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	de bf       	out	0x3e, r29	; 62
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	cd bf       	out	0x3d, r28	; 61
    375c:	9c a3       	lds	r25, 0x5c
    375e:	8b a3       	lds	r24, 0x5b
    3760:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3762:	ce 01       	movw	r24, r28
    3764:	83 96       	adiw	r24, 0x23	; 35
    3766:	be 01       	movw	r22, r28
    3768:	6f 5f       	subi	r22, 0xFF	; 255
    376a:	7f 4f       	sbci	r23, 0xFF	; 255
    376c:	40 e0       	ldi	r20, 0x00	; 0
    376e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
    3772:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3774:	88 23       	and	r24, r24
    3776:	c1 f4       	brne	.+48     	; 0x37a8 <f_stat+0x66>
		INIT_BUF(dj);
    3778:	ce 01       	movw	r24, r28
    377a:	47 96       	adiw	r24, 0x17	; 23
    377c:	9e 8b       	std	Y+22, r25	; 0x16
    377e:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    3780:	6b a1       	lds	r22, 0x4b
    3782:	7c a1       	lds	r23, 0x4c
    3784:	ce 01       	movw	r24, r28
    3786:	01 96       	adiw	r24, 0x01	; 1
    3788:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
    378c:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    378e:	88 23       	and	r24, r24
    3790:	59 f4       	brne	.+22     	; 0x37a8 <f_stat+0x66>
			if (dj.dir)		/* Found an object */
    3792:	8b 89       	ldd	r24, Y+19	; 0x13
    3794:	9c 89       	ldd	r25, Y+20	; 0x14
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	31 f0       	breq	.+12     	; 0x37a6 <f_stat+0x64>
				get_fileinfo(&dj, fno);
    379a:	ce 01       	movw	r24, r28
    379c:	01 96       	adiw	r24, 0x01	; 1
    379e:	b7 01       	movw	r22, r14
    37a0:	0e 94 40 06 	call	0xc80	; 0xc80 <get_fileinfo>
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <f_stat+0x66>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    37a6:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    37a8:	81 2f       	mov	r24, r17
    37aa:	a4 96       	adiw	r28, 0x24	; 36
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	1f 91       	pop	r17
    37bc:	ff 90       	pop	r15
    37be:	ef 90       	pop	r14
    37c0:	08 95       	ret

000037c2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    37c2:	2f 92       	push	r2
    37c4:	3f 92       	push	r3
    37c6:	4f 92       	push	r4
    37c8:	5f 92       	push	r5
    37ca:	6f 92       	push	r6
    37cc:	7f 92       	push	r7
    37ce:	8f 92       	push	r8
    37d0:	9f 92       	push	r9
    37d2:	af 92       	push	r10
    37d4:	bf 92       	push	r11
    37d6:	cf 92       	push	r12
    37d8:	df 92       	push	r13
    37da:	ef 92       	push	r14
    37dc:	ff 92       	push	r15
    37de:	0f 93       	push	r16
    37e0:	1f 93       	push	r17
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <f_getfree+0x26>
    37e8:	00 d0       	rcall	.+0      	; 0x37ea <f_getfree+0x28>
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	9a 83       	std	Y+2, r25	; 0x02
    37f0:	89 83       	std	Y+1, r24	; 0x01
    37f2:	7c 83       	std	Y+4, r23	; 0x04
    37f4:	6b 83       	std	Y+3, r22	; 0x03
    37f6:	3a 01       	movw	r6, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    37f8:	ce 01       	movw	r24, r28
    37fa:	01 96       	adiw	r24, 0x01	; 1
    37fc:	ba 01       	movw	r22, r20
    37fe:	40 e0       	ldi	r20, 0x00	; 0
    3800:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
    3804:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3806:	88 23       	and	r24, r24
    3808:	09 f0       	breq	.+2      	; 0x380c <f_getfree+0x4a>
    380a:	c9 c0       	rjmp	.+402    	; 0x399e <f_getfree+0x1dc>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    380c:	d3 01       	movw	r26, r6
    380e:	ed 91       	ld	r30, X+
    3810:	fc 91       	ld	r31, X
    3812:	86 85       	ldd	r24, Z+14	; 0x0e
    3814:	97 85       	ldd	r25, Z+15	; 0x0f
    3816:	a0 89       	ldd	r26, Z+16	; 0x10
    3818:	b1 89       	ldd	r27, Z+17	; 0x11
    381a:	c2 8c       	ldd	r12, Z+26	; 0x1a
    381c:	d3 8c       	ldd	r13, Z+27	; 0x1b
    381e:	e4 8c       	ldd	r14, Z+28	; 0x1c
    3820:	f5 8c       	ldd	r15, Z+29	; 0x1d
    3822:	b7 01       	movw	r22, r14
    3824:	a6 01       	movw	r20, r12
    3826:	42 50       	subi	r20, 0x02	; 2
    3828:	50 40       	sbci	r21, 0x00	; 0
    382a:	60 40       	sbci	r22, 0x00	; 0
    382c:	70 40       	sbci	r23, 0x00	; 0
    382e:	48 17       	cp	r20, r24
    3830:	59 07       	cpc	r21, r25
    3832:	6a 07       	cpc	r22, r26
    3834:	7b 07       	cpc	r23, r27
    3836:	38 f0       	brcs	.+14     	; 0x3846 <f_getfree+0x84>
			*nclst = (*fatfs)->free_clust;
    3838:	eb 81       	ldd	r30, Y+3	; 0x03
    383a:	fc 81       	ldd	r31, Y+4	; 0x04
    383c:	80 83       	st	Z, r24
    383e:	91 83       	std	Z+1, r25	; 0x01
    3840:	a2 83       	std	Z+2, r26	; 0x02
    3842:	b3 83       	std	Z+3, r27	; 0x03
    3844:	ac c0       	rjmp	.+344    	; 0x399e <f_getfree+0x1dc>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    3846:	00 81       	ld	r16, Z
			n = 0;
			if (fat == FS_FAT12) {
    3848:	01 30       	cpi	r16, 0x01	; 1
    384a:	09 f0       	breq	.+2      	; 0x384e <f_getfree+0x8c>
    384c:	3f c0       	rjmp	.+126    	; 0x38cc <f_getfree+0x10a>
    384e:	cc 24       	eor	r12, r12
    3850:	dd 24       	eor	r13, r13
    3852:	76 01       	movw	r14, r12
    3854:	68 94       	set
    3856:	c1 f8       	bld	r12, 1
    3858:	88 24       	eor	r8, r8
    385a:	99 24       	eor	r9, r9
    385c:	54 01       	movw	r10, r8
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    385e:	d3 01       	movw	r26, r6
    3860:	8d 91       	ld	r24, X+
    3862:	9c 91       	ld	r25, X
    3864:	b7 01       	movw	r22, r14
    3866:	a6 01       	movw	r20, r12
    3868:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3870:	8f 3f       	cpi	r24, 0xFF	; 255
    3872:	ef ef       	ldi	r30, 0xFF	; 255
    3874:	9e 07       	cpc	r25, r30
    3876:	ef ef       	ldi	r30, 0xFF	; 255
    3878:	ae 07       	cpc	r26, r30
    387a:	ef ef       	ldi	r30, 0xFF	; 255
    387c:	be 07       	cpc	r27, r30
    387e:	09 f4       	brne	.+2      	; 0x3882 <f_getfree+0xc0>
    3880:	74 c0       	rjmp	.+232    	; 0x396a <f_getfree+0x1a8>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3882:	81 30       	cpi	r24, 0x01	; 1
    3884:	91 05       	cpc	r25, r1
    3886:	a1 05       	cpc	r26, r1
    3888:	b1 05       	cpc	r27, r1
    388a:	09 f4       	brne	.+2      	; 0x388e <f_getfree+0xcc>
    388c:	70 c0       	rjmp	.+224    	; 0x396e <f_getfree+0x1ac>
					if (stat == 0) n++;
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	a1 05       	cpc	r26, r1
    3892:	b1 05       	cpc	r27, r1
    3894:	29 f4       	brne	.+10     	; 0x38a0 <f_getfree+0xde>
    3896:	08 94       	sec
    3898:	81 1c       	adc	r8, r1
    389a:	91 1c       	adc	r9, r1
    389c:	a1 1c       	adc	r10, r1
    389e:	b1 1c       	adc	r11, r1
				} while (++clst < (*fatfs)->n_fatent);
    38a0:	08 94       	sec
    38a2:	c1 1c       	adc	r12, r1
    38a4:	d1 1c       	adc	r13, r1
    38a6:	e1 1c       	adc	r14, r1
    38a8:	f1 1c       	adc	r15, r1
    38aa:	d3 01       	movw	r26, r6
    38ac:	ed 91       	ld	r30, X+
    38ae:	fc 91       	ld	r31, X
    38b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    38b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    38b4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    38b6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    38b8:	c8 16       	cp	r12, r24
    38ba:	d9 06       	cpc	r13, r25
    38bc:	ea 06       	cpc	r14, r26
    38be:	fb 06       	cpc	r15, r27
    38c0:	70 f2       	brcs	.-100    	; 0x385e <f_getfree+0x9c>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    38c2:	86 86       	std	Z+14, r8	; 0x0e
    38c4:	97 86       	std	Z+15, r9	; 0x0f
    38c6:	a0 8a       	std	Z+16, r10	; 0x10
    38c8:	b1 8a       	std	Z+17, r11	; 0x11
    38ca:	63 c0       	rjmp	.+198    	; 0x3992 <f_getfree+0x1d0>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    38cc:	22 a0       	lds	r18, 0x82
    38ce:	33 a0       	lds	r19, 0x83
    38d0:	44 a0       	lds	r20, 0x84
    38d2:	55 a0       	lds	r21, 0x85
				i = 0; p = 0;
    38d4:	e0 e0       	ldi	r30, 0x00	; 0
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
    38dc:	88 24       	eor	r8, r8
    38de:	99 24       	eor	r9, r9
    38e0:	54 01       	movw	r10, r8
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    38e2:	21 15       	cp	r18, r1
    38e4:	31 05       	cpc	r19, r1
    38e6:	a9 f4       	brne	.+42     	; 0x3912 <f_getfree+0x150>
						res = move_window(*fatfs, sect++);
    38e8:	f3 01       	movw	r30, r6
    38ea:	80 81       	ld	r24, Z
    38ec:	91 81       	ldd	r25, Z+1	; 0x01
    38ee:	b2 01       	movw	r22, r4
    38f0:	a1 01       	movw	r20, r2
    38f2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
						if (res != FR_OK) break;
    38f6:	88 23       	and	r24, r24
    38f8:	e1 f5       	brne	.+120    	; 0x3972 <f_getfree+0x1b0>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    38fa:	08 94       	sec
    38fc:	21 1c       	adc	r2, r1
    38fe:	31 1c       	adc	r3, r1
    3900:	41 1c       	adc	r4, r1
    3902:	51 1c       	adc	r5, r1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    3904:	d3 01       	movw	r26, r6
    3906:	ed 91       	ld	r30, X+
    3908:	fc 91       	ld	r31, X
    390a:	11 97       	sbiw	r26, 0x01	; 1
    390c:	f2 96       	adiw	r30, 0x32	; 50
						i = SS(*fatfs);
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    3912:	02 30       	cpi	r16, 0x02	; 2
    3914:	69 f4       	brne	.+26     	; 0x3930 <f_getfree+0x16e>
						if (LD_WORD(p) == 0) n++;
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	29 f4       	brne	.+10     	; 0x3928 <f_getfree+0x166>
    391e:	08 94       	sec
    3920:	81 1c       	adc	r8, r1
    3922:	91 1c       	adc	r9, r1
    3924:	a1 1c       	adc	r10, r1
    3926:	b1 1c       	adc	r11, r1
						p += 2; i -= 2;
    3928:	32 96       	adiw	r30, 0x02	; 2
    392a:	22 50       	subi	r18, 0x02	; 2
    392c:	30 40       	sbci	r19, 0x00	; 0
    392e:	11 c0       	rjmp	.+34     	; 0x3952 <f_getfree+0x190>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3930:	80 81       	ld	r24, Z
    3932:	91 81       	ldd	r25, Z+1	; 0x01
    3934:	a2 81       	ldd	r26, Z+2	; 0x02
    3936:	b3 81       	ldd	r27, Z+3	; 0x03
    3938:	bf 70       	andi	r27, 0x0F	; 15
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	a1 05       	cpc	r26, r1
    393e:	b1 05       	cpc	r27, r1
    3940:	29 f4       	brne	.+10     	; 0x394c <f_getfree+0x18a>
    3942:	08 94       	sec
    3944:	81 1c       	adc	r8, r1
    3946:	91 1c       	adc	r9, r1
    3948:	a1 1c       	adc	r10, r1
    394a:	b1 1c       	adc	r11, r1
						p += 4; i -= 4;
    394c:	34 96       	adiw	r30, 0x04	; 4
    394e:	24 50       	subi	r18, 0x04	; 4
    3950:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    3952:	08 94       	sec
    3954:	c1 08       	sbc	r12, r1
    3956:	d1 08       	sbc	r13, r1
    3958:	e1 08       	sbc	r14, r1
    395a:	f1 08       	sbc	r15, r1
    395c:	c1 14       	cp	r12, r1
    395e:	d1 04       	cpc	r13, r1
    3960:	e1 04       	cpc	r14, r1
    3962:	f1 04       	cpc	r15, r1
    3964:	09 f0       	breq	.+2      	; 0x3968 <f_getfree+0x1a6>
    3966:	bd cf       	rjmp	.-134    	; 0x38e2 <f_getfree+0x120>
    3968:	05 c0       	rjmp	.+10     	; 0x3974 <f_getfree+0x1b2>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    396a:	11 e0       	ldi	r17, 0x01	; 1
    396c:	03 c0       	rjmp	.+6      	; 0x3974 <f_getfree+0x1b2>
					if (stat == 1) { res = FR_INT_ERR; break; }
    396e:	12 e0       	ldi	r17, 0x02	; 2
    3970:	01 c0       	rjmp	.+2      	; 0x3974 <f_getfree+0x1b2>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    3972:	18 2f       	mov	r17, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    3974:	d3 01       	movw	r26, r6
    3976:	ed 91       	ld	r30, X+
    3978:	fc 91       	ld	r31, X
    397a:	11 97       	sbiw	r26, 0x01	; 1
    397c:	86 86       	std	Z+14, r8	; 0x0e
    397e:	97 86       	std	Z+15, r9	; 0x0f
    3980:	a0 8a       	std	Z+16, r10	; 0x10
    3982:	b1 8a       	std	Z+17, r11	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    3984:	03 30       	cpi	r16, 0x03	; 3
    3986:	29 f4       	brne	.+10     	; 0x3992 <f_getfree+0x1d0>
    3988:	ed 91       	ld	r30, X+
    398a:	fc 91       	ld	r31, X
    398c:	11 97       	sbiw	r26, 0x01	; 1
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    3992:	eb 81       	ldd	r30, Y+3	; 0x03
    3994:	fc 81       	ldd	r31, Y+4	; 0x04
    3996:	80 82       	st	Z, r8
    3998:	91 82       	std	Z+1, r9	; 0x01
    399a:	a2 82       	std	Z+2, r10	; 0x02
    399c:	b3 82       	std	Z+3, r11	; 0x03
		}
	}
	LEAVE_FF(*fatfs, res);
}
    399e:	81 2f       	mov	r24, r17
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	df 90       	pop	r13
    39b6:	cf 90       	pop	r12
    39b8:	bf 90       	pop	r11
    39ba:	af 90       	pop	r10
    39bc:	9f 90       	pop	r9
    39be:	8f 90       	pop	r8
    39c0:	7f 90       	pop	r7
    39c2:	6f 90       	pop	r6
    39c4:	5f 90       	pop	r5
    39c6:	4f 90       	pop	r4
    39c8:	3f 90       	pop	r3
    39ca:	2f 90       	pop	r2
    39cc:	08 95       	ret

000039ce <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    39ce:	cf 92       	push	r12
    39d0:	df 92       	push	r13
    39d2:	ef 92       	push	r14
    39d4:	ff 92       	push	r15
    39d6:	0f 93       	push	r16
    39d8:	1f 93       	push	r17
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    39e0:	6a 81       	ldd	r22, Y+2	; 0x02
    39e2:	7b 81       	ldd	r23, Y+3	; 0x03
    39e4:	88 81       	ld	r24, Y
    39e6:	99 81       	ldd	r25, Y+1	; 0x01
    39e8:	0e 94 a2 06 	call	0xd44	; 0xd44 <validate>
	if (res == FR_OK) {
    39ec:	88 23       	and	r24, r24
    39ee:	09 f0       	breq	.+2      	; 0x39f2 <f_truncate+0x24>
    39f0:	63 c0       	rjmp	.+198    	; 0x3ab8 <f_truncate+0xea>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    39f2:	9c 81       	ldd	r25, Y+4	; 0x04
    39f4:	99 23       	and	r25, r25
    39f6:	24 f0       	brlt	.+8      	; 0x3a00 <f_truncate+0x32>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    39f8:	91 fd       	sbrc	r25, 1
    39fa:	67 c0       	rjmp	.+206    	; 0x3aca <f_truncate+0xfc>
				res = FR_DENIED;
    39fc:	87 e0       	ldi	r24, 0x07	; 7
    39fe:	5c c0       	rjmp	.+184    	; 0x3ab8 <f_truncate+0xea>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    3a00:	82 e0       	ldi	r24, 0x02	; 2
    3a02:	5a c0       	rjmp	.+180    	; 0x3ab8 <f_truncate+0xea>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    3a04:	4a 87       	std	Y+10, r20	; 0x0a
    3a06:	5b 87       	std	Y+11, r21	; 0x0b
    3a08:	6c 87       	std	Y+12, r22	; 0x0c
    3a0a:	7d 87       	std	Y+13, r23	; 0x0d
			fp->flag |= FA__WRITTEN;
    3a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0e:	80 62       	ori	r24, 0x20	; 32
    3a10:	8c 83       	std	Y+4, r24	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    3a12:	41 15       	cp	r20, r1
    3a14:	51 05       	cpc	r21, r1
    3a16:	61 05       	cpc	r22, r1
    3a18:	71 05       	cpc	r23, r1
    3a1a:	69 f4       	brne	.+26     	; 0x3a36 <f_truncate+0x68>
				res = remove_chain(fp->fs, fp->org_clust);
    3a1c:	4e 85       	ldd	r20, Y+14	; 0x0e
    3a1e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3a20:	68 89       	ldd	r22, Y+16	; 0x10
    3a22:	79 89       	ldd	r23, Y+17	; 0x11
    3a24:	88 81       	ld	r24, Y
    3a26:	99 81       	ldd	r25, Y+1	; 0x01
    3a28:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <remove_chain>
				fp->org_clust = 0;
    3a2c:	1e 86       	std	Y+14, r1	; 0x0e
    3a2e:	1f 86       	std	Y+15, r1	; 0x0f
    3a30:	18 8a       	std	Y+16, r1	; 0x10
    3a32:	19 8a       	std	Y+17, r1	; 0x11
    3a34:	3c c0       	rjmp	.+120    	; 0x3aae <f_truncate+0xe0>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->curr_clust);
    3a36:	4a 89       	ldd	r20, Y+18	; 0x12
    3a38:	5b 89       	ldd	r21, Y+19	; 0x13
    3a3a:	6c 89       	ldd	r22, Y+20	; 0x14
    3a3c:	7d 89       	ldd	r23, Y+21	; 0x15
    3a3e:	88 81       	ld	r24, Y
    3a40:	99 81       	ldd	r25, Y+1	; 0x01
    3a42:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fat>
    3a46:	6b 01       	movw	r12, r22
    3a48:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	c8 16       	cp	r12, r24
    3a4e:	d1 04       	cpc	r13, r1
    3a50:	e1 04       	cpc	r14, r1
    3a52:	f1 04       	cpc	r15, r1
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <f_truncate+0x8a>
    3a56:	48 c0       	rjmp	.+144    	; 0x3ae8 <f_truncate+0x11a>
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->org_clust);
				fp->org_clust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->curr_clust);
				res = FR_OK;
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	9f ef       	ldi	r25, 0xFF	; 255
    3a5c:	c9 16       	cp	r12, r25
    3a5e:	9f ef       	ldi	r25, 0xFF	; 255
    3a60:	d9 06       	cpc	r13, r25
    3a62:	9f ef       	ldi	r25, 0xFF	; 255
    3a64:	e9 06       	cpc	r14, r25
    3a66:	9f ef       	ldi	r25, 0xFF	; 255
    3a68:	f9 06       	cpc	r15, r25
    3a6a:	09 f0       	breq	.+2      	; 0x3a6e <f_truncate+0xa0>
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    3a6e:	88 23       	and	r24, r24
    3a70:	01 f5       	brne	.+64     	; 0x3ab2 <f_truncate+0xe4>
    3a72:	e8 81       	ld	r30, Y
    3a74:	f9 81       	ldd	r31, Y+1	; 0x01
    3a76:	42 8d       	ldd	r20, Z+26	; 0x1a
    3a78:	53 8d       	ldd	r21, Z+27	; 0x1b
    3a7a:	64 8d       	ldd	r22, Z+28	; 0x1c
    3a7c:	75 8d       	ldd	r23, Z+29	; 0x1d
    3a7e:	c4 16       	cp	r12, r20
    3a80:	d5 06       	cpc	r13, r21
    3a82:	e6 06       	cpc	r14, r22
    3a84:	f7 06       	cpc	r15, r23
    3a86:	c0 f4       	brcc	.+48     	; 0x3ab8 <f_truncate+0xea>
					res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    3a88:	4a 89       	ldd	r20, Y+18	; 0x12
    3a8a:	5b 89       	ldd	r21, Y+19	; 0x13
    3a8c:	6c 89       	ldd	r22, Y+20	; 0x14
    3a8e:	7d 89       	ldd	r23, Y+21	; 0x15
    3a90:	cf 01       	movw	r24, r30
    3a92:	0f ef       	ldi	r16, 0xFF	; 255
    3a94:	1f ef       	ldi	r17, 0xFF	; 255
    3a96:	2f ef       	ldi	r18, 0xFF	; 255
    3a98:	3f e0       	ldi	r19, 0x0F	; 15
    3a9a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    3a9e:	88 23       	and	r24, r24
    3aa0:	41 f4       	brne	.+16     	; 0x3ab2 <f_truncate+0xe4>
    3aa2:	88 81       	ld	r24, Y
    3aa4:	99 81       	ldd	r25, Y+1	; 0x01
    3aa6:	b7 01       	movw	r22, r14
    3aa8:	a6 01       	movw	r20, r12
    3aaa:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <remove_chain>
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    3aae:	88 23       	and	r24, r24
    3ab0:	19 f0       	breq	.+6      	; 0x3ab8 <f_truncate+0xea>
    3ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab4:	90 68       	ori	r25, 0x80	; 128
    3ab6:	9c 83       	std	Y+4, r25	; 0x04
	}

	LEAVE_FF(fp->fs, res);
}
    3ab8:	df 91       	pop	r29
    3aba:	cf 91       	pop	r28
    3abc:	1f 91       	pop	r17
    3abe:	0f 91       	pop	r16
    3ac0:	ff 90       	pop	r15
    3ac2:	ef 90       	pop	r14
    3ac4:	df 90       	pop	r13
    3ac6:	cf 90       	pop	r12
    3ac8:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    3aca:	4e 81       	ldd	r20, Y+6	; 0x06
    3acc:	5f 81       	ldd	r21, Y+7	; 0x07
    3ace:	68 85       	ldd	r22, Y+8	; 0x08
    3ad0:	79 85       	ldd	r23, Y+9	; 0x09
    3ad2:	0a 85       	ldd	r16, Y+10	; 0x0a
    3ad4:	1b 85       	ldd	r17, Y+11	; 0x0b
    3ad6:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ad8:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ada:	40 17       	cp	r20, r16
    3adc:	51 07       	cpc	r21, r17
    3ade:	62 07       	cpc	r22, r18
    3ae0:	73 07       	cpc	r23, r19
    3ae2:	08 f4       	brcc	.+2      	; 0x3ae6 <f_truncate+0x118>
    3ae4:	8f cf       	rjmp	.-226    	; 0x3a04 <f_truncate+0x36>
    3ae6:	e8 cf       	rjmp	.-48     	; 0x3ab8 <f_truncate+0xea>
				fp->org_clust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->curr_clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	e3 cf       	rjmp	.-58     	; 0x3ab2 <f_truncate+0xe4>

00003aec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    3aec:	cf 92       	push	r12
    3aee:	df 92       	push	r13
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	ea 97       	sbiw	r28, 0x3a	; 58
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	9a af       	sts	0x7a, r25
    3b0a:	89 af       	sts	0x79, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	c9 96       	adiw	r24, 0x39	; 57
    3b10:	be 01       	movw	r22, r28
    3b12:	6f 5f       	subi	r22, 0xFF	; 255
    3b14:	7f 4f       	sbci	r23, 0xFF	; 255
    3b16:	41 e0       	ldi	r20, 0x01	; 1
    3b18:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
	if (res == FR_OK) {
    3b1c:	88 23       	and	r24, r24
    3b1e:	09 f0       	breq	.+2      	; 0x3b22 <f_unlink+0x36>
    3b20:	60 c0       	rjmp	.+192    	; 0x3be2 <f_unlink+0xf6>
		INIT_BUF(dj);
    3b22:	ce 01       	movw	r24, r28
    3b24:	8d 96       	adiw	r24, 0x2d	; 45
    3b26:	9e 8b       	std	Y+22, r25	; 0x16
    3b28:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3b2a:	69 ad       	sts	0x69, r22
    3b2c:	7a ad       	sts	0x6a, r23
    3b2e:	ce 01       	movw	r24, r28
    3b30:	01 96       	adiw	r24, 0x01	; 1
    3b32:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3b36:	88 23       	and	r24, r24
    3b38:	09 f0       	breq	.+2      	; 0x3b3c <f_unlink+0x50>
    3b3a:	53 c0       	rjmp	.+166    	; 0x3be2 <f_unlink+0xf6>
    3b3c:	ed 89       	ldd	r30, Y+21	; 0x15
    3b3e:	fe 89       	ldd	r31, Y+22	; 0x16
    3b40:	83 85       	ldd	r24, Z+11	; 0x0b
    3b42:	85 ff       	sbrs	r24, 5
    3b44:	5b c0       	rjmp	.+182    	; 0x3bfc <f_unlink+0x110>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    3b46:	86 e0       	ldi	r24, 0x06	; 6
    3b48:	4c c0       	rjmp	.+152    	; 0x3be2 <f_unlink+0xf6>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    3b4a:	23 85       	ldd	r18, Z+11	; 0x0b
    3b4c:	20 ff       	sbrs	r18, 0
    3b4e:	5c c0       	rjmp	.+184    	; 0x3c08 <f_unlink+0x11c>
					res = FR_DENIED;		/* Cannot remove R/O object */
    3b50:	87 e0       	ldi	r24, 0x07	; 7
    3b52:	47 c0       	rjmp	.+142    	; 0x3be2 <f_unlink+0xf6>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    3b54:	86 e0       	ldi	r24, 0x06	; 6
    3b56:	45 c0       	rjmp	.+138    	; 0x3be2 <f_unlink+0xf6>
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    3b58:	82 e0       	ldi	r24, 0x02	; 2
    3b5a:	c8 16       	cp	r12, r24
    3b5c:	d1 04       	cpc	r13, r1
    3b5e:	e1 04       	cpc	r14, r1
    3b60:	f1 04       	cpc	r15, r1
    3b62:	08 f4       	brcc	.+2      	; 0x3b66 <f_unlink+0x7a>
    3b64:	63 c0       	rjmp	.+198    	; 0x3c2c <f_unlink+0x140>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    3b66:	ce 01       	movw	r24, r28
    3b68:	47 96       	adiw	r24, 0x17	; 23
    3b6a:	be 01       	movw	r22, r28
    3b6c:	6f 5f       	subi	r22, 0xFF	; 255
    3b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b70:	46 e1       	ldi	r20, 0x16	; 22
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
					sdj.sclust = dclst;
    3b78:	cd 8e       	std	Y+29, r12	; 0x1d
    3b7a:	de 8e       	std	Y+30, r13	; 0x1e
    3b7c:	ef 8e       	std	Y+31, r14	; 0x1f
    3b7e:	f8 a2       	lds	r31, 0x98
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    3b80:	ce 01       	movw	r24, r28
    3b82:	47 96       	adiw	r24, 0x17	; 23
    3b84:	62 e0       	ldi	r22, 0x02	; 2
    3b86:	70 e0       	ldi	r23, 0x00	; 0
    3b88:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dir_sdi>
					if (res == FR_OK) {
    3b8c:	88 23       	and	r24, r24
    3b8e:	49 f5       	brne	.+82     	; 0x3be2 <f_unlink+0xf6>
						res = dir_read(&sdj);
    3b90:	ce 01       	movw	r24, r28
    3b92:	47 96       	adiw	r24, 0x17	; 23
    3b94:	0e 94 c7 12 	call	0x258e	; 0x258e <dir_read>
						if (res == FR_OK			/* Not empty dir */
    3b98:	88 23       	and	r24, r24
    3b9a:	71 f0       	breq	.+28     	; 0x3bb8 <f_unlink+0xcc>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
    3b9c:	ef 89       	ldd	r30, Y+23	; 0x17
    3b9e:	f8 8d       	ldd	r31, Y+24	; 0x18
    3ba0:	46 89       	ldd	r20, Z+22	; 0x16
    3ba2:	57 89       	ldd	r21, Z+23	; 0x17
    3ba4:	60 8d       	ldd	r22, Z+24	; 0x18
    3ba6:	71 8d       	ldd	r23, Z+25	; 0x19
    3ba8:	4c 15       	cp	r20, r12
    3baa:	5d 05       	cpc	r21, r13
    3bac:	6e 05       	cpc	r22, r14
    3bae:	7f 05       	cpc	r23, r15
    3bb0:	29 f0       	breq	.+10     	; 0x3bbc <f_unlink+0xd0>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    3bb2:	84 30       	cpi	r24, 0x04	; 4
    3bb4:	e9 f1       	breq	.+122    	; 0x3c30 <f_unlink+0x144>
    3bb6:	15 c0       	rjmp	.+42     	; 0x3be2 <f_unlink+0xf6>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK			/* Not empty dir */
    3bb8:	87 e0       	ldi	r24, 0x07	; 7
    3bba:	13 c0       	rjmp	.+38     	; 0x3be2 <f_unlink+0xf6>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
    3bbc:	87 e0       	ldi	r24, 0x07	; 7
    3bbe:	11 c0       	rjmp	.+34     	; 0x3be2 <f_unlink+0xf6>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    3bc0:	c1 14       	cp	r12, r1
    3bc2:	d1 04       	cpc	r13, r1
    3bc4:	e1 04       	cpc	r14, r1
    3bc6:	f1 04       	cpc	r15, r1
    3bc8:	41 f0       	breq	.+16     	; 0x3bda <f_unlink+0xee>
						res = remove_chain(dj.fs, dclst);
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bce:	b7 01       	movw	r22, r14
    3bd0:	a6 01       	movw	r20, r12
    3bd2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    3bd6:	88 23       	and	r24, r24
    3bd8:	21 f4       	brne	.+8      	; 0x3be2 <f_unlink+0xf6>
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <sync>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    3be2:	ea 96       	adiw	r28, 0x3a	; 58
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	f8 94       	cli
    3be8:	de bf       	out	0x3e, r29	; 62
    3bea:	0f be       	out	0x3f, r0	; 63
    3bec:	cd bf       	out	0x3d, r28	; 61
    3bee:	df 91       	pop	r29
    3bf0:	cf 91       	pop	r28
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	df 90       	pop	r13
    3bf8:	cf 90       	pop	r12
    3bfa:	08 95       	ret
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    3bfc:	eb 89       	ldd	r30, Y+19	; 0x13
    3bfe:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {
    3c00:	30 97       	sbiw	r30, 0x00	; 0
    3c02:	09 f0       	breq	.+2      	; 0x3c06 <f_unlink+0x11a>
    3c04:	a2 cf       	rjmp	.-188    	; 0x3b4a <f_unlink+0x5e>
    3c06:	a6 cf       	rjmp	.-180    	; 0x3b54 <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3c08:	c4 88       	ldd	r12, Z+20	; 0x14
    3c0a:	d5 88       	ldd	r13, Z+21	; 0x15
    3c0c:	ee 24       	eor	r14, r14
    3c0e:	ff 24       	eor	r15, r15
    3c10:	76 01       	movw	r14, r12
    3c12:	dd 24       	eor	r13, r13
    3c14:	cc 24       	eor	r12, r12
    3c16:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c18:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	c8 2a       	or	r12, r24
    3c20:	d9 2a       	or	r13, r25
    3c22:	ea 2a       	or	r14, r26
    3c24:	fb 2a       	or	r15, r27
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    3c26:	24 fd       	sbrc	r18, 4
    3c28:	97 cf       	rjmp	.-210    	; 0x3b58 <f_unlink+0x6c>
    3c2a:	02 c0       	rjmp	.+4      	; 0x3c30 <f_unlink+0x144>
				if (dclst < 2) {
					res = FR_INT_ERR;
    3c2c:	82 e0       	ldi	r24, 0x02	; 2
    3c2e:	d9 cf       	rjmp	.-78     	; 0x3be2 <f_unlink+0xf6>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    3c30:	ce 01       	movw	r24, r28
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <dir_remove>
				if (res == FR_OK) {
    3c38:	88 23       	and	r24, r24
    3c3a:	11 f2       	breq	.-124    	; 0x3bc0 <f_unlink+0xd4>
    3c3c:	d2 cf       	rjmp	.-92     	; 0x3be2 <f_unlink+0xf6>

00003c3e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    3c3e:	2f 92       	push	r2
    3c40:	3f 92       	push	r3
    3c42:	4f 92       	push	r4
    3c44:	5f 92       	push	r5
    3c46:	7f 92       	push	r7
    3c48:	8f 92       	push	r8
    3c4a:	9f 92       	push	r9
    3c4c:	af 92       	push	r10
    3c4e:	bf 92       	push	r11
    3c50:	cf 92       	push	r12
    3c52:	df 92       	push	r13
    3c54:	ef 92       	push	r14
    3c56:	ff 92       	push	r15
    3c58:	0f 93       	push	r16
    3c5a:	1f 93       	push	r17
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	aa 97       	sbiw	r28, 0x2a	; 42
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	9c a3       	lds	r25, 0x5c
    3c72:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    3c74:	0e 94 00 06 	call	0xc00	; 0xc00 <get_fattime>
    3c78:	6b 01       	movw	r12, r22
    3c7a:	7c 01       	movw	r14, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	83 96       	adiw	r24, 0x23	; 35
    3c80:	be 01       	movw	r22, r28
    3c82:	6f 5f       	subi	r22, 0xFF	; 255
    3c84:	7f 4f       	sbci	r23, 0xFF	; 255
    3c86:	41 e0       	ldi	r20, 0x01	; 1
    3c88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
    3c8c:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3c8e:	88 23       	and	r24, r24
    3c90:	09 f0       	breq	.+2      	; 0x3c94 <f_mkdir+0x56>
    3c92:	e7 c0       	rjmp	.+462    	; 0x3e62 <f_mkdir+0x224>
		INIT_BUF(dj);
    3c94:	ce 01       	movw	r24, r28
    3c96:	47 96       	adiw	r24, 0x17	; 23
    3c98:	9e 8b       	std	Y+22, r25	; 0x16
    3c9a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);			/* Follow the file path */
    3c9c:	6b a1       	lds	r22, 0x4b
    3c9e:	7c a1       	lds	r23, 0x4c
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	01 96       	adiw	r24, 0x01	; 1
    3ca4:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3ca8:	88 23       	and	r24, r24
    3caa:	49 f0       	breq	.+18     	; 0x3cbe <f_mkdir+0x80>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    3cac:	84 30       	cpi	r24, 0x04	; 4
    3cae:	41 f4       	brne	.+16     	; 0x3cc0 <f_mkdir+0x82>
    3cb0:	ed 89       	ldd	r30, Y+21	; 0x15
    3cb2:	fe 89       	ldd	r31, Y+22	; 0x16
    3cb4:	83 85       	ldd	r24, Z+11	; 0x0b
    3cb6:	85 ff       	sbrs	r24, 5
    3cb8:	ed c0       	rjmp	.+474    	; 0x3e94 <f_mkdir+0x256>
			res = FR_INVALID_NAME;
    3cba:	86 e0       	ldi	r24, 0x06	; 6
    3cbc:	01 c0       	rjmp	.+2      	; 0x3cc0 <f_mkdir+0x82>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3cbe:	88 e0       	ldi	r24, 0x08	; 8
				ST_WORD(dir+DIR_FstClusLO, dcl);
				ST_WORD(dir+DIR_FstClusHI, dcl >> 16);
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
    3cc0:	18 2f       	mov	r17, r24
    3cc2:	cf c0       	rjmp	.+414    	; 0x3e62 <f_mkdir+0x224>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	28 16       	cp	r2, r24
    3cc8:	31 04       	cpc	r3, r1
    3cca:	41 04       	cpc	r4, r1
    3ccc:	51 04       	cpc	r5, r1
    3cce:	09 f4       	brne	.+2      	; 0x3cd2 <f_mkdir+0x94>
    3cd0:	f1 c0       	rjmp	.+482    	; 0x3eb4 <f_mkdir+0x276>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3cd2:	9f ef       	ldi	r25, 0xFF	; 255
    3cd4:	29 16       	cp	r2, r25
    3cd6:	9f ef       	ldi	r25, 0xFF	; 255
    3cd8:	39 06       	cpc	r3, r25
    3cda:	9f ef       	ldi	r25, 0xFF	; 255
    3cdc:	49 06       	cpc	r4, r25
    3cde:	9f ef       	ldi	r25, 0xFF	; 255
    3ce0:	59 06       	cpc	r5, r25
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <f_mkdir+0xa8>
    3ce4:	e9 c0       	rjmp	.+466    	; 0x3eb8 <f_mkdir+0x27a>
    3ce6:	01 c0       	rjmp	.+2      	; 0x3cea <f_mkdir+0xac>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3ce8:	17 e0       	ldi	r17, 0x07	; 7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
    3cea:	11 23       	and	r17, r17
    3cec:	09 f0       	breq	.+2      	; 0x3cf0 <f_mkdir+0xb2>
    3cee:	9a c0       	rjmp	.+308    	; 0x3e24 <f_mkdir+0x1e6>
				res = move_window(dj.fs, 0);
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	40 e0       	ldi	r20, 0x00	; 0
    3cf6:	50 e0       	ldi	r21, 0x00	; 0
    3cf8:	ba 01       	movw	r22, r20
    3cfa:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    3cfe:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    3d00:	88 23       	and	r24, r24
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <f_mkdir+0xc8>
    3d04:	8f c0       	rjmp	.+286    	; 0x3e24 <f_mkdir+0x1e6>
				dsc = clust2sect(dj.fs, dcl);
    3d06:	09 81       	ldd	r16, Y+1	; 0x01
    3d08:	1a 81       	ldd	r17, Y+2	; 0x02
    3d0a:	c8 01       	movw	r24, r16
    3d0c:	b2 01       	movw	r22, r4
    3d0e:	a1 01       	movw	r20, r2
    3d10:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    3d14:	4b 01       	movw	r8, r22
    3d16:	5c 01       	movw	r10, r24
				dir = dj.fs->win;
    3d18:	f8 01       	movw	r30, r16
    3d1a:	f2 96       	adiw	r30, 0x32	; 50
    3d1c:	fe a3       	lds	r31, 0x5e
    3d1e:	ed a3       	lds	r30, 0x5d
				mem_set(dir, 0, SS(dj.fs));
    3d20:	cf 01       	movw	r24, r30
    3d22:	60 e0       	ldi	r22, 0x00	; 0
    3d24:	70 e0       	ldi	r23, 0x00	; 0
    3d26:	40 e0       	ldi	r20, 0x00	; 0
    3d28:	52 e0       	ldi	r21, 0x02	; 2
    3d2a:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    3d2e:	8d a1       	lds	r24, 0x4d
    3d30:	9e a1       	lds	r25, 0x4e
    3d32:	60 e2       	ldi	r22, 0x20	; 32
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	4b e0       	ldi	r20, 0x0B	; 11
    3d38:	50 e0       	ldi	r21, 0x00	; 0
    3d3a:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
				dir[DIR_Name] = '.';
    3d3e:	0f 2e       	mov	r0, r31
    3d40:	fe e2       	ldi	r31, 0x2E	; 46
    3d42:	7f 2e       	mov	r7, r31
    3d44:	f0 2d       	mov	r31, r0
    3d46:	f8 01       	movw	r30, r16
    3d48:	72 aa       	sts	0x92, r23
				dir[DIR_Attr] = AM_DIR;
    3d4a:	80 e1       	ldi	r24, 0x10	; 16
    3d4c:	85 af       	sts	0x75, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    3d4e:	e8 5b       	subi	r30, 0xB8	; 184
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	c0 82       	st	Z, r12
    3d54:	d1 82       	std	Z+1, r13	; 0x01
    3d56:	e2 82       	std	Z+2, r14	; 0x02
    3d58:	f3 82       	std	Z+3, r15	; 0x03
				ST_WORD(dir+DIR_FstClusLO, dcl);
    3d5a:	38 a6       	lds	r19, 0xb8
    3d5c:	2f a2       	lds	r18, 0x9f
    3d5e:	f8 01       	movw	r30, r16
    3d60:	e4 5b       	subi	r30, 0xB4	; 180
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	31 82       	std	Z+1, r3	; 0x01
    3d66:	20 82       	st	Z, r2
				ST_WORD(dir+DIR_FstClusHI, dcl >> 16);
    3d68:	c2 01       	movw	r24, r4
    3d6a:	aa 27       	eor	r26, r26
    3d6c:	bb 27       	eor	r27, r27
    3d6e:	9a a7       	lds	r25, 0x7a
    3d70:	89 a7       	lds	r24, 0x79
    3d72:	f8 01       	movw	r30, r16
    3d74:	ea 5b       	subi	r30, 0xBA	; 186
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
    3d7c:	c8 01       	movw	r24, r16
    3d7e:	8e 5a       	subi	r24, 0xAE	; 174
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	6d a1       	lds	r22, 0x4d
    3d84:	7e a1       	lds	r23, 0x4e
    3d86:	40 e2       	ldi	r20, 0x20	; 32
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    3d8e:	f8 01       	movw	r30, r16
    3d90:	ed 5a       	subi	r30, 0xAD	; 173
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	70 82       	st	Z, r7
    3d96:	4f 81       	ldd	r20, Y+7	; 0x07
    3d98:	58 85       	ldd	r21, Y+8	; 0x08
    3d9a:	69 85       	ldd	r22, Y+9	; 0x09
    3d9c:	7a 85       	ldd	r23, Y+10	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    3d9e:	29 81       	ldd	r18, Y+1	; 0x01
    3da0:	3a 81       	ldd	r19, Y+2	; 0x02
    3da2:	f9 01       	movw	r30, r18
    3da4:	80 81       	ld	r24, Z
    3da6:	83 30       	cpi	r24, 0x03	; 3
    3da8:	61 f4       	brne	.+24     	; 0x3dc2 <f_mkdir+0x184>
    3daa:	86 a1       	lds	r24, 0x46
    3dac:	97 a1       	lds	r25, 0x47
    3dae:	a0 a5       	lds	r26, 0x60
    3db0:	b1 a5       	lds	r27, 0x61
    3db2:	84 17       	cp	r24, r20
    3db4:	95 07       	cpc	r25, r21
    3db6:	a6 07       	cpc	r26, r22
    3db8:	b7 07       	cpc	r27, r23
    3dba:	19 f4       	brne	.+6      	; 0x3dc2 <f_mkdir+0x184>
					pcl = 0;
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	ba 01       	movw	r22, r20
				ST_WORD(dir+32+DIR_FstClusLO, pcl);
    3dc2:	f8 01       	movw	r30, r16
    3dc4:	e4 59       	subi	r30, 0x94	; 148
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	51 83       	std	Z+1, r21	; 0x01
    3dca:	40 83       	st	Z, r20
				ST_WORD(dir+32+DIR_FstClusHI, pcl >> 16);
    3dcc:	f8 01       	movw	r30, r16
    3dce:	ea 59       	subi	r30, 0x9A	; 154
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	71 83       	std	Z+1, r23	; 0x01
    3dd4:	60 83       	st	Z, r22
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    3dd6:	f9 01       	movw	r30, r18
    3dd8:	02 81       	ldd	r16, Z+2	; 0x02
    3dda:	00 23       	and	r16, r16
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <f_mkdir+0x1a2>
    3dde:	6e c0       	rjmp	.+220    	; 0x3ebc <f_mkdir+0x27e>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    3de0:	77 24       	eor	r7, r7
    3de2:	73 94       	inc	r7
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_WORD(dir+32+DIR_FstClusLO, pcl);
				ST_WORD(dir+32+DIR_FstClusHI, pcl >> 16);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	9a 81       	ldd	r25, Y+2	; 0x02
    3de8:	fc 01       	movw	r30, r24
    3dea:	86 a6       	lds	r24, 0xb6
    3dec:	97 a6       	lds	r25, 0xb7
    3dee:	a0 aa       	sts	0x90, r26
    3df0:	b1 aa       	sts	0x91, r27
    3df2:	08 94       	sec
    3df4:	81 1c       	adc	r8, r1
    3df6:	91 1c       	adc	r9, r1
    3df8:	a1 1c       	adc	r10, r1
    3dfa:	b1 1c       	adc	r11, r1
					dj.fs->wflag = 1;
    3dfc:	74 82       	std	Z+4, r7	; 0x04
					res = move_window(dj.fs, 0);
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	ba 01       	movw	r22, r20
    3e04:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
    3e08:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    3e0a:	88 23       	and	r24, r24
    3e0c:	59 f4       	brne	.+22     	; 0x3e24 <f_mkdir+0x1e6>
					mem_set(dir, 0, SS(dj.fs));
    3e0e:	8d a1       	lds	r24, 0x4d
    3e10:	9e a1       	lds	r25, 0x4e
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	40 e0       	ldi	r20, 0x00	; 0
    3e18:	52 e0       	ldi	r21, 0x02	; 2
    3e1a:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_WORD(dir+32+DIR_FstClusLO, pcl);
				ST_WORD(dir+32+DIR_FstClusHI, pcl >> 16);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    3e1e:	01 50       	subi	r16, 0x01	; 1
    3e20:	09 f7       	brne	.-62     	; 0x3de4 <f_mkdir+0x1a6>
    3e22:	4c c0       	rjmp	.+152    	; 0x3ebc <f_mkdir+0x27e>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);				/* Could not register, remove cluster chain */
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
    3e26:	9a 81       	ldd	r25, Y+2	; 0x02
    3e28:	b2 01       	movw	r22, r4
    3e2a:	a1 01       	movw	r20, r2
    3e2c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <remove_chain>
    3e30:	18 c0       	rjmp	.+48     	; 0x3e62 <f_mkdir+0x224>
			} else {
				dir = dj.dir;
    3e32:	eb 89       	ldd	r30, Y+19	; 0x13
    3e34:	fc 89       	ldd	r31, Y+20	; 0x14
				dir[DIR_Attr] = AM_DIR;					/* Attribute */
    3e36:	80 e1       	ldi	r24, 0x10	; 16
    3e38:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);			/* Created time */
    3e3a:	c6 8a       	std	Z+22, r12	; 0x16
    3e3c:	d7 8a       	std	Z+23, r13	; 0x17
    3e3e:	e0 8e       	std	Z+24, r14	; 0x18
    3e40:	f1 8e       	std	Z+25, r15	; 0x19
				ST_WORD(dir+DIR_FstClusLO, dcl);		/* Table start cluster */
    3e42:	8f a1       	lds	r24, 0x4f
    3e44:	98 a5       	lds	r25, 0x68
    3e46:	93 8f       	std	Z+27, r25	; 0x1b
    3e48:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, dcl >> 16);
    3e4a:	89 a5       	lds	r24, 0x69
    3e4c:	9a a5       	lds	r25, 0x6a
    3e4e:	95 8b       	std	Z+21, r25	; 0x15
    3e50:	84 8b       	std	Z+20, r24	; 0x14
				dj.fs->wflag = 1;
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	9a 81       	ldd	r25, Y+2	; 0x02
    3e56:	21 e0       	ldi	r18, 0x01	; 1
    3e58:	fc 01       	movw	r30, r24
    3e5a:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    3e5c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <sync>
    3e60:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3e62:	81 2f       	mov	r24, r17
    3e64:	aa 96       	adiw	r28, 0x2a	; 42
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	ff 90       	pop	r15
    3e7a:	ef 90       	pop	r14
    3e7c:	df 90       	pop	r13
    3e7e:	cf 90       	pop	r12
    3e80:	bf 90       	pop	r11
    3e82:	af 90       	pop	r10
    3e84:	9f 90       	pop	r9
    3e86:	8f 90       	pop	r8
    3e88:	7f 90       	pop	r7
    3e8a:	5f 90       	pop	r5
    3e8c:	4f 90       	pop	r4
    3e8e:	3f 90       	pop	r3
    3e90:	2f 90       	pop	r2
    3e92:	08 95       	ret
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	9a 81       	ldd	r25, Y+2	; 0x02
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	50 e0       	ldi	r21, 0x00	; 0
    3e9c:	ba 01       	movw	r22, r20
    3e9e:	0e 94 a7 0c 	call	0x194e	; 0x194e <create_chain>
    3ea2:	1b 01       	movw	r2, r22
    3ea4:	2c 01       	movw	r4, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3ea6:	61 15       	cp	r22, r1
    3ea8:	71 05       	cpc	r23, r1
    3eaa:	81 05       	cpc	r24, r1
    3eac:	91 05       	cpc	r25, r1
    3eae:	09 f4       	brne	.+2      	; 0x3eb2 <f_mkdir+0x274>
    3eb0:	1b cf       	rjmp	.-458    	; 0x3ce8 <f_mkdir+0xaa>
    3eb2:	08 cf       	rjmp	.-496    	; 0x3cc4 <f_mkdir+0x86>
			if (dcl == 1) res = FR_INT_ERR;
    3eb4:	12 e0       	ldi	r17, 0x02	; 2
    3eb6:	b6 cf       	rjmp	.-148    	; 0x3e24 <f_mkdir+0x1e6>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3eb8:	11 e0       	ldi	r17, 0x01	; 1
    3eba:	b4 cf       	rjmp	.-152    	; 0x3e24 <f_mkdir+0x1e6>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	01 96       	adiw	r24, 0x01	; 1
    3ec0:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <dir_register>
    3ec4:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    3ec6:	88 23       	and	r24, r24
    3ec8:	09 f4       	brne	.+2      	; 0x3ecc <f_mkdir+0x28e>
    3eca:	b3 cf       	rjmp	.-154    	; 0x3e32 <f_mkdir+0x1f4>
    3ecc:	ab cf       	rjmp	.-170    	; 0x3e24 <f_mkdir+0x1e6>

00003ece <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    3ece:	0f 93       	push	r16
    3ed0:	1f 93       	push	r17
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
    3ed6:	cd b7       	in	r28, 0x3d	; 61
    3ed8:	de b7       	in	r29, 0x3e	; 62
    3eda:	a4 97       	sbiw	r28, 0x24	; 36
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	f8 94       	cli
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	cd bf       	out	0x3d, r28	; 61
    3ee6:	9c a3       	lds	r25, 0x5c
    3ee8:	8b a3       	lds	r24, 0x5b
    3eea:	06 2f       	mov	r16, r22
    3eec:	14 2f       	mov	r17, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3eee:	ce 01       	movw	r24, r28
    3ef0:	83 96       	adiw	r24, 0x23	; 35
    3ef2:	be 01       	movw	r22, r28
    3ef4:	6f 5f       	subi	r22, 0xFF	; 255
    3ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef8:	41 e0       	ldi	r20, 0x01	; 1
    3efa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
	if (res == FR_OK) {
    3efe:	88 23       	and	r24, r24
    3f00:	29 f5       	brne	.+74     	; 0x3f4c <f_chmod+0x7e>
		INIT_BUF(dj);
    3f02:	ce 01       	movw	r24, r28
    3f04:	47 96       	adiw	r24, 0x17	; 23
    3f06:	9e 8b       	std	Y+22, r25	; 0x16
    3f08:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3f0a:	6b a1       	lds	r22, 0x4b
    3f0c:	7c a1       	lds	r23, 0x4c
    3f0e:	ce 01       	movw	r24, r28
    3f10:	01 96       	adiw	r24, 0x01	; 1
    3f12:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3f16:	88 23       	and	r24, r24
    3f18:	c9 f4       	brne	.+50     	; 0x3f4c <f_chmod+0x7e>
    3f1a:	ed 89       	ldd	r30, Y+21	; 0x15
    3f1c:	fe 89       	ldd	r31, Y+22	; 0x16
    3f1e:	83 85       	ldd	r24, Z+11	; 0x0b
    3f20:	85 ff       	sbrs	r24, 5
    3f22:	1f c0       	rjmp	.+62     	; 0x3f62 <f_chmod+0x94>
			res = FR_INVALID_NAME;
    3f24:	86 e0       	ldi	r24, 0x06	; 6
    3f26:	12 c0       	rjmp	.+36     	; 0x3f4c <f_chmod+0x7e>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    3f28:	17 72       	andi	r17, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    3f2a:	91 2f       	mov	r25, r17
    3f2c:	90 95       	com	r25
    3f2e:	83 85       	ldd	r24, Z+11	; 0x0b
    3f30:	89 23       	and	r24, r25
    3f32:	01 23       	and	r16, r17
    3f34:	18 2f       	mov	r17, r24
    3f36:	10 2b       	or	r17, r16
    3f38:	13 87       	std	Z+11, r17	; 0x0b
				dj.fs->wflag = 1;
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3e:	21 e0       	ldi	r18, 0x01	; 1
    3f40:	fc 01       	movw	r30, r24
    3f42:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    3f44:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <sync>
    3f48:	01 c0       	rjmp	.+2      	; 0x3f4c <f_chmod+0x7e>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    3f4a:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3f4c:	a4 96       	adiw	r28, 0x24	; 36
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	df 91       	pop	r29
    3f5a:	cf 91       	pop	r28
    3f5c:	1f 91       	pop	r17
    3f5e:	0f 91       	pop	r16
    3f60:	08 95       	ret
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    3f62:	eb 89       	ldd	r30, Y+19	; 0x13
    3f64:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {						/* Is it a root directory? */
    3f66:	30 97       	sbiw	r30, 0x00	; 0
    3f68:	f9 f6       	brne	.-66     	; 0x3f28 <f_chmod+0x5a>
    3f6a:	ef cf       	rjmp	.-34     	; 0x3f4a <f_chmod+0x7c>

00003f6c <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    3f6c:	0f 93       	push	r16
    3f6e:	1f 93       	push	r17
    3f70:	cf 93       	push	r28
    3f72:	df 93       	push	r29
    3f74:	cd b7       	in	r28, 0x3d	; 61
    3f76:	de b7       	in	r29, 0x3e	; 62
    3f78:	a4 97       	sbiw	r28, 0x24	; 36
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	f8 94       	cli
    3f7e:	de bf       	out	0x3e, r29	; 62
    3f80:	0f be       	out	0x3f, r0	; 63
    3f82:	cd bf       	out	0x3d, r28	; 61
    3f84:	9c a3       	lds	r25, 0x5c
    3f86:	8b a3       	lds	r24, 0x5b
    3f88:	8b 01       	movw	r16, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	83 96       	adiw	r24, 0x23	; 35
    3f8e:	be 01       	movw	r22, r28
    3f90:	6f 5f       	subi	r22, 0xFF	; 255
    3f92:	7f 4f       	sbci	r23, 0xFF	; 255
    3f94:	41 e0       	ldi	r20, 0x01	; 1
    3f96:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
	if (res == FR_OK) {
    3f9a:	88 23       	and	r24, r24
    3f9c:	49 f5       	brne	.+82     	; 0x3ff0 <f_utime+0x84>
		INIT_BUF(dj);
    3f9e:	ce 01       	movw	r24, r28
    3fa0:	47 96       	adiw	r24, 0x17	; 23
    3fa2:	9e 8b       	std	Y+22, r25	; 0x16
    3fa4:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    3fa6:	6b a1       	lds	r22, 0x4b
    3fa8:	7c a1       	lds	r23, 0x4c
    3faa:	ce 01       	movw	r24, r28
    3fac:	01 96       	adiw	r24, 0x01	; 1
    3fae:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3fb2:	88 23       	and	r24, r24
    3fb4:	e9 f4       	brne	.+58     	; 0x3ff0 <f_utime+0x84>
    3fb6:	ed 89       	ldd	r30, Y+21	; 0x15
    3fb8:	fe 89       	ldd	r31, Y+22	; 0x16
    3fba:	83 85       	ldd	r24, Z+11	; 0x0b
    3fbc:	85 ff       	sbrs	r24, 5
    3fbe:	23 c0       	rjmp	.+70     	; 0x4006 <f_utime+0x9a>
			res = FR_INVALID_NAME;
    3fc0:	86 e0       	ldi	r24, 0x06	; 6
    3fc2:	16 c0       	rjmp	.+44     	; 0x3ff0 <f_utime+0x84>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    3fc4:	d8 01       	movw	r26, r16
    3fc6:	16 96       	adiw	r26, 0x06	; 6
    3fc8:	8d 91       	ld	r24, X+
    3fca:	9c 91       	ld	r25, X
    3fcc:	17 97       	sbiw	r26, 0x07	; 7
    3fce:	97 8b       	std	Z+23, r25	; 0x17
    3fd0:	86 8b       	std	Z+22, r24	; 0x16
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    3fd2:	14 96       	adiw	r26, 0x04	; 4
    3fd4:	8d 91       	ld	r24, X+
    3fd6:	9c 91       	ld	r25, X
    3fd8:	15 97       	sbiw	r26, 0x05	; 5
    3fda:	91 8f       	std	Z+25, r25	; 0x19
    3fdc:	80 8f       	std	Z+24, r24	; 0x18
				dj.fs->wflag = 1;
    3fde:	89 81       	ldd	r24, Y+1	; 0x01
    3fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe2:	21 e0       	ldi	r18, 0x01	; 1
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    3fe8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <sync>
    3fec:	01 c0       	rjmp	.+2      	; 0x3ff0 <f_utime+0x84>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    3fee:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3ff0:	a4 96       	adiw	r28, 0x24	; 36
    3ff2:	0f b6       	in	r0, 0x3f	; 63
    3ff4:	f8 94       	cli
    3ff6:	de bf       	out	0x3e, r29	; 62
    3ff8:	0f be       	out	0x3f, r0	; 63
    3ffa:	cd bf       	out	0x3d, r28	; 61
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	08 95       	ret
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    4006:	eb 89       	ldd	r30, Y+19	; 0x13
    4008:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {					/* Root directory */
    400a:	30 97       	sbiw	r30, 0x00	; 0
    400c:	d9 f6       	brne	.-74     	; 0x3fc4 <f_utime+0x58>
    400e:	ef cf       	rjmp	.-34     	; 0x3fee <f_utime+0x82>

00004010 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    4010:	ef 92       	push	r14
    4012:	ff 92       	push	r15
    4014:	0f 93       	push	r16
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	cf 54       	subi	r28, 0x4F	; 79
    4022:	d0 40       	sbci	r29, 0x00	; 0
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	60 96       	adiw	r28, 0x10	; 16
    4030:	9f af       	sts	0x7f, r25
    4032:	8e af       	sts	0x7e, r24
    4034:	60 97       	sbiw	r28, 0x10	; 16
    4036:	8b 01       	movw	r16, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    4038:	ce 01       	movw	r24, r28
    403a:	82 5b       	subi	r24, 0xB2	; 178
    403c:	9f 4f       	sbci	r25, 0xFF	; 255
    403e:	be 01       	movw	r22, r28
    4040:	6f 5f       	subi	r22, 0xFF	; 255
    4042:	7f 4f       	sbci	r23, 0xFF	; 255
    4044:	41 e0       	ldi	r20, 0x01	; 1
    4046:	0e 94 ff 06 	call	0xdfe	; 0xdfe <chk_mounted>
	if (res == FR_OK) {
    404a:	88 23       	and	r24, r24
    404c:	09 f0       	breq	.+2      	; 0x4050 <f_rename+0x40>
    404e:	b8 c0       	rjmp	.+368    	; 0x41c0 <f_rename+0x1b0>
		djn.fs = djo.fs;
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	9a 81       	ldd	r25, Y+2	; 0x02
    4054:	98 8f       	std	Y+24, r25	; 0x18
    4056:	8f 8b       	std	Y+23, r24	; 0x17
		INIT_BUF(djo);
    4058:	ce 01       	movw	r24, r28
    405a:	8e 5b       	subi	r24, 0xBE	; 190
    405c:	9f 4f       	sbci	r25, 0xFF	; 255
    405e:	9e 8b       	std	Y+22, r25	; 0x16
    4060:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&djo, path_old);		/* Check old object */
    4062:	60 96       	adiw	r28, 0x10	; 16
    4064:	6e ad       	sts	0x6e, r22
    4066:	7f ad       	sts	0x6f, r23
    4068:	60 97       	sbiw	r28, 0x10	; 16
    406a:	ce 01       	movw	r24, r28
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    4072:	88 23       	and	r24, r24
    4074:	09 f0       	breq	.+2      	; 0x4078 <f_rename+0x68>
    4076:	a4 c0       	rjmp	.+328    	; 0x41c0 <f_rename+0x1b0>
    4078:	ed 89       	ldd	r30, Y+21	; 0x15
    407a:	fe 89       	ldd	r31, Y+22	; 0x16
    407c:	83 85       	ldd	r24, Z+11	; 0x0b
    407e:	85 ff       	sbrs	r24, 5
    4080:	ad c0       	rjmp	.+346    	; 0x41dc <f_rename+0x1cc>
			res = FR_INVALID_NAME;
    4082:	86 e0       	ldi	r24, 0x06	; 6
    4084:	9d c0       	rjmp	.+314    	; 0x41c0 <f_rename+0x1b0>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    4086:	65 5f       	subi	r22, 0xF5	; 245
    4088:	7f 4f       	sbci	r23, 0xFF	; 255
    408a:	ce 01       	movw	r24, r28
    408c:	8d 96       	adiw	r24, 0x2d	; 45
    408e:	45 e1       	ldi	r20, 0x15	; 21
    4090:	50 e0       	ldi	r21, 0x00	; 0
    4092:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
    4096:	ce 01       	movw	r24, r28
    4098:	47 96       	adiw	r24, 0x17	; 23
    409a:	be 01       	movw	r22, r28
    409c:	6f 5f       	subi	r22, 0xFF	; 255
    409e:	7f 4f       	sbci	r23, 0xFF	; 255
    40a0:	46 e1       	ldi	r20, 0x16	; 22
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
				res = follow_path(&djn, path_new);
    40a8:	ce 01       	movw	r24, r28
    40aa:	47 96       	adiw	r24, 0x17	; 23
    40ac:	b8 01       	movw	r22, r16
    40ae:	0e 94 a7 10 	call	0x214e	; 0x214e <follow_path>
				if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    40b2:	88 23       	and	r24, r24
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <f_rename+0xa8>
    40b6:	81 c0       	rjmp	.+258    	; 0x41ba <f_rename+0x1aa>
				if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    40b8:	84 30       	cpi	r24, 0x04	; 4
    40ba:	09 f0       	breq	.+2      	; 0x40be <f_rename+0xae>
    40bc:	81 c0       	rjmp	.+258    	; 0x41c0 <f_rename+0x1b0>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    40be:	ce 01       	movw	r24, r28
    40c0:	47 96       	adiw	r24, 0x17	; 23
    40c2:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <dir_register>
					if (res == FR_OK) {
    40c6:	88 23       	and	r24, r24
    40c8:	09 f0       	breq	.+2      	; 0x40cc <f_rename+0xbc>
    40ca:	7a c0       	rjmp	.+244    	; 0x41c0 <f_rename+0x1b0>
						dir = djn.dir;					/* Copy object information except for name */
    40cc:	09 a5       	lds	r16, 0x69
    40ce:	1a a5       	lds	r17, 0x6a
						mem_cpy(dir+13, buf+2, 19);
    40d0:	c8 01       	movw	r24, r16
    40d2:	0d 96       	adiw	r24, 0x0d	; 13
    40d4:	be 01       	movw	r22, r28
    40d6:	61 5d       	subi	r22, 0xD1	; 209
    40d8:	7f 4f       	sbci	r23, 0xFF	; 255
    40da:	43 e1       	ldi	r20, 0x13	; 19
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    40e2:	8d a5       	lds	r24, 0x6d
    40e4:	80 62       	ori	r24, 0x20	; 32
    40e6:	f8 01       	movw	r30, r16
    40e8:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    40ea:	e9 81       	ldd	r30, Y+1	; 0x01
    40ec:	fa 81       	ldd	r31, Y+2	; 0x02
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    40f2:	4f 81       	ldd	r20, Y+7	; 0x07
    40f4:	58 85       	ldd	r21, Y+8	; 0x08
    40f6:	69 85       	ldd	r22, Y+9	; 0x09
    40f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    40fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40fe:	af 8d       	ldd	r26, Y+31	; 0x1f
    4100:	b8 a1       	lds	r27, 0x48
    4102:	48 17       	cp	r20, r24
    4104:	59 07       	cpc	r21, r25
    4106:	6a 07       	cpc	r22, r26
    4108:	7b 07       	cpc	r23, r27
    410a:	09 f4       	brne	.+2      	; 0x410e <f_rename+0xfe>
    410c:	4b c0       	rjmp	.+150    	; 0x41a4 <f_rename+0x194>
    410e:	f8 01       	movw	r30, r16
    4110:	83 85       	ldd	r24, Z+11	; 0x0b
    4112:	84 ff       	sbrs	r24, 4
    4114:	47 c0       	rjmp	.+142    	; 0x41a4 <f_rename+0x194>
							dw = clust2sect(djn.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    4116:	ef 88       	ldd	r14, Y+23	; 0x17
    4118:	f8 8c       	ldd	r15, Y+24	; 0x18
    411a:	82 8d       	ldd	r24, Z+26	; 0x1a
    411c:	93 8d       	ldd	r25, Z+27	; 0x1b
    411e:	44 89       	ldd	r20, Z+20	; 0x14
    4120:	55 89       	ldd	r21, Z+21	; 0x15
    4122:	84 2b       	or	r24, r20
    4124:	95 2b       	or	r25, r21
    4126:	ac 01       	movw	r20, r24
    4128:	60 e0       	ldi	r22, 0x00	; 0
    412a:	70 e0       	ldi	r23, 0x00	; 0
    412c:	c7 01       	movw	r24, r14
    412e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <clust2sect>
    4132:	ab 01       	movw	r20, r22
    4134:	bc 01       	movw	r22, r24
							if (!dw) {
    4136:	41 15       	cp	r20, r1
    4138:	51 05       	cpc	r21, r1
    413a:	61 05       	cpc	r22, r1
    413c:	71 05       	cpc	r23, r1
    413e:	09 f4       	brne	.+2      	; 0x4142 <f_rename+0x132>
    4140:	54 c0       	rjmp	.+168    	; 0x41ea <f_rename+0x1da>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
    4142:	c7 01       	movw	r24, r14
    4144:	0e 94 d5 09 	call	0x13aa	; 0x13aa <move_window>
								dir = djn.fs->win+32;	/* .. entry */
    4148:	ef 89       	ldd	r30, Y+23	; 0x17
    414a:	f8 8d       	ldd	r31, Y+24	; 0x18
								if (res == FR_OK && dir[1] == '.') {
    414c:	88 23       	and	r24, r24
    414e:	c1 f5       	brne	.+112    	; 0x41c0 <f_rename+0x1b0>
    4150:	df 01       	movw	r26, r30
    4152:	ad 5a       	subi	r26, 0xAD	; 173
    4154:	bf 4f       	sbci	r27, 0xFF	; 255
    4156:	8c 91       	ld	r24, X
    4158:	8e 32       	cpi	r24, 0x2E	; 46
    415a:	21 f5       	brne	.+72     	; 0x41a4 <f_rename+0x194>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
    415c:	80 81       	ld	r24, Z
    415e:	83 30       	cpi	r24, 0x03	; 3
    4160:	69 f4       	brne	.+26     	; 0x417c <f_rename+0x16c>
    4162:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4164:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4166:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4168:	78 a1       	lds	r23, 0x48
    416a:	86 a1       	lds	r24, 0x46
    416c:	97 a1       	lds	r25, 0x47
    416e:	a0 a5       	lds	r26, 0x60
    4170:	b1 a5       	lds	r27, 0x61
    4172:	48 17       	cp	r20, r24
    4174:	59 07       	cpc	r21, r25
    4176:	6a 07       	cpc	r22, r26
    4178:	7b 07       	cpc	r23, r27
    417a:	29 f0       	breq	.+10     	; 0x4186 <f_rename+0x176>
    417c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    417e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4180:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4182:	78 a1       	lds	r23, 0x48
    4184:	03 c0       	rjmp	.+6      	; 0x418c <f_rename+0x17c>
    4186:	40 e0       	ldi	r20, 0x00	; 0
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	ba 01       	movw	r22, r20
									ST_WORD(dir+DIR_FstClusLO, dw);
    418c:	df 01       	movw	r26, r30
    418e:	a4 59       	subi	r26, 0x94	; 148
    4190:	bf 4f       	sbci	r27, 0xFF	; 255
    4192:	4d 93       	st	X+, r20
    4194:	5c 93       	st	X, r21
									ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4196:	df 01       	movw	r26, r30
    4198:	aa 59       	subi	r26, 0x9A	; 154
    419a:	bf 4f       	sbci	r27, 0xFF	; 255
    419c:	6d 93       	st	X+, r22
    419e:	7c 93       	st	X, r23
									djn.fs->wflag = 1;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    41a4:	ce 01       	movw	r24, r28
    41a6:	01 96       	adiw	r24, 0x01	; 1
    41a8:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <dir_remove>
							if (res == FR_OK)
    41ac:	88 23       	and	r24, r24
    41ae:	41 f4       	brne	.+16     	; 0x41c0 <f_rename+0x1b0>
								res = sync(djo.fs);
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	9a 81       	ldd	r25, Y+2	; 0x02
    41b4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <sync>
    41b8:	03 c0       	rjmp	.+6      	; 0x41c0 <f_rename+0x1b0>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    41ba:	88 e0       	ldi	r24, 0x08	; 8
    41bc:	01 c0       	rjmp	.+2      	; 0x41c0 <f_rename+0x1b0>
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    41be:	84 e0       	ldi	r24, 0x04	; 4
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    41c0:	c1 5b       	subi	r28, 0xB1	; 177
    41c2:	df 4f       	sbci	r29, 0xFF	; 255
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	f8 94       	cli
    41c8:	de bf       	out	0x3e, r29	; 62
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	cd bf       	out	0x3d, r28	; 61
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	ff 90       	pop	r15
    41d8:	ef 90       	pop	r14
    41da:	08 95       	ret
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    41dc:	6b 89       	ldd	r22, Y+19	; 0x13
    41de:	7c 89       	ldd	r23, Y+20	; 0x14
    41e0:	61 15       	cp	r22, r1
    41e2:	71 05       	cpc	r23, r1
    41e4:	09 f0       	breq	.+2      	; 0x41e8 <f_rename+0x1d8>
    41e6:	4f cf       	rjmp	.-354    	; 0x4086 <f_rename+0x76>
    41e8:	ea cf       	rjmp	.-44     	; 0x41be <f_rename+0x1ae>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
							if (!dw) {
								res = FR_INT_ERR;
    41ea:	82 e0       	ldi	r24, 0x02	; 2
    41ec:	e9 cf       	rjmp	.-46     	; 0x41c0 <f_rename+0x1b0>

000041ee <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,		/* Logical drive number */
	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au			/* Allocation unit size [bytes] */
)
{
    41ee:	2f 92       	push	r2
    41f0:	3f 92       	push	r3
    41f2:	4f 92       	push	r4
    41f4:	5f 92       	push	r5
    41f6:	6f 92       	push	r6
    41f8:	7f 92       	push	r7
    41fa:	8f 92       	push	r8
    41fc:	9f 92       	push	r9
    41fe:	bf 92       	push	r11
    4200:	cf 92       	push	r12
    4202:	df 92       	push	r13
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	cd b7       	in	r28, 0x3d	; 61
    4212:	de b7       	in	r29, 0x3e	; 62
    4214:	a7 97       	sbiw	r28, 0x27	; 39
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	de bf       	out	0x3e, r29	; 62
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	b8 2e       	mov	r11, r24
    4222:	16 2f       	mov	r17, r22
    4224:	6a 01       	movw	r12, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4226:	44 24       	eor	r4, r4
    4228:	43 94       	inc	r4
    422a:	48 16       	cp	r4, r24
    422c:	08 f4       	brcc	.+2      	; 0x4230 <f_mkfs+0x42>
    422e:	da c4       	rjmp	.+2484   	; 0x4be4 <f_mkfs+0x9f6>
	fs = FatFs[drv];
    4230:	e8 2f       	mov	r30, r24
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	ee 0f       	add	r30, r30
    4236:	ff 1f       	adc	r31, r31
    4238:	ec 57       	subi	r30, 0x7C	; 124
    423a:	fa 4f       	sbci	r31, 0xFA	; 250
    423c:	80 80       	ld	r8, Z
    423e:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4240:	81 14       	cp	r8, r1
    4242:	91 04       	cpc	r9, r1
    4244:	09 f4       	brne	.+2      	; 0x4248 <f_mkfs+0x5a>
    4246:	d0 c4       	rjmp	.+2464   	; 0x4be8 <f_mkfs+0x9fa>
	fs->fs_type = 0;
    4248:	d4 01       	movw	r26, r8
    424a:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    424c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4250:	80 fd       	sbrc	r24, 0
    4252:	cc c4       	rjmp	.+2456   	; 0x4bec <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4254:	82 fd       	sbrc	r24, 2
    4256:	cc c4       	rjmp	.+2456   	; 0x4bf0 <f_mkfs+0xa02>
#if _MAX_SS != 512					/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_DISK_ERR;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
    4258:	8b 2d       	mov	r24, r11
    425a:	61 e0       	ldi	r22, 0x01	; 1
    425c:	ae 01       	movw	r20, r28
    425e:	4b 5f       	subi	r20, 0xFB	; 251
    4260:	5f 4f       	sbci	r21, 0xFF	; 255
    4262:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <disk_ioctl>
    4266:	88 23       	and	r24, r24
    4268:	09 f0       	breq	.+2      	; 0x426c <f_mkfs+0x7e>
    426a:	c4 c4       	rjmp	.+2440   	; 0x4bf4 <f_mkfs+0xa06>
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	af 81       	ldd	r26, Y+7	; 0x07
    4272:	b8 85       	ldd	r27, Y+8	; 0x08
    4274:	80 38       	cpi	r24, 0x80	; 128
    4276:	91 05       	cpc	r25, r1
    4278:	a1 05       	cpc	r26, r1
    427a:	b1 05       	cpc	r27, r1
    427c:	08 f4       	brcc	.+2      	; 0x4280 <f_mkfs+0x92>
    427e:	bc c4       	rjmp	.+2424   	; 0x4bf8 <f_mkfs+0xa0a>
		return FR_DISK_ERR;
	b_vol = (sfd == 1) ? 0 : 63;	/* Volume start sector */
    4280:	11 30       	cpi	r17, 0x01	; 1
    4282:	29 f4       	brne	.+10     	; 0x428e <f_mkfs+0xa0>
    4284:	1a 8a       	std	Y+18, r1	; 0x12
    4286:	1b 8a       	std	Y+19, r1	; 0x13
    4288:	1c 8a       	std	Y+20, r1	; 0x14
    428a:	1d 8a       	std	Y+21, r1	; 0x15
    428c:	0e c0       	rjmp	.+28     	; 0x42aa <f_mkfs+0xbc>
    428e:	0f 2e       	mov	r0, r31
    4290:	ff e3       	ldi	r31, 0x3F	; 63
    4292:	4f 2e       	mov	r4, r31
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	5f 2e       	mov	r5, r31
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	6f 2e       	mov	r6, r31
    429c:	f0 e0       	ldi	r31, 0x00	; 0
    429e:	7f 2e       	mov	r7, r31
    42a0:	f0 2d       	mov	r31, r0
    42a2:	4a 8a       	std	Y+18, r4	; 0x12
    42a4:	5b 8a       	std	Y+19, r5	; 0x13
    42a6:	6c 8a       	std	Y+20, r6	; 0x14
    42a8:	7d 8a       	std	Y+21, r7	; 0x15
	n_vol -= b_vol;
    42aa:	2c 01       	movw	r4, r24
    42ac:	3d 01       	movw	r6, r26
    42ae:	2a 89       	ldd	r18, Y+18	; 0x12
    42b0:	3b 89       	ldd	r19, Y+19	; 0x13
    42b2:	4c 89       	ldd	r20, Y+20	; 0x14
    42b4:	5d 89       	ldd	r21, Y+21	; 0x15
    42b6:	42 1a       	sub	r4, r18
    42b8:	53 0a       	sbc	r5, r19
    42ba:	64 0a       	sbc	r6, r20
    42bc:	75 0a       	sbc	r7, r21
    42be:	4a 86       	std	Y+10, r4	; 0x0a
    42c0:	5b 86       	std	Y+11, r5	; 0x0b
    42c2:	6c 86       	std	Y+12, r6	; 0x0c
    42c4:	7d 86       	std	Y+13, r7	; 0x0d
    42c6:	4d 82       	std	Y+5, r4	; 0x05
    42c8:	5e 82       	std	Y+6, r5	; 0x06
    42ca:	6f 82       	std	Y+7, r6	; 0x07
    42cc:	78 86       	std	Y+8, r7	; 0x08
	if (au & (au - 1)) au = 0;		/* Check validity of the allocation unit size */
    42ce:	c6 01       	movw	r24, r12
    42d0:	01 97       	sbiw	r24, 0x01	; 1
    42d2:	8c 21       	and	r24, r12
    42d4:	9d 21       	and	r25, r13
    42d6:	00 97       	sbiw	r24, 0x00	; 0
    42d8:	19 f4       	brne	.+6      	; 0x42e0 <f_mkfs+0xf2>
	if (!au) {						/* AU auto selection */
    42da:	c1 14       	cp	r12, r1
    42dc:	d1 04       	cpc	r13, r1
    42de:	71 f5       	brne	.+92     	; 0x433c <f_mkfs+0x14e>
		vs = n_vol / (2000 / (SS(fs) / 512));
    42e0:	6a 85       	ldd	r22, Y+10	; 0x0a
    42e2:	7b 85       	ldd	r23, Y+11	; 0x0b
    42e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    42e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    42e8:	20 ed       	ldi	r18, 0xD0	; 208
    42ea:	37 e0       	ldi	r19, 0x07	; 7
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>
    42f4:	69 01       	movw	r12, r18
    42f6:	7a 01       	movw	r14, r20
		for (i = 0; vs < vst[i]; i++) ;
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	c3 16       	cp	r12, r19
    42fc:	34 e0       	ldi	r19, 0x04	; 4
    42fe:	d3 06       	cpc	r13, r19
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	e3 06       	cpc	r14, r19
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	f3 06       	cpc	r15, r19
    4308:	80 f4       	brcc	.+32     	; 0x432a <f_mkfs+0x13c>
    430a:	e7 ec       	ldi	r30, 0xC7	; 199
    430c:	f4 e0       	ldi	r31, 0x04	; 4
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	2f 5f       	subi	r18, 0xFF	; 255
    4314:	3f 4f       	sbci	r19, 0xFF	; 255
    4316:	81 91       	ld	r24, Z+
    4318:	91 91       	ld	r25, Z+
    431a:	a0 e0       	ldi	r26, 0x00	; 0
    431c:	b0 e0       	ldi	r27, 0x00	; 0
    431e:	c8 16       	cp	r12, r24
    4320:	d9 06       	cpc	r13, r25
    4322:	ea 06       	cpc	r14, r26
    4324:	fb 06       	cpc	r15, r27
    4326:	a8 f3       	brcs	.-22     	; 0x4312 <f_mkfs+0x124>
    4328:	02 c0       	rjmp	.+4      	; 0x432e <f_mkfs+0x140>
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
		au = cst[i];
    432e:	22 0f       	add	r18, r18
    4330:	33 1f       	adc	r19, r19
    4332:	f9 01       	movw	r30, r18
    4334:	e5 52       	subi	r30, 0x25	; 37
    4336:	fb 4f       	sbci	r31, 0xFB	; 251
    4338:	c0 80       	ld	r12, Z
    433a:	d1 80       	ldd	r13, Z+1	; 0x01
	}
	if (_MAX_SS != 512 && au < SS(fs)) au = SS(fs);
	au /= SS(fs);		/* Number of sectors per cluster */
    433c:	c6 01       	movw	r24, r12
    433e:	89 2f       	mov	r24, r25
    4340:	99 27       	eor	r25, r25
    4342:	86 95       	lsr	r24
	if (au == 0) au = 1;
    4344:	00 97       	sbiw	r24, 0x00	; 0
    4346:	11 f4       	brne	.+4      	; 0x434c <f_mkfs+0x15e>
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	9b a3       	lds	r25, 0x5b
    434e:	8a a3       	lds	r24, 0x5a
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
    4350:	2c 01       	movw	r4, r24
    4352:	66 24       	eor	r6, r6
    4354:	77 24       	eor	r7, r7
    4356:	4e 8e       	std	Y+30, r4	; 0x1e
    4358:	5f 8e       	std	Y+31, r5	; 0x1f
    435a:	68 a2       	lds	r22, 0x98
    435c:	79 a2       	lds	r23, 0x99
    435e:	6a 85       	ldd	r22, Y+10	; 0x0a
    4360:	7b 85       	ldd	r23, Y+11	; 0x0b
    4362:	8c 85       	ldd	r24, Y+12	; 0x0c
    4364:	9d 85       	ldd	r25, Y+13	; 0x0d
    4366:	a3 01       	movw	r20, r6
    4368:	92 01       	movw	r18, r4
    436a:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>
    436e:	69 01       	movw	r12, r18
    4370:	7a 01       	movw	r14, r20
    4372:	da 01       	movw	r26, r20
    4374:	c9 01       	movw	r24, r18
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    4376:	86 3f       	cpi	r24, 0xF6	; 246
    4378:	2f e0       	ldi	r18, 0x0F	; 15
    437a:	92 07       	cpc	r25, r18
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	a2 07       	cpc	r26, r18
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	b2 07       	cpc	r27, r18
    4384:	18 f4       	brcc	.+6      	; 0x438c <f_mkfs+0x19e>
	if (au == 0) au = 1;
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
    4386:	31 e0       	ldi	r19, 0x01	; 1
    4388:	39 87       	std	Y+9, r19	; 0x09
    438a:	02 c0       	rjmp	.+4      	; 0x4390 <f_mkfs+0x1a2>
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    438c:	42 e0       	ldi	r20, 0x02	; 2
    438e:	49 87       	std	Y+9, r20	; 0x09
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    4390:	86 3f       	cpi	r24, 0xF6	; 246
    4392:	5f ef       	ldi	r21, 0xFF	; 255
    4394:	95 07       	cpc	r25, r21
    4396:	50 e0       	ldi	r21, 0x00	; 0
    4398:	a5 07       	cpc	r26, r21
    439a:	50 e0       	ldi	r21, 0x00	; 0
    439c:	b5 07       	cpc	r27, r21
    439e:	20 f4       	brcc	.+8      	; 0x43a8 <f_mkfs+0x1ba>

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
    43a0:	89 85       	ldd	r24, Y+9	; 0x09
    43a2:	83 30       	cpi	r24, 0x03	; 3
    43a4:	49 f5       	brne	.+82     	; 0x43f8 <f_mkfs+0x20a>
    43a6:	02 c0       	rjmp	.+4      	; 0x43ac <f_mkfs+0x1be>

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    43a8:	93 e0       	ldi	r25, 0x03	; 3
    43aa:	99 87       	std	Y+9, r25	; 0x09

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    43ac:	d7 01       	movw	r26, r14
    43ae:	c6 01       	movw	r24, r12
    43b0:	88 0f       	add	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	aa 1f       	adc	r26, r26
    43b6:	bb 1f       	adc	r27, r27
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	aa 1f       	adc	r26, r26
    43be:	bb 1f       	adc	r27, r27
    43c0:	89 5f       	subi	r24, 0xF9	; 249
    43c2:	9d 4f       	sbci	r25, 0xFD	; 253
    43c4:	af 4f       	sbci	r26, 0xFF	; 255
    43c6:	bf 4f       	sbci	r27, 0xFF	; 255
    43c8:	2c 01       	movw	r4, r24
    43ca:	3d 01       	movw	r6, r26
    43cc:	03 2e       	mov	r0, r19
    43ce:	39 e0       	ldi	r19, 0x09	; 9
    43d0:	76 94       	lsr	r7
    43d2:	67 94       	ror	r6
    43d4:	57 94       	ror	r5
    43d6:	47 94       	ror	r4
    43d8:	3a 95       	dec	r19
    43da:	d1 f7       	brne	.-12     	; 0x43d0 <f_mkfs+0x1e2>
    43dc:	30 2d       	mov	r19, r0
		n_rsv = 32;
		n_dir = 0;
    43de:	1a 8e       	std	Y+26, r1	; 0x1a
    43e0:	1b 8e       	std	Y+27, r1	; 0x1b
    43e2:	1c 8e       	std	Y+28, r1	; 0x1c
    43e4:	1d 8e       	std	Y+29, r1	; 0x1d
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
    43e6:	20 e2       	ldi	r18, 0x20	; 32
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	2e 8b       	std	Y+22, r18	; 0x16
    43f0:	3f 8b       	std	Y+23, r19	; 0x17
    43f2:	48 8f       	std	Y+24, r20	; 0x18
    43f4:	59 8f       	std	Y+25, r21	; 0x19
    43f6:	40 c0       	rjmp	.+128    	; 0x4478 <f_mkfs+0x28a>
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    43f8:	39 85       	ldd	r19, Y+9	; 0x09
    43fa:	31 30       	cpi	r19, 0x01	; 1
    43fc:	a9 f4       	brne	.+42     	; 0x4428 <f_mkfs+0x23a>
    43fe:	d7 01       	movw	r26, r14
    4400:	c6 01       	movw	r24, r12
    4402:	88 0f       	add	r24, r24
    4404:	99 1f       	adc	r25, r25
    4406:	aa 1f       	adc	r26, r26
    4408:	bb 1f       	adc	r27, r27
    440a:	8c 0d       	add	r24, r12
    440c:	9d 1d       	adc	r25, r13
    440e:	ae 1d       	adc	r26, r14
    4410:	bf 1d       	adc	r27, r15
    4412:	01 96       	adiw	r24, 0x01	; 1
    4414:	a1 1d       	adc	r26, r1
    4416:	b1 1d       	adc	r27, r1
    4418:	b6 95       	lsr	r27
    441a:	a7 95       	ror	r26
    441c:	97 95       	ror	r25
    441e:	87 95       	ror	r24
    4420:	03 96       	adiw	r24, 0x03	; 3
    4422:	a1 1d       	adc	r26, r1
    4424:	b1 1d       	adc	r27, r1
    4426:	09 c0       	rjmp	.+18     	; 0x443a <f_mkfs+0x24c>
    4428:	d7 01       	movw	r26, r14
    442a:	c6 01       	movw	r24, r12
    442c:	02 96       	adiw	r24, 0x02	; 2
    442e:	a1 1d       	adc	r26, r1
    4430:	b1 1d       	adc	r27, r1
    4432:	88 0f       	add	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	aa 1f       	adc	r26, r26
    4438:	bb 1f       	adc	r27, r27
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
    443a:	81 50       	subi	r24, 0x01	; 1
    443c:	9e 4f       	sbci	r25, 0xFE	; 254
    443e:	af 4f       	sbci	r26, 0xFF	; 255
    4440:	bf 4f       	sbci	r27, 0xFF	; 255
    4442:	2c 01       	movw	r4, r24
    4444:	3d 01       	movw	r6, r26
    4446:	03 2e       	mov	r0, r19
    4448:	39 e0       	ldi	r19, 0x09	; 9
    444a:	76 94       	lsr	r7
    444c:	67 94       	ror	r6
    444e:	57 94       	ror	r5
    4450:	47 94       	ror	r4
    4452:	3a 95       	dec	r19
    4454:	d1 f7       	brne	.-12     	; 0x444a <f_mkfs+0x25c>
    4456:	30 2d       	mov	r19, r0
		n_rsv = 1;
		n_dir = N_ROOTDIR * 32UL / SS(fs);
    4458:	80 e2       	ldi	r24, 0x20	; 32
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	a0 e0       	ldi	r26, 0x00	; 0
    445e:	b0 e0       	ldi	r27, 0x00	; 0
    4460:	8a 8f       	std	Y+26, r24	; 0x1a
    4462:	9b 8f       	std	Y+27, r25	; 0x1b
    4464:	ac 8f       	std	Y+28, r26	; 0x1c
    4466:	bd 8f       	std	Y+29, r27	; 0x1d
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
		n_rsv = 1;
    4468:	21 e0       	ldi	r18, 0x01	; 1
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	50 e0       	ldi	r21, 0x00	; 0
    4470:	2e 8b       	std	Y+22, r18	; 0x16
    4472:	3f 8b       	std	Y+23, r19	; 0x17
    4474:	48 8f       	std	Y+24, r20	; 0x18
    4476:	59 8f       	std	Y+25, r21	; 0x19
		n_dir = N_ROOTDIR * 32UL / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
    4478:	8e 89       	ldd	r24, Y+22	; 0x16
    447a:	9f 89       	ldd	r25, Y+23	; 0x17
    447c:	a8 8d       	ldd	r26, Y+24	; 0x18
    447e:	b9 8d       	ldd	r27, Y+25	; 0x19
    4480:	2a 89       	ldd	r18, Y+18	; 0x12
    4482:	3b 89       	ldd	r19, Y+19	; 0x13
    4484:	4c 89       	ldd	r20, Y+20	; 0x14
    4486:	5d 89       	ldd	r21, Y+21	; 0x15
    4488:	82 0f       	add	r24, r18
    448a:	93 1f       	adc	r25, r19
    448c:	a4 1f       	adc	r26, r20
    448e:	b5 1f       	adc	r27, r21
    4490:	8e 87       	std	Y+14, r24	; 0x0e
    4492:	9f 87       	std	Y+15, r25	; 0x0f
    4494:	a8 8b       	std	Y+16, r26	; 0x10
    4496:	b9 8b       	std	Y+17, r27	; 0x11
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
    4498:	8a 8d       	ldd	r24, Y+26	; 0x1a
    449a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    449c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    449e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    44a0:	84 0d       	add	r24, r4
    44a2:	95 1d       	adc	r25, r5
    44a4:	a6 1d       	adc	r26, r6
    44a6:	b7 1d       	adc	r27, r7
	b_data = b_dir + n_dir;				/* Data area start sector */
    44a8:	ce 84       	ldd	r12, Y+14	; 0x0e
    44aa:	df 84       	ldd	r13, Y+15	; 0x0f
    44ac:	e8 88       	ldd	r14, Y+16	; 0x10
    44ae:	f9 88       	ldd	r15, Y+17	; 0x11
    44b0:	c8 0e       	add	r12, r24
    44b2:	d9 1e       	adc	r13, r25
    44b4:	ea 1e       	adc	r14, r26
    44b6:	fb 1e       	adc	r15, r27
	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
    44b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    44ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    44bc:	a8 a1       	lds	r26, 0x48
    44be:	b9 a1       	lds	r27, 0x49
    44c0:	8c 0d       	add	r24, r12
    44c2:	9d 1d       	adc	r25, r13
    44c4:	ae 1d       	adc	r26, r14
    44c6:	bf 1d       	adc	r27, r15
    44c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    44ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    44cc:	4c 85       	ldd	r20, Y+12	; 0x0c
    44ce:	5d 85       	ldd	r21, Y+13	; 0x0d
    44d0:	28 17       	cp	r18, r24
    44d2:	39 07       	cpc	r19, r25
    44d4:	4a 07       	cpc	r20, r26
    44d6:	5b 07       	cpc	r21, r27
    44d8:	08 f4       	brcc	.+2      	; 0x44dc <f_mkfs+0x2ee>
    44da:	90 c3       	rjmp	.+1824   	; 0x4bfc <f_mkfs+0xa0e>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_DISK_ERR;
    44dc:	8b 2d       	mov	r24, r11
    44de:	63 e0       	ldi	r22, 0x03	; 3
    44e0:	ae 01       	movw	r20, r28
    44e2:	4f 5f       	subi	r20, 0xFF	; 255
    44e4:	5f 4f       	sbci	r21, 0xFF	; 255
    44e6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <disk_ioctl>
    44ea:	88 23       	and	r24, r24
    44ec:	09 f0       	breq	.+2      	; 0x44f0 <f_mkfs+0x302>
    44ee:	88 c3       	rjmp	.+1808   	; 0x4c00 <f_mkfs+0xa12>
	if (!n || n > 32768) return FR_MKFS_ABORTED;
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	9a 81       	ldd	r25, Y+2	; 0x02
    44f4:	ab 81       	ldd	r26, Y+3	; 0x03
    44f6:	bc 81       	ldd	r27, Y+4	; 0x04
    44f8:	8c a3       	lds	r24, 0x5c
    44fa:	9d a3       	lds	r25, 0x5d
    44fc:	ae a3       	lds	r26, 0x5e
    44fe:	bf a3       	lds	r27, 0x5f
    4500:	01 97       	sbiw	r24, 0x01	; 1
    4502:	a1 09       	sbc	r26, r1
    4504:	b1 09       	sbc	r27, r1
    4506:	80 30       	cpi	r24, 0x00	; 0
    4508:	e0 e8       	ldi	r30, 0x80	; 128
    450a:	9e 07       	cpc	r25, r30
    450c:	e0 e0       	ldi	r30, 0x00	; 0
    450e:	ae 07       	cpc	r26, r30
    4510:	e0 e0       	ldi	r30, 0x00	; 0
    4512:	be 07       	cpc	r27, r30
    4514:	08 f0       	brcs	.+2      	; 0x4518 <f_mkfs+0x32a>
    4516:	76 c3       	rjmp	.+1772   	; 0x4c04 <f_mkfs+0xa16>
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest boundary from current data start */
    4518:	a7 01       	movw	r20, r14
    451a:	96 01       	movw	r18, r12
    451c:	28 0f       	add	r18, r24
    451e:	39 1f       	adc	r19, r25
    4520:	4a 1f       	adc	r20, r26
    4522:	5b 1f       	adc	r21, r27
    4524:	8c a1       	lds	r24, 0x4c
    4526:	9d a1       	lds	r25, 0x4d
    4528:	ae a1       	lds	r26, 0x4e
    452a:	bf a1       	lds	r27, 0x4f
    452c:	b0 95       	com	r27
    452e:	a0 95       	com	r26
    4530:	90 95       	com	r25
    4532:	81 95       	neg	r24
    4534:	9f 4f       	sbci	r25, 0xFF	; 255
    4536:	af 4f       	sbci	r26, 0xFF	; 255
    4538:	bf 4f       	sbci	r27, 0xFF	; 255
    453a:	82 23       	and	r24, r18
    453c:	93 23       	and	r25, r19
    453e:	a4 23       	and	r26, r20
    4540:	b5 23       	and	r27, r21
	n = (n - b_data) / N_FATS;
    4542:	8c 19       	sub	r24, r12
    4544:	9d 09       	sbc	r25, r13
    4546:	ae 09       	sbc	r26, r14
    4548:	bf 09       	sbc	r27, r15
    454a:	89 83       	std	Y+1, r24	; 0x01
    454c:	9a 83       	std	Y+2, r25	; 0x02
    454e:	ab 83       	std	Y+3, r26	; 0x03
    4550:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT start */
    4552:	39 85       	ldd	r19, Y+9	; 0x09
    4554:	33 30       	cpi	r19, 0x03	; 3
    4556:	09 f0       	breq	.+2      	; 0x455a <f_mkfs+0x36c>
    4558:	48 c0       	rjmp	.+144    	; 0x45ea <f_mkfs+0x3fc>
		n_rsv += n;
    455a:	2e 89       	ldd	r18, Y+22	; 0x16
    455c:	3f 89       	ldd	r19, Y+23	; 0x17
    455e:	48 8d       	ldd	r20, Y+24	; 0x18
    4560:	59 8d       	ldd	r21, Y+25	; 0x19
    4562:	28 0f       	add	r18, r24
    4564:	39 1f       	adc	r19, r25
    4566:	4a 1f       	adc	r20, r26
    4568:	5b 1f       	adc	r21, r27
    456a:	2e 8b       	std	Y+22, r18	; 0x16
    456c:	3f 8b       	std	Y+23, r19	; 0x17
    456e:	48 8f       	std	Y+24, r20	; 0x18
    4570:	59 8f       	std	Y+25, r21	; 0x19
		b_fat += n;
    4572:	2e 85       	ldd	r18, Y+14	; 0x0e
    4574:	3f 85       	ldd	r19, Y+15	; 0x0f
    4576:	48 89       	ldd	r20, Y+16	; 0x10
    4578:	59 89       	ldd	r21, Y+17	; 0x11
    457a:	28 0f       	add	r18, r24
    457c:	39 1f       	adc	r19, r25
    457e:	4a 1f       	adc	r20, r26
    4580:	5b 1f       	adc	r21, r27
    4582:	2e 87       	std	Y+14, r18	; 0x0e
    4584:	3f 87       	std	Y+15, r19	; 0x0f
    4586:	48 8b       	std	Y+16, r20	; 0x10
    4588:	59 8b       	std	Y+17, r21	; 0x11
		n_fat += n;
	}
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    458a:	cd 80       	ldd	r12, Y+5	; 0x05
    458c:	de 80       	ldd	r13, Y+6	; 0x06
    458e:	ef 80       	ldd	r14, Y+7	; 0x07
    4590:	f8 84       	ldd	r15, Y+8	; 0x08
    4592:	d7 01       	movw	r26, r14
    4594:	c6 01       	movw	r24, r12
    4596:	2e 89       	ldd	r18, Y+22	; 0x16
    4598:	3f 89       	ldd	r19, Y+23	; 0x17
    459a:	48 8d       	ldd	r20, Y+24	; 0x18
    459c:	59 8d       	ldd	r21, Y+25	; 0x19
    459e:	82 1b       	sub	r24, r18
    45a0:	93 0b       	sbc	r25, r19
    45a2:	a4 0b       	sbc	r26, r20
    45a4:	b5 0b       	sbc	r27, r21
    45a6:	84 19       	sub	r24, r4
    45a8:	95 09       	sbc	r25, r5
    45aa:	a6 09       	sbc	r26, r6
    45ac:	b7 09       	sbc	r27, r7
    45ae:	bc 01       	movw	r22, r24
    45b0:	cd 01       	movw	r24, r26
    45b2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    45b4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    45b6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    45b8:	5d 8d       	ldd	r21, Y+29	; 0x1d
    45ba:	62 1b       	sub	r22, r18
    45bc:	73 0b       	sbc	r23, r19
    45be:	84 0b       	sbc	r24, r20
    45c0:	95 0b       	sbc	r25, r21
    45c2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    45c4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    45c6:	48 a1       	lds	r20, 0x48
    45c8:	59 a1       	lds	r21, 0x49
    45ca:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>
    45ce:	2a 87       	std	Y+10, r18	; 0x0a
    45d0:	3b 87       	std	Y+11, r19	; 0x0b
    45d2:	4c 87       	std	Y+12, r20	; 0x0c
    45d4:	5d 87       	std	Y+13, r21	; 0x0d
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
    45d6:	26 3f       	cpi	r18, 0xF6	; 246
    45d8:	8f ef       	ldi	r24, 0xFF	; 255
    45da:	38 07       	cpc	r19, r24
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	48 07       	cpc	r20, r24
    45e0:	80 e0       	ldi	r24, 0x00	; 0
    45e2:	58 07       	cpc	r21, r24
    45e4:	08 f4       	brcc	.+2      	; 0x45e8 <f_mkfs+0x3fa>
    45e6:	10 c3       	rjmp	.+1568   	; 0x4c08 <f_mkfs+0xa1a>
    45e8:	3a c0       	rjmp	.+116    	; 0x465e <f_mkfs+0x470>
	n = (n - b_data) / N_FATS;
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT start */
		n_rsv += n;
		b_fat += n;
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
    45ea:	48 0e       	add	r4, r24
    45ec:	59 1e       	adc	r5, r25
    45ee:	6a 1e       	adc	r6, r26
    45f0:	7b 1e       	adc	r7, r27
	}
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    45f2:	cd 80       	ldd	r12, Y+5	; 0x05
    45f4:	de 80       	ldd	r13, Y+6	; 0x06
    45f6:	ef 80       	ldd	r14, Y+7	; 0x07
    45f8:	f8 84       	ldd	r15, Y+8	; 0x08
    45fa:	d7 01       	movw	r26, r14
    45fc:	c6 01       	movw	r24, r12
    45fe:	2e 89       	ldd	r18, Y+22	; 0x16
    4600:	3f 89       	ldd	r19, Y+23	; 0x17
    4602:	48 8d       	ldd	r20, Y+24	; 0x18
    4604:	59 8d       	ldd	r21, Y+25	; 0x19
    4606:	82 1b       	sub	r24, r18
    4608:	93 0b       	sbc	r25, r19
    460a:	a4 0b       	sbc	r26, r20
    460c:	b5 0b       	sbc	r27, r21
    460e:	84 19       	sub	r24, r4
    4610:	95 09       	sbc	r25, r5
    4612:	a6 09       	sbc	r26, r6
    4614:	b7 09       	sbc	r27, r7
    4616:	bc 01       	movw	r22, r24
    4618:	cd 01       	movw	r24, r26
    461a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    461c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    461e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4620:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4622:	62 1b       	sub	r22, r18
    4624:	73 0b       	sbc	r23, r19
    4626:	84 0b       	sbc	r24, r20
    4628:	95 0b       	sbc	r25, r21
    462a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    462c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    462e:	48 a1       	lds	r20, 0x48
    4630:	59 a1       	lds	r21, 0x49
    4632:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>
    4636:	2a 87       	std	Y+10, r18	; 0x0a
    4638:	3b 87       	std	Y+11, r19	; 0x0b
    463a:	4c 87       	std	Y+12, r20	; 0x0c
    463c:	5d 87       	std	Y+13, r21	; 0x0d
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
    463e:	39 85       	ldd	r19, Y+9	; 0x09
    4640:	32 30       	cpi	r19, 0x02	; 2
    4642:	69 f4       	brne	.+26     	; 0x465e <f_mkfs+0x470>
    4644:	8a 85       	ldd	r24, Y+10	; 0x0a
    4646:	9b 85       	ldd	r25, Y+11	; 0x0b
    4648:	ac 85       	ldd	r26, Y+12	; 0x0c
    464a:	bd 85       	ldd	r27, Y+13	; 0x0d
    464c:	86 3f       	cpi	r24, 0xF6	; 246
    464e:	ef e0       	ldi	r30, 0x0F	; 15
    4650:	9e 07       	cpc	r25, r30
    4652:	e0 e0       	ldi	r30, 0x00	; 0
    4654:	ae 07       	cpc	r26, r30
    4656:	e0 e0       	ldi	r30, 0x00	; 0
    4658:	be 07       	cpc	r27, r30
    465a:	08 f4       	brcc	.+2      	; 0x465e <f_mkfs+0x470>
    465c:	d7 c2       	rjmp	.+1454   	; 0x4c0c <f_mkfs+0xa1e>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;

	/* Create partition table if required */
	if (sfd == 1) {
    465e:	11 30       	cpi	r17, 0x01	; 1
    4660:	09 f4       	brne	.+2      	; 0x4664 <f_mkfs+0x476>
    4662:	9a c0       	rjmp	.+308    	; 0x4798 <f_mkfs+0x5aa>
		md = 0xF0;
	} else {
		DWORD n_disk = b_vol + n_vol;
    4664:	2a 89       	ldd	r18, Y+18	; 0x12
    4666:	3b 89       	ldd	r19, Y+19	; 0x13
    4668:	4c 89       	ldd	r20, Y+20	; 0x14
    466a:	5d 89       	ldd	r21, Y+21	; 0x15
    466c:	c2 0e       	add	r12, r18
    466e:	d3 1e       	adc	r13, r19
    4670:	e4 1e       	adc	r14, r20
    4672:	f5 1e       	adc	r15, r21

		mem_set(fs->win, 0, SS(fs));
    4674:	0f 2e       	mov	r0, r31
    4676:	f2 e3       	ldi	r31, 0x32	; 50
    4678:	2f 2e       	mov	r2, r31
    467a:	33 24       	eor	r3, r3
    467c:	f0 2d       	mov	r31, r0
    467e:	28 0c       	add	r2, r8
    4680:	39 1c       	adc	r3, r9
    4682:	c1 01       	movw	r24, r2
    4684:	60 e0       	ldi	r22, 0x00	; 0
    4686:	70 e0       	ldi	r23, 0x00	; 0
    4688:	40 e0       	ldi	r20, 0x00	; 0
    468a:	52 e0       	ldi	r21, 0x02	; 2
    468c:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
		tbl = fs->win+MBR_Table;
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4690:	f4 01       	movw	r30, r8
    4692:	e0 51       	subi	r30, 0x10	; 16
    4694:	fe 4f       	sbci	r31, 0xFE	; 254
    4696:	80 e8       	ldi	r24, 0x80	; 128
    4698:	91 e0       	ldi	r25, 0x01	; 1
    469a:	a1 e0       	ldi	r26, 0x01	; 1
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	80 83       	st	Z, r24
    46a0:	91 83       	std	Z+1, r25	; 0x01
    46a2:	a2 83       	std	Z+2, r26	; 0x02
    46a4:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	c3 16       	cp	r12, r19
    46aa:	34 e0       	ldi	r19, 0x04	; 4
    46ac:	d3 06       	cpc	r13, r19
    46ae:	3b ef       	ldi	r19, 0xFB	; 251
    46b0:	e3 06       	cpc	r14, r19
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	f3 06       	cpc	r15, r19
    46b6:	f0 f4       	brcc	.+60     	; 0x46f4 <f_mkfs+0x506>
			n_disk = n_disk / 63 / 255;
    46b8:	c7 01       	movw	r24, r14
    46ba:	b6 01       	movw	r22, r12
    46bc:	21 ec       	ldi	r18, 0xC1	; 193
    46be:	3e e3       	ldi	r19, 0x3E	; 62
    46c0:	40 e0       	ldi	r20, 0x00	; 0
    46c2:	50 e0       	ldi	r21, 0x00	; 0
    46c4:	0e 94 92 28 	call	0x5124	; 0x5124 <__udivmodsi4>
    46c8:	89 01       	movw	r16, r18
    46ca:	9a 01       	movw	r18, r20
			tbl[7] = (BYTE)n_disk;
    46cc:	f4 01       	movw	r30, r8
    46ce:	e9 50       	subi	r30, 0x09	; 9
    46d0:	fe 4f       	sbci	r31, 0xFE	; 254
    46d2:	00 83       	st	Z, r16
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    46d4:	f4 01       	movw	r30, r8
    46d6:	ea 50       	subi	r30, 0x0A	; 10
    46d8:	fe 4f       	sbci	r31, 0xFE	; 254
    46da:	d9 01       	movw	r26, r18
    46dc:	c8 01       	movw	r24, r16
    46de:	b6 95       	lsr	r27
    46e0:	a7 95       	ror	r26
    46e2:	97 95       	ror	r25
    46e4:	87 95       	ror	r24
    46e6:	b6 95       	lsr	r27
    46e8:	a7 95       	ror	r26
    46ea:	97 95       	ror	r25
    46ec:	87 95       	ror	r24
    46ee:	8f 63       	ori	r24, 0x3F	; 63
    46f0:	80 83       	st	Z, r24
    46f2:	07 c0       	rjmp	.+14     	; 0x4702 <f_mkfs+0x514>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    46f4:	f4 01       	movw	r30, r8
    46f6:	ea 50       	subi	r30, 0x0A	; 10
    46f8:	fe 4f       	sbci	r31, 0xFE	; 254
    46fa:	8f ef       	ldi	r24, 0xFF	; 255
    46fc:	9f ef       	ldi	r25, 0xFF	; 255
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	80 83       	st	Z, r24
		}
		tbl[5] = 254;
    4702:	f4 01       	movw	r30, r8
    4704:	eb 50       	subi	r30, 0x0B	; 11
    4706:	fe 4f       	sbci	r31, 0xFE	; 254
    4708:	8e ef       	ldi	r24, 0xFE	; 254
    470a:	80 83       	st	Z, r24
		if (fmt != FS_FAT32)			/* System ID */
    470c:	49 85       	ldd	r20, Y+9	; 0x09
    470e:	43 30       	cpi	r20, 0x03	; 3
    4710:	a1 f0       	breq	.+40     	; 0x473a <f_mkfs+0x54c>
			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
    4712:	8d 81       	ldd	r24, Y+5	; 0x05
    4714:	9e 81       	ldd	r25, Y+6	; 0x06
    4716:	af 81       	ldd	r26, Y+7	; 0x07
    4718:	b8 85       	ldd	r27, Y+8	; 0x08
    471a:	80 30       	cpi	r24, 0x00	; 0
    471c:	50 e0       	ldi	r21, 0x00	; 0
    471e:	95 07       	cpc	r25, r21
    4720:	51 e0       	ldi	r21, 0x01	; 1
    4722:	a5 07       	cpc	r26, r21
    4724:	50 e0       	ldi	r21, 0x00	; 0
    4726:	b5 07       	cpc	r27, r21
    4728:	10 f4       	brcc	.+4      	; 0x472e <f_mkfs+0x540>
    472a:	84 e0       	ldi	r24, 0x04	; 4
    472c:	01 c0       	rjmp	.+2      	; 0x4730 <f_mkfs+0x542>
    472e:	86 e0       	ldi	r24, 0x06	; 6
    4730:	f4 01       	movw	r30, r8
    4732:	ec 50       	subi	r30, 0x0C	; 12
    4734:	fe 4f       	sbci	r31, 0xFE	; 254
    4736:	80 83       	st	Z, r24
    4738:	05 c0       	rjmp	.+10     	; 0x4744 <f_mkfs+0x556>
		else
			tbl[4] = 0x0c;
    473a:	f4 01       	movw	r30, r8
    473c:	ec 50       	subi	r30, 0x0C	; 12
    473e:	fe 4f       	sbci	r31, 0xFE	; 254
    4740:	8c e0       	ldi	r24, 0x0C	; 12
    4742:	80 83       	st	Z, r24
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4744:	f4 01       	movw	r30, r8
    4746:	e8 50       	subi	r30, 0x08	; 8
    4748:	fe 4f       	sbci	r31, 0xFE	; 254
    474a:	8f e3       	ldi	r24, 0x3F	; 63
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	a0 e0       	ldi	r26, 0x00	; 0
    4750:	b0 e0       	ldi	r27, 0x00	; 0
    4752:	80 83       	st	Z, r24
    4754:	91 83       	std	Z+1, r25	; 0x01
    4756:	a2 83       	std	Z+2, r26	; 0x02
    4758:	b3 83       	std	Z+3, r27	; 0x03
		ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
    475a:	f4 01       	movw	r30, r8
    475c:	e4 50       	subi	r30, 0x04	; 4
    475e:	fe 4f       	sbci	r31, 0xFE	; 254
    4760:	8d 81       	ldd	r24, Y+5	; 0x05
    4762:	9e 81       	ldd	r25, Y+6	; 0x06
    4764:	af 81       	ldd	r26, Y+7	; 0x07
    4766:	b8 85       	ldd	r27, Y+8	; 0x08
    4768:	80 83       	st	Z, r24
    476a:	91 83       	std	Z+1, r25	; 0x01
    476c:	a2 83       	std	Z+2, r26	; 0x02
    476e:	b3 83       	std	Z+3, r27	; 0x03
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    4770:	f4 01       	movw	r30, r8
    4772:	e0 5d       	subi	r30, 0xD0	; 208
    4774:	fd 4f       	sbci	r31, 0xFD	; 253
    4776:	85 e5       	ldi	r24, 0x55	; 85
    4778:	9a ea       	ldi	r25, 0xAA	; 170
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    477e:	8b 2d       	mov	r24, r11
    4780:	b1 01       	movw	r22, r2
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	a9 01       	movw	r20, r18
    4788:	01 e0       	ldi	r16, 0x01	; 1
    478a:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
    478e:	88 23       	and	r24, r24
    4790:	09 f0       	breq	.+2      	; 0x4794 <f_mkfs+0x5a6>
    4792:	3e c2       	rjmp	.+1148   	; 0x4c10 <f_mkfs+0xa22>
			return FR_DISK_ERR;
		md = 0xF8;
    4794:	18 ef       	ldi	r17, 0xF8	; 248
    4796:	01 c0       	rjmp	.+2      	; 0x479a <f_mkfs+0x5ac>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;

	/* Create partition table if required */
	if (sfd == 1) {
		md = 0xF0;
    4798:	10 ef       	ldi	r17, 0xF0	; 240
			return FR_DISK_ERR;
		md = 0xF8;
	}

	/* Create VBR */
	tbl = fs->win;								/* Clear buffer */
    479a:	0f 2e       	mov	r0, r31
    479c:	f2 e3       	ldi	r31, 0x32	; 50
    479e:	2f 2e       	mov	r2, r31
    47a0:	33 24       	eor	r3, r3
    47a2:	f0 2d       	mov	r31, r0
    47a4:	28 0c       	add	r2, r8
    47a6:	39 1c       	adc	r3, r9
	mem_set(tbl, 0, SS(fs));
    47a8:	c1 01       	movw	r24, r2
    47aa:	60 e0       	ldi	r22, 0x00	; 0
    47ac:	70 e0       	ldi	r23, 0x00	; 0
    47ae:	40 e0       	ldi	r20, 0x00	; 0
    47b0:	52 e0       	ldi	r21, 0x02	; 2
    47b2:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    47b6:	8b ee       	ldi	r24, 0xEB	; 235
    47b8:	9e ef       	ldi	r25, 0xFE	; 254
    47ba:	a0 e9       	ldi	r26, 0x90	; 144
    47bc:	b0 e0       	ldi	r27, 0x00	; 0
    47be:	f4 01       	movw	r30, r8
    47c0:	82 ab       	sts	0x52, r24
    47c2:	93 ab       	sts	0x53, r25
    47c4:	a4 ab       	sts	0x54, r26
    47c6:	b5 ab       	sts	0x55, r27
	as = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, as);
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	92 e0       	ldi	r25, 0x02	; 2
    47cc:	96 af       	sts	0x76, r25
    47ce:	85 af       	sts	0x75, r24
	tbl[BPB_SecPerClus] = (BYTE)au;				/* Sectors per cluster */
    47d0:	2a a1       	lds	r18, 0x4a
    47d2:	27 af       	sts	0x77, r18
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    47d4:	e0 5c       	subi	r30, 0xC0	; 192
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	4e 89       	ldd	r20, Y+22	; 0x16
    47da:	5f 89       	ldd	r21, Y+23	; 0x17
    47dc:	51 83       	std	Z+1, r21	; 0x01
    47de:	40 83       	st	Z, r20
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    47e0:	f4 01       	movw	r30, r8
    47e2:	ee 5b       	subi	r30, 0xBE	; 190
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	81 e0       	ldi	r24, 0x01	; 1
    47e8:	80 83       	st	Z, r24
	as = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;		/* Number of rootdir entries */
    47ea:	59 85       	ldd	r21, Y+9	; 0x09
    47ec:	53 30       	cpi	r21, 0x03	; 3
    47ee:	19 f4       	brne	.+6      	; 0x47f6 <f_mkfs+0x608>
    47f0:	cc 24       	eor	r12, r12
    47f2:	dd 24       	eor	r13, r13
    47f4:	04 c0       	rjmp	.+8      	; 0x47fe <f_mkfs+0x610>
    47f6:	cc 24       	eor	r12, r12
    47f8:	dd 24       	eor	r13, r13
    47fa:	68 94       	set
    47fc:	d1 f8       	bld	r13, 1
	ST_WORD(tbl+BPB_RootEntCnt, as);
    47fe:	f4 01       	movw	r30, r8
    4800:	ed 5b       	subi	r30, 0xBD	; 189
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	d1 82       	std	Z+1, r13	; 0x01
    4806:	c0 82       	st	Z, r12
	if (n_vol < 0x10000) {						/* Number of total sectors */
    4808:	8d 81       	ldd	r24, Y+5	; 0x05
    480a:	9e 81       	ldd	r25, Y+6	; 0x06
    480c:	af 81       	ldd	r26, Y+7	; 0x07
    480e:	b8 85       	ldd	r27, Y+8	; 0x08
    4810:	80 30       	cpi	r24, 0x00	; 0
    4812:	e0 e0       	ldi	r30, 0x00	; 0
    4814:	9e 07       	cpc	r25, r30
    4816:	e1 e0       	ldi	r30, 0x01	; 1
    4818:	ae 07       	cpc	r26, r30
    481a:	e0 e0       	ldi	r30, 0x00	; 0
    481c:	be 07       	cpc	r27, r30
    481e:	30 f4       	brcc	.+12     	; 0x482c <f_mkfs+0x63e>
		ST_WORD(tbl+BPB_TotSec16, n_vol);
    4820:	f4 01       	movw	r30, r8
    4822:	eb 5b       	subi	r30, 0xBB	; 187
    4824:	ff 4f       	sbci	r31, 0xFF	; 255
    4826:	91 83       	std	Z+1, r25	; 0x01
    4828:	80 83       	st	Z, r24
    482a:	07 c0       	rjmp	.+14     	; 0x483a <f_mkfs+0x64c>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
    482c:	f4 01       	movw	r30, r8
    482e:	ee 5a       	subi	r30, 0xAE	; 174
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	80 83       	st	Z, r24
    4834:	91 83       	std	Z+1, r25	; 0x01
    4836:	a2 83       	std	Z+2, r26	; 0x02
    4838:	b3 83       	std	Z+3, r27	; 0x03
	}
	tbl[BPB_Media] = md;						/* Media descriptor */
    483a:	f4 01       	movw	r30, r8
    483c:	e9 5b       	subi	r30, 0xB9	; 185
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	10 83       	st	Z, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    4842:	f4 01       	movw	r30, r8
    4844:	e6 5b       	subi	r30, 0xB6	; 182
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	8f e3       	ldi	r24, 0x3F	; 63
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	91 83       	std	Z+1, r25	; 0x01
    484e:	80 83       	st	Z, r24
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    4850:	f4 01       	movw	r30, r8
    4852:	e4 5b       	subi	r30, 0xB4	; 180
    4854:	ff 4f       	sbci	r31, 0xFF	; 255
    4856:	8f ef       	ldi	r24, 0xFF	; 255
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	91 83       	std	Z+1, r25	; 0x01
    485c:	80 83       	st	Z, r24
	ST_DWORD(tbl+BPB_HiddSec, b_vol);			/* Hidden sectors */
    485e:	f4 01       	movw	r30, r8
    4860:	e2 5b       	subi	r30, 0xB2	; 178
    4862:	ff 4f       	sbci	r31, 0xFF	; 255
    4864:	2a 89       	ldd	r18, Y+18	; 0x12
    4866:	3b 89       	ldd	r19, Y+19	; 0x13
    4868:	4c 89       	ldd	r20, Y+20	; 0x14
    486a:	5d 89       	ldd	r21, Y+21	; 0x15
    486c:	20 83       	st	Z, r18
    486e:	31 83       	std	Z+1, r19	; 0x01
    4870:	42 83       	std	Z+2, r20	; 0x02
    4872:	53 83       	std	Z+3, r21	; 0x03
	n = get_fattime();							/* Use current time as VSN */
    4874:	0e 94 00 06 	call	0xc00	; 0xc00 <get_fattime>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	89 83       	std	Y+1, r24	; 0x01
    487e:	9a 83       	std	Y+2, r25	; 0x02
    4880:	ab 83       	std	Y+3, r26	; 0x03
    4882:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {
    4884:	39 85       	ldd	r19, Y+9	; 0x09
    4886:	33 30       	cpi	r19, 0x03	; 3
    4888:	d9 f5       	brne	.+118    	; 0x4900 <f_mkfs+0x712>
		ST_DWORD(tbl+BS_VolID32, n);			/* VSN */
    488a:	f4 01       	movw	r30, r8
    488c:	eb 58       	subi	r30, 0x8B	; 139
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 83       	st	Z, r24
    4892:	91 83       	std	Z+1, r25	; 0x01
    4894:	a2 83       	std	Z+2, r26	; 0x02
    4896:	b3 83       	std	Z+3, r27	; 0x03
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
    4898:	f4 01       	movw	r30, r8
    489a:	ea 5a       	subi	r30, 0xAA	; 170
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	40 82       	st	Z, r4
    48a0:	51 82       	std	Z+1, r5	; 0x01
    48a2:	62 82       	std	Z+2, r6	; 0x02
    48a4:	73 82       	std	Z+3, r7	; 0x03
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory start cluster (2) */
    48a6:	f4 01       	movw	r30, r8
    48a8:	e2 5a       	subi	r30, 0xA2	; 162
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	82 e0       	ldi	r24, 0x02	; 2
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	a0 e0       	ldi	r26, 0x00	; 0
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	80 83       	st	Z, r24
    48b6:	91 83       	std	Z+1, r25	; 0x01
    48b8:	a2 83       	std	Z+2, r26	; 0x02
    48ba:	b3 83       	std	Z+3, r27	; 0x03
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (VBR+1) */
    48bc:	f4 01       	movw	r30, r8
    48be:	ee 59       	subi	r30, 0x9E	; 158
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	81 e0       	ldi	r24, 0x01	; 1
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	91 83       	std	Z+1, r25	; 0x01
    48c8:	80 83       	st	Z, r24
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (VBR+6) */
    48ca:	f4 01       	movw	r30, r8
    48cc:	ec 59       	subi	r30, 0x9C	; 156
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	86 e0       	ldi	r24, 0x06	; 6
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	91 83       	std	Z+1, r25	; 0x01
    48d6:	80 83       	st	Z, r24
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    48d8:	f4 01       	movw	r30, r8
    48da:	ee 58       	subi	r30, 0x8E	; 142
    48dc:	ff 4f       	sbci	r31, 0xFF	; 255
    48de:	80 e8       	ldi	r24, 0x80	; 128
    48e0:	80 83       	st	Z, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    48e2:	f4 01       	movw	r30, r8
    48e4:	ec 58       	subi	r30, 0x8C	; 140
    48e6:	ff 4f       	sbci	r31, 0xFF	; 255
    48e8:	89 e2       	ldi	r24, 0x29	; 41
    48ea:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
    48ec:	c4 01       	movw	r24, r8
    48ee:	87 58       	subi	r24, 0x87	; 135
    48f0:	9f 4f       	sbci	r25, 0xFF	; 255
    48f2:	6d e9       	ldi	r22, 0x9D	; 157
    48f4:	74 e0       	ldi	r23, 0x04	; 4
    48f6:	43 e1       	ldi	r20, 0x13	; 19
    48f8:	50 e0       	ldi	r21, 0x00	; 0
    48fa:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
    48fe:	1f c0       	rjmp	.+62     	; 0x493e <f_mkfs+0x750>
	} else {
		ST_DWORD(tbl+BS_VolID, n);				/* VSN */
    4900:	f4 01       	movw	r30, r8
    4902:	e7 5a       	subi	r30, 0xA7	; 167
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	80 83       	st	Z, r24
    4908:	91 83       	std	Z+1, r25	; 0x01
    490a:	a2 83       	std	Z+2, r26	; 0x02
    490c:	b3 83       	std	Z+3, r27	; 0x03
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of sectors per FAT */
    490e:	f4 01       	movw	r30, r8
    4910:	e8 5b       	subi	r30, 0xB8	; 184
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	51 82       	std	Z+1, r5	; 0x01
    4916:	40 82       	st	Z, r4
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    4918:	f4 01       	movw	r30, r8
    491a:	ea 5a       	subi	r30, 0xAA	; 170
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	80 e8       	ldi	r24, 0x80	; 128
    4920:	80 83       	st	Z, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    4922:	f4 01       	movw	r30, r8
    4924:	e8 5a       	subi	r30, 0xA8	; 168
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	89 e2       	ldi	r24, 0x29	; 41
    492a:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
    492c:	c4 01       	movw	r24, r8
    492e:	83 5a       	subi	r24, 0xA3	; 163
    4930:	9f 4f       	sbci	r25, 0xFF	; 255
    4932:	61 eb       	ldi	r22, 0xB1	; 177
    4934:	74 e0       	ldi	r23, 0x04	; 4
    4936:	43 e1       	ldi	r20, 0x13	; 19
    4938:	50 e0       	ldi	r21, 0x00	; 0
    493a:	0e 94 04 06 	call	0xc08	; 0xc08 <mem_cpy>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature (Offset is fixed here regardless of sector size) */
    493e:	f4 01       	movw	r30, r8
    4940:	e0 5d       	subi	r30, 0xD0	; 208
    4942:	fd 4f       	sbci	r31, 0xFD	; 253
    4944:	85 e5       	ldi	r24, 0x55	; 85
    4946:	9a ea       	ldi	r25, 0xAA	; 170
    4948:	91 83       	std	Z+1, r25	; 0x01
    494a:	80 83       	st	Z, r24
	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)	/* Original (VBR) */
    494c:	8b 2d       	mov	r24, r11
    494e:	b1 01       	movw	r22, r2
    4950:	2a 89       	ldd	r18, Y+18	; 0x12
    4952:	3b 89       	ldd	r19, Y+19	; 0x13
    4954:	4c 89       	ldd	r20, Y+20	; 0x14
    4956:	5d 89       	ldd	r21, Y+21	; 0x15
    4958:	01 e0       	ldi	r16, 0x01	; 1
    495a:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
    495e:	88 23       	and	r24, r24
    4960:	09 f0       	breq	.+2      	; 0x4964 <f_mkfs+0x776>
    4962:	58 c1       	rjmp	.+688    	; 0x4c14 <f_mkfs+0xa26>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)						/* Backup (VBR+6) */
    4964:	49 85       	ldd	r20, Y+9	; 0x09
    4966:	43 30       	cpi	r20, 0x03	; 3
    4968:	81 f5       	brne	.+96     	; 0x49ca <f_mkfs+0x7dc>
		disk_write(drv, tbl, b_vol + 6, 1);
    496a:	2a 89       	ldd	r18, Y+18	; 0x12
    496c:	3b 89       	ldd	r19, Y+19	; 0x13
    496e:	4c 89       	ldd	r20, Y+20	; 0x14
    4970:	5d 89       	ldd	r21, Y+21	; 0x15
    4972:	2a 5f       	subi	r18, 0xFA	; 250
    4974:	3f 4f       	sbci	r19, 0xFF	; 255
    4976:	4f 4f       	sbci	r20, 0xFF	; 255
    4978:	5f 4f       	sbci	r21, 0xFF	; 255
    497a:	8b 2d       	mov	r24, r11
    497c:	b1 01       	movw	r22, r2
    497e:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>

	/* Initialize FAT area */
	for (i = 0; i < N_FATS; i++) {
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
    4982:	c1 01       	movw	r24, r2
    4984:	60 e0       	ldi	r22, 0x00	; 0
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	52 e0       	ldi	r21, 0x02	; 2
    498c:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
		n = md;								/* Media descriptor byte */
    4990:	81 2f       	mov	r24, r17
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	a0 e0       	ldi	r26, 0x00	; 0
    4996:	b0 e0       	ldi	r27, 0x00	; 0
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
		} else {
			n |= 0x0FFFFF00;
    4998:	9f 6f       	ori	r25, 0xFF	; 255
    499a:	af 6f       	ori	r26, 0xFF	; 255
    499c:	bf 60       	ori	r27, 0x0F	; 15
    499e:	89 83       	std	Y+1, r24	; 0x01
    49a0:	9a 83       	std	Y+2, r25	; 0x02
    49a2:	ab 83       	std	Y+3, r26	; 0x03
    49a4:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
    49a6:	f4 01       	movw	r30, r8
    49a8:	82 ab       	sts	0x52, r24
    49aa:	93 ab       	sts	0x53, r25
    49ac:	a4 ab       	sts	0x54, r26
    49ae:	b5 ab       	sts	0x55, r27
			ST_DWORD(tbl+4, 0x0FFFFFFF);
    49b0:	8f ef       	ldi	r24, 0xFF	; 255
    49b2:	9f ef       	ldi	r25, 0xFF	; 255
    49b4:	af ef       	ldi	r26, 0xFF	; 255
    49b6:	bf e0       	ldi	r27, 0x0F	; 15
    49b8:	86 ab       	sts	0x56, r24
    49ba:	97 ab       	sts	0x57, r25
    49bc:	a0 af       	sts	0x70, r26
    49be:	b1 af       	sts	0x71, r27
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    49c0:	82 af       	sts	0x72, r24
    49c2:	93 af       	sts	0x73, r25
    49c4:	a4 af       	sts	0x74, r26
    49c6:	b5 af       	sts	0x75, r27
    49c8:	24 c0       	rjmp	.+72     	; 0x4a12 <f_mkfs+0x824>
	if (fmt == FS_FAT32)						/* Backup (VBR+6) */
		disk_write(drv, tbl, b_vol + 6, 1);

	/* Initialize FAT area */
	for (i = 0; i < N_FATS; i++) {
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
    49ca:	c1 01       	movw	r24, r2
    49cc:	60 e0       	ldi	r22, 0x00	; 0
    49ce:	70 e0       	ldi	r23, 0x00	; 0
    49d0:	40 e0       	ldi	r20, 0x00	; 0
    49d2:	52 e0       	ldi	r21, 0x02	; 2
    49d4:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
		n = md;								/* Media descriptor byte */
    49d8:	41 2f       	mov	r20, r17
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	60 e0       	ldi	r22, 0x00	; 0
    49de:	70 e0       	ldi	r23, 0x00	; 0
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    49e0:	f9 85       	ldd	r31, Y+9	; 0x09
    49e2:	f1 30       	cpi	r31, 0x01	; 1
    49e4:	29 f4       	brne	.+10     	; 0x49f0 <f_mkfs+0x802>
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	9f ef       	ldi	r25, 0xFF	; 255
    49ea:	af ef       	ldi	r26, 0xFF	; 255
    49ec:	b0 e0       	ldi	r27, 0x00	; 0
    49ee:	04 c0       	rjmp	.+8      	; 0x49f8 <f_mkfs+0x80a>
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	9f ef       	ldi	r25, 0xFF	; 255
    49f4:	af ef       	ldi	r26, 0xFF	; 255
    49f6:	bf ef       	ldi	r27, 0xFF	; 255
    49f8:	84 2b       	or	r24, r20
    49fa:	95 2b       	or	r25, r21
    49fc:	a6 2b       	or	r26, r22
    49fe:	b7 2b       	or	r27, r23
    4a00:	89 83       	std	Y+1, r24	; 0x01
    4a02:	9a 83       	std	Y+2, r25	; 0x02
    4a04:	ab 83       	std	Y+3, r26	; 0x03
    4a06:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
    4a08:	f4 01       	movw	r30, r8
    4a0a:	82 ab       	sts	0x52, r24
    4a0c:	93 ab       	sts	0x53, r25
    4a0e:	a4 ab       	sts	0x54, r26
    4a10:	b5 ab       	sts	0x55, r27
			n |= 0x0FFFFF00;
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0x0FFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    4a12:	8b 2d       	mov	r24, r11
    4a14:	b1 01       	movw	r22, r2
    4a16:	2e 85       	ldd	r18, Y+14	; 0x0e
    4a18:	3f 85       	ldd	r19, Y+15	; 0x0f
    4a1a:	48 89       	ldd	r20, Y+16	; 0x10
    4a1c:	59 89       	ldd	r21, Y+17	; 0x11
    4a1e:	01 e0       	ldi	r16, 0x01	; 1
    4a20:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
    4a24:	88 23       	and	r24, r24
    4a26:	09 f0       	breq	.+2      	; 0x4a2a <f_mkfs+0x83c>
    4a28:	f7 c0       	rjmp	.+494    	; 0x4c18 <f_mkfs+0xa2a>
    4a2a:	2e 85       	ldd	r18, Y+14	; 0x0e
    4a2c:	3f 85       	ldd	r19, Y+15	; 0x0f
    4a2e:	48 89       	ldd	r20, Y+16	; 0x10
    4a30:	59 89       	ldd	r21, Y+17	; 0x11
    4a32:	2f 5f       	subi	r18, 0xFF	; 255
    4a34:	3f 4f       	sbci	r19, 0xFF	; 255
    4a36:	4f 4f       	sbci	r20, 0xFF	; 255
    4a38:	5f 4f       	sbci	r21, 0xFF	; 255
    4a3a:	2e 87       	std	Y+14, r18	; 0x0e
    4a3c:	3f 87       	std	Y+15, r19	; 0x0f
    4a3e:	48 8b       	std	Y+16, r20	; 0x10
    4a40:	59 8b       	std	Y+17, r21	; 0x11
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Fill following FAT entries with zero */
    4a42:	c1 01       	movw	r24, r2
    4a44:	60 e0       	ldi	r22, 0x00	; 0
    4a46:	70 e0       	ldi	r23, 0x00	; 0
    4a48:	40 e0       	ldi	r20, 0x00	; 0
    4a4a:	52 e0       	ldi	r21, 0x02	; 2
    4a4c:	0e 94 36 06 	call	0xc6c	; 0xc6c <mem_set>
		for (n = 1; n < n_fat; n++) {	/* This loop may take a time on FAT32 volume due to many single sector write */
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	a0 e0       	ldi	r26, 0x00	; 0
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	89 83       	std	Y+1, r24	; 0x01
    4a5a:	9a 83       	std	Y+2, r25	; 0x02
    4a5c:	ab 83       	std	Y+3, r26	; 0x03
    4a5e:	bc 83       	std	Y+4, r27	; 0x04
    4a60:	22 c0       	rjmp	.+68     	; 0x4aa6 <f_mkfs+0x8b8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    4a62:	8b 2d       	mov	r24, r11
    4a64:	b1 01       	movw	r22, r2
    4a66:	2e 85       	ldd	r18, Y+14	; 0x0e
    4a68:	3f 85       	ldd	r19, Y+15	; 0x0f
    4a6a:	48 89       	ldd	r20, Y+16	; 0x10
    4a6c:	59 89       	ldd	r21, Y+17	; 0x11
    4a6e:	01 e0       	ldi	r16, 0x01	; 1
    4a70:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
    4a74:	88 23       	and	r24, r24
    4a76:	09 f0       	breq	.+2      	; 0x4a7a <f_mkfs+0x88c>
    4a78:	d1 c0       	rjmp	.+418    	; 0x4c1c <f_mkfs+0xa2e>
    4a7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a7e:	a8 89       	ldd	r26, Y+16	; 0x10
    4a80:	b9 89       	ldd	r27, Y+17	; 0x11
    4a82:	01 96       	adiw	r24, 0x01	; 1
    4a84:	a1 1d       	adc	r26, r1
    4a86:	b1 1d       	adc	r27, r1
    4a88:	8e 87       	std	Y+14, r24	; 0x0e
    4a8a:	9f 87       	std	Y+15, r25	; 0x0f
    4a8c:	a8 8b       	std	Y+16, r26	; 0x10
    4a8e:	b9 8b       	std	Y+17, r27	; 0x11
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {	/* This loop may take a time on FAT32 volume due to many single sector write */
    4a90:	89 81       	ldd	r24, Y+1	; 0x01
    4a92:	9a 81       	ldd	r25, Y+2	; 0x02
    4a94:	ab 81       	ldd	r26, Y+3	; 0x03
    4a96:	bc 81       	ldd	r27, Y+4	; 0x04
    4a98:	01 96       	adiw	r24, 0x01	; 1
    4a9a:	a1 1d       	adc	r26, r1
    4a9c:	b1 1d       	adc	r27, r1
    4a9e:	89 83       	std	Y+1, r24	; 0x01
    4aa0:	9a 83       	std	Y+2, r25	; 0x02
    4aa2:	ab 83       	std	Y+3, r26	; 0x03
    4aa4:	bc 83       	std	Y+4, r27	; 0x04
    4aa6:	89 81       	ldd	r24, Y+1	; 0x01
    4aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aaa:	ab 81       	ldd	r26, Y+3	; 0x03
    4aac:	bc 81       	ldd	r27, Y+4	; 0x04
    4aae:	84 15       	cp	r24, r4
    4ab0:	95 05       	cpc	r25, r5
    4ab2:	a6 05       	cpc	r26, r6
    4ab4:	b7 05       	cpc	r27, r7
    4ab6:	a8 f2       	brcs	.-86     	; 0x4a62 <f_mkfs+0x874>
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	n = (fmt == FS_FAT32) ? as : n_dir;
    4ab8:	99 85       	ldd	r25, Y+9	; 0x09
    4aba:	93 30       	cpi	r25, 0x03	; 3
    4abc:	39 f4       	brne	.+14     	; 0x4acc <f_mkfs+0x8de>
    4abe:	26 01       	movw	r4, r12
    4ac0:	66 24       	eor	r6, r6
    4ac2:	77 24       	eor	r7, r7
    4ac4:	4a 8e       	std	Y+26, r4	; 0x1a
    4ac6:	5b 8e       	std	Y+27, r5	; 0x1b
    4ac8:	6c 8e       	std	Y+28, r6	; 0x1c
    4aca:	7d 8e       	std	Y+29, r7	; 0x1d
    4acc:	4a 8c       	ldd	r4, Y+26	; 0x1a
    4ace:	5b 8c       	ldd	r5, Y+27	; 0x1b
    4ad0:	6c 8c       	ldd	r6, Y+28	; 0x1c
    4ad2:	7d 8c       	ldd	r7, Y+29	; 0x1d
    4ad4:	49 82       	std	Y+1, r4	; 0x01
    4ad6:	5a 82       	std	Y+2, r5	; 0x02
    4ad8:	6b 82       	std	Y+3, r6	; 0x03
    4ada:	7c 82       	std	Y+4, r7	; 0x04
    4adc:	0e 85       	ldd	r16, Y+14	; 0x0e
    4ade:	1f 85       	ldd	r17, Y+15	; 0x0f
    4ae0:	28 89       	ldd	r18, Y+16	; 0x10
    4ae2:	39 89       	ldd	r19, Y+17	; 0x11
	while (n--) {
    4ae4:	13 c0       	rjmp	.+38     	; 0x4b0c <f_mkfs+0x91e>
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    4ae6:	68 01       	movw	r12, r16
    4ae8:	79 01       	movw	r14, r18
    4aea:	08 94       	sec
    4aec:	c1 1c       	adc	r12, r1
    4aee:	d1 1c       	adc	r13, r1
    4af0:	e1 1c       	adc	r14, r1
    4af2:	f1 1c       	adc	r15, r1
    4af4:	8b 2d       	mov	r24, r11
    4af6:	b1 01       	movw	r22, r2
    4af8:	a9 01       	movw	r20, r18
    4afa:	98 01       	movw	r18, r16
    4afc:	01 e0       	ldi	r16, 0x01	; 1
    4afe:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
    4b02:	88 23       	and	r24, r24
    4b04:	09 f0       	breq	.+2      	; 0x4b08 <f_mkfs+0x91a>
    4b06:	8c c0       	rjmp	.+280    	; 0x4c20 <f_mkfs+0xa32>
    4b08:	97 01       	movw	r18, r14
    4b0a:	86 01       	movw	r16, r12
		}
	}

	/* Initialize root directory */
	n = (fmt == FS_FAT32) ? as : n_dir;
	while (n--) {
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b10:	ab 81       	ldd	r26, Y+3	; 0x03
    4b12:	bc 81       	ldd	r27, Y+4	; 0x04
    4b14:	ac 01       	movw	r20, r24
    4b16:	bd 01       	movw	r22, r26
    4b18:	41 50       	subi	r20, 0x01	; 1
    4b1a:	50 40       	sbci	r21, 0x00	; 0
    4b1c:	60 40       	sbci	r22, 0x00	; 0
    4b1e:	70 40       	sbci	r23, 0x00	; 0
    4b20:	49 83       	std	Y+1, r20	; 0x01
    4b22:	5a 83       	std	Y+2, r21	; 0x02
    4b24:	6b 83       	std	Y+3, r22	; 0x03
    4b26:	7c 83       	std	Y+4, r23	; 0x04
    4b28:	00 97       	sbiw	r24, 0x00	; 0
    4b2a:	a1 05       	cpc	r26, r1
    4b2c:	b1 05       	cpc	r27, r1
    4b2e:	d9 f6       	brne	.-74     	; 0x4ae6 <f_mkfs+0x8f8>
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
	}

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    4b30:	29 85       	ldd	r18, Y+9	; 0x09
    4b32:	23 30       	cpi	r18, 0x03	; 3
    4b34:	09 f0       	breq	.+2      	; 0x4b38 <f_mkfs+0x94a>
    4b36:	4b c0       	rjmp	.+150    	; 0x4bce <f_mkfs+0x9e0>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    4b38:	f4 01       	movw	r30, r8
    4b3a:	e0 5d       	subi	r30, 0xD0	; 208
    4b3c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b3e:	85 e5       	ldi	r24, 0x55	; 85
    4b40:	9a ea       	ldi	r25, 0xAA	; 170
    4b42:	91 83       	std	Z+1, r25	; 0x01
    4b44:	80 83       	st	Z, r24
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    4b46:	82 e5       	ldi	r24, 0x52	; 82
    4b48:	92 e5       	ldi	r25, 0x52	; 82
    4b4a:	a1 e6       	ldi	r26, 0x61	; 97
    4b4c:	b1 e4       	ldi	r27, 0x41	; 65
    4b4e:	f4 01       	movw	r30, r8
    4b50:	82 ab       	sts	0x52, r24
    4b52:	93 ab       	sts	0x53, r25
    4b54:	a4 ab       	sts	0x54, r26
    4b56:	b5 ab       	sts	0x55, r27
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    4b58:	ea 5e       	subi	r30, 0xEA	; 234
    4b5a:	fd 4f       	sbci	r31, 0xFD	; 253
    4b5c:	82 e7       	ldi	r24, 0x72	; 114
    4b5e:	92 e7       	ldi	r25, 0x72	; 114
    4b60:	a1 e4       	ldi	r26, 0x41	; 65
    4b62:	b1 e6       	ldi	r27, 0x61	; 97
    4b64:	80 83       	st	Z, r24
    4b66:	91 83       	std	Z+1, r25	; 0x01
    4b68:	a2 83       	std	Z+2, r26	; 0x02
    4b6a:	b3 83       	std	Z+3, r27	; 0x03
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    4b6c:	f4 01       	movw	r30, r8
    4b6e:	e6 5e       	subi	r30, 0xE6	; 230
    4b70:	fd 4f       	sbci	r31, 0xFD	; 253
    4b72:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b74:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b76:	ac 85       	ldd	r26, Y+12	; 0x0c
    4b78:	bd 85       	ldd	r27, Y+13	; 0x0d
    4b7a:	01 97       	sbiw	r24, 0x01	; 1
    4b7c:	a1 09       	sbc	r26, r1
    4b7e:	b1 09       	sbc	r27, r1
    4b80:	80 83       	st	Z, r24
    4b82:	91 83       	std	Z+1, r25	; 0x01
    4b84:	a2 83       	std	Z+2, r26	; 0x02
    4b86:	b3 83       	std	Z+3, r27	; 0x03
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    4b88:	f4 01       	movw	r30, r8
    4b8a:	e2 5e       	subi	r30, 0xE2	; 226
    4b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    4b8e:	8f ef       	ldi	r24, 0xFF	; 255
    4b90:	9f ef       	ldi	r25, 0xFF	; 255
    4b92:	dc 01       	movw	r26, r24
    4b94:	80 83       	st	Z, r24
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	a2 83       	std	Z+2, r26	; 0x02
    4b9a:	b3 83       	std	Z+3, r27	; 0x03
		disk_write(drv, tbl, b_vol + 1, 1);	/* Original (VBR+1) */
    4b9c:	2a 89       	ldd	r18, Y+18	; 0x12
    4b9e:	3b 89       	ldd	r19, Y+19	; 0x13
    4ba0:	4c 89       	ldd	r20, Y+20	; 0x14
    4ba2:	5d 89       	ldd	r21, Y+21	; 0x15
    4ba4:	2f 5f       	subi	r18, 0xFF	; 255
    4ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba8:	4f 4f       	sbci	r20, 0xFF	; 255
    4baa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bac:	8b 2d       	mov	r24, r11
    4bae:	b1 01       	movw	r22, r2
    4bb0:	01 e0       	ldi	r16, 0x01	; 1
    4bb2:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
		disk_write(drv, tbl, b_vol + 7, 1);	/* Backup  (VBR+7) */
    4bb6:	2a 89       	ldd	r18, Y+18	; 0x12
    4bb8:	3b 89       	ldd	r19, Y+19	; 0x13
    4bba:	4c 89       	ldd	r20, Y+20	; 0x14
    4bbc:	5d 89       	ldd	r21, Y+21	; 0x15
    4bbe:	29 5f       	subi	r18, 0xF9	; 249
    4bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc2:	4f 4f       	sbci	r20, 0xFF	; 255
    4bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc6:	8b 2d       	mov	r24, r11
    4bc8:	b1 01       	movw	r22, r2
    4bca:	0e 94 80 03 	call	0x700	; 0x700 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
    4bce:	8b 2d       	mov	r24, r11
    4bd0:	60 e0       	ldi	r22, 0x00	; 0
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <disk_ioctl>
    4bda:	91 e0       	ldi	r25, 0x01	; 1
    4bdc:	88 23       	and	r24, r24
    4bde:	09 f5       	brne	.+66     	; 0x4c22 <f_mkfs+0xa34>
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	1f c0       	rjmp	.+62     	; 0x4c22 <f_mkfs+0xa34>
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4be4:	9b e0       	ldi	r25, 0x0B	; 11
    4be6:	1d c0       	rjmp	.+58     	; 0x4c22 <f_mkfs+0xa34>
	fs = FatFs[drv];
	if (!fs) return FR_NOT_ENABLED;
    4be8:	9c e0       	ldi	r25, 0x0C	; 12
    4bea:	1b c0       	rjmp	.+54     	; 0x4c22 <f_mkfs+0xa34>
	fs->fs_type = 0;
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4bec:	93 e0       	ldi	r25, 0x03	; 3
    4bee:	19 c0       	rjmp	.+50     	; 0x4c22 <f_mkfs+0xa34>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4bf0:	9a e0       	ldi	r25, 0x0A	; 10
    4bf2:	17 c0       	rjmp	.+46     	; 0x4c22 <f_mkfs+0xa34>
#if _MAX_SS != 512					/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_DISK_ERR;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
		return FR_DISK_ERR;
    4bf4:	91 e0       	ldi	r25, 0x01	; 1
    4bf6:	15 c0       	rjmp	.+42     	; 0x4c22 <f_mkfs+0xa34>
    4bf8:	91 e0       	ldi	r25, 0x01	; 1
    4bfa:	13 c0       	rjmp	.+38     	; 0x4c22 <f_mkfs+0xa34>
		n_dir = N_ROOTDIR * 32UL / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
	b_data = b_dir + n_dir;				/* Data area start sector */
	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
    4bfc:	9e e0       	ldi	r25, 0x0E	; 14
    4bfe:	11 c0       	rjmp	.+34     	; 0x4c22 <f_mkfs+0xa34>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_DISK_ERR;
    4c00:	91 e0       	ldi	r25, 0x01	; 1
    4c02:	0f c0       	rjmp	.+30     	; 0x4c22 <f_mkfs+0xa34>
	if (!n || n > 32768) return FR_MKFS_ABORTED;
    4c04:	9e e0       	ldi	r25, 0x0E	; 14
    4c06:	0d c0       	rjmp	.+26     	; 0x4c22 <f_mkfs+0xa34>

	/* Determine number of cluster and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;
    4c08:	9e e0       	ldi	r25, 0x0E	; 14
    4c0a:	0b c0       	rjmp	.+22     	; 0x4c22 <f_mkfs+0xa34>
    4c0c:	9e e0       	ldi	r25, 0x0E	; 14
    4c0e:	09 c0       	rjmp	.+18     	; 0x4c22 <f_mkfs+0xa34>
			tbl[4] = 0x0c;
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
		ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
			return FR_DISK_ERR;
    4c10:	91 e0       	ldi	r25, 0x01	; 1
    4c12:	07 c0       	rjmp	.+14     	; 0x4c22 <f_mkfs+0xa34>
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature (Offset is fixed here regardless of sector size) */
	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)	/* Original (VBR) */
		return FR_DISK_ERR;
    4c14:	91 e0       	ldi	r25, 0x01	; 1
    4c16:	05 c0       	rjmp	.+10     	; 0x4c22 <f_mkfs+0xa34>
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0x0FFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
    4c18:	91 e0       	ldi	r25, 0x01	; 1
    4c1a:	03 c0       	rjmp	.+6      	; 0x4c22 <f_mkfs+0xa34>
		mem_set(tbl, 0, SS(fs));		/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {	/* This loop may take a time on FAT32 volume due to many single sector write */
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
				return FR_DISK_ERR;
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	01 c0       	rjmp	.+2      	; 0x4c22 <f_mkfs+0xa34>

	/* Initialize root directory */
	n = (fmt == FS_FAT32) ? as : n_dir;
	while (n--) {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
    4c20:	91 e0       	ldi	r25, 0x01	; 1
		disk_write(drv, tbl, b_vol + 1, 1);	/* Original (VBR+1) */
		disk_write(drv, tbl, b_vol + 7, 1);	/* Backup  (VBR+7) */
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
}
    4c22:	89 2f       	mov	r24, r25
    4c24:	a7 96       	adiw	r28, 0x27	; 39
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	f8 94       	cli
    4c2a:	de bf       	out	0x3e, r29	; 62
    4c2c:	0f be       	out	0x3f, r0	; 63
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	1f 91       	pop	r17
    4c36:	0f 91       	pop	r16
    4c38:	ff 90       	pop	r15
    4c3a:	ef 90       	pop	r14
    4c3c:	df 90       	pop	r13
    4c3e:	cf 90       	pop	r12
    4c40:	bf 90       	pop	r11
    4c42:	9f 90       	pop	r9
    4c44:	8f 90       	pop	r8
    4c46:	7f 90       	pop	r7
    4c48:	6f 90       	pop	r6
    4c4a:	5f 90       	pop	r5
    4c4c:	4f 90       	pop	r4
    4c4e:	3f 90       	pop	r3
    4c50:	2f 90       	pop	r2
    4c52:	08 95       	ret

00004c54 <initializeFAT>:
 * Target Device: Wunderboard
 */

#include "player.h"

uint8_t initializeFAT(FATFS* fs){
    4c54:	bc 01       	movw	r22, r24
	DSTATUS driveStatus;
	
	/* Mount and verify disk type */
	if (f_mount(0, fs) != FR_OK)
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	0e 94 f7 12 	call	0x25ee	; 0x25ee <f_mount>
    4c5c:	88 23       	and	r24, r24
    4c5e:	51 f4       	brne	.+20     	; 0x4c74 <initializeFAT+0x20>
		return ERR_FMOUNT;
	
	driveStatus = disk_initialize(0);
    4c60:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <disk_initialize>
	
	/* Verify that disk exists */
	if (driveStatus & STA_NODISK)
    4c64:	81 fd       	sbrc	r24, 1
    4c66:	08 c0       	rjmp	.+16     	; 0x4c78 <initializeFAT+0x24>
		return ERR_NODISK;
	
	/* Verify that disk is initialized */
	if (driveStatus & STA_NOINIT)
    4c68:	80 fd       	sbrc	r24, 0
    4c6a:	08 c0       	rjmp	.+16     	; 0x4c7c <initializeFAT+0x28>
		return ERR_NOINIT;
	
	/* Verify that disk is not write protected */
	if (driveStatus & STA_PROTECT)
    4c6c:	82 ff       	sbrs	r24, 2
    4c6e:	08 c0       	rjmp	.+16     	; 0x4c80 <initializeFAT+0x2c>
		return ERR_PROTECTED;
    4c70:	84 e0       	ldi	r24, 0x04	; 4
    4c72:	08 95       	ret
uint8_t initializeFAT(FATFS* fs){
	DSTATUS driveStatus;
	
	/* Mount and verify disk type */
	if (f_mount(0, fs) != FR_OK)
		return ERR_FMOUNT;
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	08 95       	ret
	
	driveStatus = disk_initialize(0);
	
	/* Verify that disk exists */
	if (driveStatus & STA_NODISK)
		return ERR_NODISK;
    4c78:	82 e0       	ldi	r24, 0x02	; 2
    4c7a:	08 95       	ret
	
	/* Verify that disk is initialized */
	if (driveStatus & STA_NOINIT)
		return ERR_NOINIT;
    4c7c:	83 e0       	ldi	r24, 0x03	; 3
    4c7e:	08 95       	ret
	
	/* Verify that disk is not write protected */
	if (driveStatus & STA_PROTECT)
		return ERR_PROTECTED;
	
	return ERR_NONE;
    4c80:	80 e0       	ldi	r24, 0x00	; 0
}
    4c82:	08 95       	ret

00004c84 <seek_to_data>:

void seek_to_data(const char * path){
    4c84:	6f 92       	push	r6
    4c86:	7f 92       	push	r7
    4c88:	8f 92       	push	r8
    4c8a:	9f 92       	push	r9
    4c8c:	af 92       	push	r10
    4c8e:	bf 92       	push	r11
    4c90:	cf 92       	push	r12
    4c92:	df 92       	push	r13
    4c94:	ef 92       	push	r14
    4c96:	ff 92       	push	r15
    4c98:	0f 93       	push	r16
    4c9a:	1f 93       	push	r17
    4c9c:	cf 93       	push	r28
    4c9e:	df 93       	push	r29
    4ca0:	0f 92       	push	r0
    4ca2:	cd b7       	in	r28, 0x3d	; 61
    4ca4:	de b7       	in	r29, 0x3e	; 62
    4ca6:	bc 01       	movw	r22, r24
	char buf[1];
	FRESULT result;
	
	/* open the .wav file for reading */
	if((result = f_open(&wav, path, FA_READ | FA_OPEN_EXISTING)) != FR_OK){
    4ca8:	85 ec       	ldi	r24, 0xC5	; 197
    4caa:	97 e0       	ldi	r25, 0x07	; 7
    4cac:	41 e0       	ldi	r20, 0x01	; 1
    4cae:	0e 94 15 13 	call	0x262a	; 0x262a <f_open>
    4cb2:	88 23       	and	r24, r24
    4cb4:	09 f0       	breq	.+2      	; 0x4cb8 <seek_to_data+0x34>
    4cb6:	71 c0       	rjmp	.+226    	; 0x4d9a <seek_to_data+0x116>
#endif

	/* find the data section */
	do{
		/* read one byte at a time */
		f_read(&wav, (void *) buf, 1, &bytes_read);
    4cb8:	0f 2e       	mov	r0, r31
    4cba:	f5 ec       	ldi	r31, 0xC5	; 197
    4cbc:	ef 2e       	mov	r14, r31
    4cbe:	f7 e0       	ldi	r31, 0x07	; 7
    4cc0:	ff 2e       	mov	r15, r31
    4cc2:	f0 2d       	mov	r31, r0
    4cc4:	0f 2e       	mov	r0, r31
    4cc6:	f1 ec       	ldi	r31, 0xC1	; 193
    4cc8:	cf 2e       	mov	r12, r31
    4cca:	f7 e0       	ldi	r31, 0x07	; 7
    4ccc:	df 2e       	mov	r13, r31
    4cce:	f0 2d       	mov	r31, r0
		
		/* if a 'd' is found, check to see if the word "data" has been found */
		i = 0;
		while(buf[0] == flag[i]){
    4cd0:	0f 2e       	mov	r0, r31
    4cd2:	f2 ef       	ldi	r31, 0xF2	; 242
    4cd4:	8f 2e       	mov	r8, r31
    4cd6:	f4 e0       	ldi	r31, 0x04	; 4
    4cd8:	9f 2e       	mov	r9, r31
    4cda:	f0 2d       	mov	r31, r0
		return ERR_PROTECTED;
	
	return ERR_NONE;
}

void seek_to_data(const char * path){
    4cdc:	0f 2e       	mov	r0, r31
    4cde:	f3 e0       	ldi	r31, 0x03	; 3
    4ce0:	af 2e       	mov	r10, r31
    4ce2:	bb 24       	eor	r11, r11
    4ce4:	f0 2d       	mov	r31, r0
    4ce6:	a8 0c       	add	r10, r8
    4ce8:	b9 1c       	adc	r11, r9
		/* read one byte at a time */
		f_read(&wav, (void *) buf, 1, &bytes_read);
		
		/* if a 'd' is found, check to see if the word "data" has been found */
		i = 0;
		while(buf[0] == flag[i]){
    4cea:	66 24       	eor	r6, r6
    4cec:	77 24       	eor	r7, r7
#endif

	/* find the data section */
	do{
		/* read one byte at a time */
		f_read(&wav, (void *) buf, 1, &bytes_read);
    4cee:	c7 01       	movw	r24, r14
    4cf0:	be 01       	movw	r22, r28
    4cf2:	6f 5f       	subi	r22, 0xFF	; 255
    4cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf6:	41 e0       	ldi	r20, 0x01	; 1
    4cf8:	50 e0       	ldi	r21, 0x00	; 0
    4cfa:	96 01       	movw	r18, r12
    4cfc:	0e 94 48 14 	call	0x2890	; 0x2890 <f_read>
		
		/* if a 'd' is found, check to see if the word "data" has been found */
		i = 0;
		while(buf[0] == flag[i]){
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	84 36       	cpi	r24, 0x64	; 100
    4d04:	b1 f4       	brne	.+44     	; 0x4d32 <seek_to_data+0xae>
    4d06:	84 01       	movw	r16, r8
    4d08:	03 c0       	rjmp	.+6      	; 0x4d10 <seek_to_data+0x8c>
			i ++;
			if(i == 4){
    4d0a:	0a 15       	cp	r16, r10
    4d0c:	1b 05       	cpc	r17, r11
    4d0e:	99 f0       	breq	.+38     	; 0x4d36 <seek_to_data+0xb2>
				found = 1;
				break;
			}
			
			f_read(&wav, (void *) buf, 1, &bytes_read);
    4d10:	c7 01       	movw	r24, r14
    4d12:	be 01       	movw	r22, r28
    4d14:	6f 5f       	subi	r22, 0xFF	; 255
    4d16:	7f 4f       	sbci	r23, 0xFF	; 255
    4d18:	41 e0       	ldi	r20, 0x01	; 1
    4d1a:	50 e0       	ldi	r21, 0x00	; 0
    4d1c:	96 01       	movw	r18, r12
    4d1e:	0e 94 48 14 	call	0x2890	; 0x2890 <f_read>
		/* read one byte at a time */
		f_read(&wav, (void *) buf, 1, &bytes_read);
		
		/* if a 'd' is found, check to see if the word "data" has been found */
		i = 0;
		while(buf[0] == flag[i]){
    4d22:	f8 01       	movw	r30, r16
    4d24:	81 91       	ld	r24, Z+
    4d26:	8f 01       	movw	r16, r30
    4d28:	99 81       	ldd	r25, Y+1	; 0x01
    4d2a:	98 17       	cp	r25, r24
    4d2c:	71 f3       	breq	.-36     	; 0x4d0a <seek_to_data+0x86>
    4d2e:	93 01       	movw	r18, r6
    4d30:	04 c0       	rjmp	.+8      	; 0x4d3a <seek_to_data+0xb6>
    4d32:	93 01       	movw	r18, r6
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <seek_to_data+0xb6>
			i ++;
			if(i == 4){
				found = 1;
    4d36:	21 e0       	ldi	r18, 0x01	; 1
    4d38:	30 e0       	ldi	r19, 0x00	; 0
				break;
			}
			
			f_read(&wav, (void *) buf, 1, &bytes_read);
		}
	}while(bytes_read > 0 && !found);
    4d3a:	80 91 c1 07 	lds	r24, 0x07C1
    4d3e:	90 91 c2 07 	lds	r25, 0x07C2
    4d42:	00 97       	sbiw	r24, 0x00	; 0
    4d44:	31 f0       	breq	.+12     	; 0x4d52 <seek_to_data+0xce>
    4d46:	21 15       	cp	r18, r1
    4d48:	31 05       	cpc	r19, r1
    4d4a:	89 f2       	breq	.-94     	; 0x4cee <seek_to_data+0x6a>
    4d4c:	04 e0       	ldi	r16, 0x04	; 4
    4d4e:	10 e0       	ldi	r17, 0x00	; 0
    4d50:	02 c0       	rjmp	.+4      	; 0x4d56 <seek_to_data+0xd2>
    4d52:	04 e0       	ldi	r16, 0x04	; 4
    4d54:	10 e0       	ldi	r17, 0x00	; 0
	sendStringUART("Data section found!!\r\n");
#endif

	/* eat up the next four bytes that correspond to the data section size */
	for(i = 0; i < 4; i++)
		f_read(&wav, (void *) buf, 1, &bytes_read);
    4d56:	0f 2e       	mov	r0, r31
    4d58:	f5 ec       	ldi	r31, 0xC5	; 197
    4d5a:	ef 2e       	mov	r14, r31
    4d5c:	f7 e0       	ldi	r31, 0x07	; 7
    4d5e:	ff 2e       	mov	r15, r31
    4d60:	f0 2d       	mov	r31, r0
    4d62:	0f 2e       	mov	r0, r31
    4d64:	f1 ec       	ldi	r31, 0xC1	; 193
    4d66:	cf 2e       	mov	r12, r31
    4d68:	f7 e0       	ldi	r31, 0x07	; 7
    4d6a:	df 2e       	mov	r13, r31
    4d6c:	f0 2d       	mov	r31, r0
    4d6e:	c7 01       	movw	r24, r14
    4d70:	be 01       	movw	r22, r28
    4d72:	6f 5f       	subi	r22, 0xFF	; 255
    4d74:	7f 4f       	sbci	r23, 0xFF	; 255
    4d76:	41 e0       	ldi	r20, 0x01	; 1
    4d78:	50 e0       	ldi	r21, 0x00	; 0
    4d7a:	96 01       	movw	r18, r12
    4d7c:	0e 94 48 14 	call	0x2890	; 0x2890 <f_read>
    4d80:	01 50       	subi	r16, 0x01	; 1
    4d82:	10 40       	sbci	r17, 0x00	; 0
#ifdef DEBUG
	sendStringUART("Data section found!!\r\n");
#endif

	/* eat up the next four bytes that correspond to the data section size */
	for(i = 0; i < 4; i++)
    4d84:	a1 f7       	brne	.-24     	; 0x4d6e <seek_to_data+0xea>
		f_read(&wav, (void *) buf, 1, &bytes_read);
	
	/* read in the first 2048 bytes of the song */
	FRESULT error = f_read(&wav, (void *) sample, 2048, &bytes_read);
    4d86:	85 ec       	ldi	r24, 0xC5	; 197
    4d88:	97 e0       	ldi	r25, 0x07	; 7
    4d8a:	65 ee       	ldi	r22, 0xE5	; 229
    4d8c:	77 e0       	ldi	r23, 0x07	; 7
    4d8e:	40 e0       	ldi	r20, 0x00	; 0
    4d90:	58 e0       	ldi	r21, 0x08	; 8
    4d92:	21 ec       	ldi	r18, 0xC1	; 193
    4d94:	37 e0       	ldi	r19, 0x07	; 7
    4d96:	0e 94 48 14 	call	0x2890	; 0x2890 <f_read>
	if(error != 0)
		sendDiskError(error);

	sendStringUART("Initialization of wav file finished!\r\n");
#endif
}
    4d9a:	0f 90       	pop	r0
    4d9c:	df 91       	pop	r29
    4d9e:	cf 91       	pop	r28
    4da0:	1f 91       	pop	r17
    4da2:	0f 91       	pop	r16
    4da4:	ff 90       	pop	r15
    4da6:	ef 90       	pop	r14
    4da8:	df 90       	pop	r13
    4daa:	cf 90       	pop	r12
    4dac:	bf 90       	pop	r11
    4dae:	af 90       	pop	r10
    4db0:	9f 90       	pop	r9
    4db2:	8f 90       	pop	r8
    4db4:	7f 90       	pop	r7
    4db6:	6f 90       	pop	r6
    4db8:	08 95       	ret

00004dba <play_wav>:

void play_wav(const char * filename, int alarm){
    4dba:	cf 92       	push	r12
    4dbc:	df 92       	push	r13
    4dbe:	ef 92       	push	r14
    4dc0:	ff 92       	push	r15
    4dc2:	0f 93       	push	r16
    4dc4:	1f 93       	push	r17
    4dc6:	cf 93       	push	r28
    4dc8:	df 93       	push	r29
    4dca:	6b 01       	movw	r12, r22
	/* advance the .wav file pointer to the music data section */
	seek_to_data(filename);
    4dcc:	0e 94 42 26 	call	0x4c84	; 0x4c84 <seek_to_data>
		
	song_index = 0;
    4dd0:	10 92 c4 07 	sts	0x07C4, r1
    4dd4:	10 92 c3 07 	sts	0x07C3, r1
	
	/* Set OCR1A low on compare match and high when the top is reached */
	TCCR1A |= (1 << WGM10) | (1 << COM1A1);
    4dd8:	e0 e8       	ldi	r30, 0x80	; 128
    4dda:	f0 e0       	ldi	r31, 0x00	; 0
    4ddc:	80 81       	ld	r24, Z
    4dde:	81 68       	ori	r24, 0x81	; 129
    4de0:	80 83       	st	Z, r24
	
	/* Clk/1 and 8 bit Fast PWM mode 5 */
	TCCR1B |= (1 << WGM12) | (1 << CS10);
    4de2:	e1 e8       	ldi	r30, 0x81	; 129
    4de4:	f0 e0       	ldi	r31, 0x00	; 0
    4de6:	80 81       	ld	r24, Z
    4de8:	89 60       	ori	r24, 0x09	; 9
    4dea:	80 83       	st	Z, r24

	/* Set OCR0A to normal operation mode */
	TCCR0A = 0b00000000;
    4dec:	14 bc       	out	0x24, r1	; 36

	/* Set prescaler to Clk/64 */
	TCCR0B |= (1 << CS01) | (1 << CS00);
    4dee:	85 b5       	in	r24, 0x25	; 37
    4df0:	83 60       	ori	r24, 0x03	; 3
    4df2:	85 bd       	out	0x25, r24	; 37
		
	/* enable OCR0A timer counter compare interrupts */
	TIMSK0 |= (1 << OCIE0A);
    4df4:	ee e6       	ldi	r30, 0x6E	; 110
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	80 81       	ld	r24, Z
    4dfa:	82 60       	ori	r24, 0x02	; 2
    4dfc:	80 83       	st	Z, r24
	
	/* set the interrupt timing to match the sample rate */
	OCR0A = 15;
    4dfe:	8f e0       	ldi	r24, 0x0F	; 15
    4e00:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0;	
    4e02:	16 bc       	out	0x26, r1	; 38
		 */
		if(song_index >= 2048 && bytes_read > 0){
			song_index = 0;
			
			/* read 2048 samples into the buffer */
			while(f_read(&wav, (void *) sample, 2048, &bytes_read) != 0);
    4e04:	c5 ec       	ldi	r28, 0xC5	; 197
    4e06:	d7 e0       	ldi	r29, 0x07	; 7
    4e08:	05 ee       	ldi	r16, 0xE5	; 229
    4e0a:	17 e0       	ldi	r17, 0x07	; 7
    4e0c:	0f 2e       	mov	r0, r31
    4e0e:	f1 ec       	ldi	r31, 0xC1	; 193
    4e10:	ef 2e       	mov	r14, r31
    4e12:	f7 e0       	ldi	r31, 0x07	; 7
    4e14:	ff 2e       	mov	r15, r31
    4e16:	f0 2d       	mov	r31, r0
    while(1) {
		/* 
		 * check if the index needs to be reset, which indicates that the samples
		 * have all been played and 2048 new samples need to be read in
		 */
		if(song_index >= 2048 && bytes_read > 0){
    4e18:	80 91 c3 07 	lds	r24, 0x07C3
    4e1c:	90 91 c4 07 	lds	r25, 0x07C4
    4e20:	28 e0       	ldi	r18, 0x08	; 8
    4e22:	80 30       	cpi	r24, 0x00	; 0
    4e24:	92 07       	cpc	r25, r18
    4e26:	fc f0       	brlt	.+62     	; 0x4e66 <play_wav+0xac>
    4e28:	80 91 c1 07 	lds	r24, 0x07C1
    4e2c:	90 91 c2 07 	lds	r25, 0x07C2
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	c9 f0       	breq	.+50     	; 0x4e66 <play_wav+0xac>
			song_index = 0;
    4e34:	10 92 c4 07 	sts	0x07C4, r1
    4e38:	10 92 c3 07 	sts	0x07C3, r1
			
			/* read 2048 samples into the buffer */
			while(f_read(&wav, (void *) sample, 2048, &bytes_read) != 0);
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	b8 01       	movw	r22, r16
    4e40:	40 e0       	ldi	r20, 0x00	; 0
    4e42:	58 e0       	ldi	r21, 0x08	; 8
    4e44:	97 01       	movw	r18, r14
    4e46:	0e 94 48 14 	call	0x2890	; 0x2890 <f_read>
    4e4a:	88 23       	and	r24, r24
    4e4c:	b9 f7       	brne	.-18     	; 0x4e3c <play_wav+0x82>
			
			/* sound is finished playing so disable the sampling interrupt and return */
			if(bytes_read == 0){
    4e4e:	80 91 c1 07 	lds	r24, 0x07C1
    4e52:	90 91 c2 07 	lds	r25, 0x07C2
    4e56:	00 97       	sbiw	r24, 0x00	; 0
    4e58:	f9 f4       	brne	.+62     	; 0x4e98 <play_wav+0xde>
				TIMSK0 &= ~(1 << OCIE0A);
    4e5a:	ee e6       	ldi	r30, 0x6E	; 110
    4e5c:	f0 e0       	ldi	r31, 0x00	; 0
    4e5e:	80 81       	ld	r24, Z
    4e60:	8d 7f       	andi	r24, 0xFD	; 253
    4e62:	80 83       	st	Z, r24
				
				return;
    4e64:	1b c0       	rjmp	.+54     	; 0x4e9c <play_wav+0xe2>
			}				
		}else if(stopPlay && !alarm){
    4e66:	80 91 bd 07 	lds	r24, 0x07BD
    4e6a:	90 91 be 07 	lds	r25, 0x07BE
    4e6e:	00 97       	sbiw	r24, 0x00	; 0
    4e70:	99 f0       	breq	.+38     	; 0x4e98 <play_wav+0xde>
    4e72:	c1 14       	cp	r12, r1
    4e74:	d1 04       	cpc	r13, r1
    4e76:	81 f4       	brne	.+32     	; 0x4e98 <play_wav+0xde>
			TIMSK0 &= ~(1 << OCIE0A);
    4e78:	ee e6       	ldi	r30, 0x6E	; 110
    4e7a:	f0 e0       	ldi	r31, 0x00	; 0
    4e7c:	80 81       	ld	r24, Z
    4e7e:	8d 7f       	andi	r24, 0xFD	; 253
    4e80:	80 83       	st	Z, r24
			
			play_wav("/alarm.wav", 1);	
    4e82:	86 ef       	ldi	r24, 0xF6	; 246
    4e84:	94 e0       	ldi	r25, 0x04	; 4
    4e86:	61 e0       	ldi	r22, 0x01	; 1
    4e88:	70 e0       	ldi	r23, 0x00	; 0
    4e8a:	0e 94 dd 26 	call	0x4dba	; 0x4dba <play_wav>
			stopPlay = 0;
    4e8e:	10 92 be 07 	sts	0x07BE, r1
    4e92:	10 92 bd 07 	sts	0x07BD, r1
			
			return;
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <play_wav+0xe2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4e98:	00 00       	nop
    4e9a:	be cf       	rjmp	.-132    	; 0x4e18 <play_wav+0x5e>
		}
		
		_delay_us(1);
	}	
}
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	1f 91       	pop	r17
    4ea2:	0f 91       	pop	r16
    4ea4:	ff 90       	pop	r15
    4ea6:	ef 90       	pop	r14
    4ea8:	df 90       	pop	r13
    4eaa:	cf 90       	pop	r12
    4eac:	08 95       	ret

00004eae <initialize>:
/** 
 * Initializes the ports to their correct input or output setting
 */
void initialize (void) {
	/* Port A is the switches and buttons. They should always be inputs. ( 0 = Input and 1 = Output )*/
	DDRA=0b00000000;
    4eae:	11 b8       	out	0x01, r1	; 1

	/* Port B has the LED Array color control, SD card, and audio-out on it. Leave DDRB alone. ( 0 = Input and 1 = Output )*/
	DDRB=0b11100111;
    4eb0:	87 ee       	ldi	r24, 0xE7	; 231
    4eb2:	84 b9       	out	0x04, r24	; 4

	/* Port C is for the 'row' of the LED array. They should always be outputs. ( 0 = Input and 1 = Output )*/
	DDRC=0b11111111;
    4eb4:	8f ef       	ldi	r24, 0xFF	; 255
    4eb6:	87 b9       	out	0x07, r24	; 7
	
	/* Port D has the Serial on it. Leave DDRB alone. ( 0 = Input and 1 = Output )*/
	DDRD=0b00000000;
    4eb8:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PB0) | (1 << PB1);
    4eba:	8b b1       	in	r24, 0x0b	; 11
    4ebc:	83 60       	ori	r24, 0x03	; 3
    4ebe:	8b b9       	out	0x0b, r24	; 11
	
	/* Port E has the LED Array Column control out on it. Leave DDRE alone. ( 0 = Input and 1 = Output )*/
	DDRE=0b00000111;
    4ec0:	87 e0       	ldi	r24, 0x07	; 7
    4ec2:	8d b9       	out	0x0d, r24	; 13

	/* Port F has the accelerometer and audio-in on it. Leave DDRF alone. ( 0 = Input and 1 = Output )*/
	DDRF=0b00000000;
    4ec4:	10 ba       	out	0x10, r1	; 16
	
	/* globally enable interrupts */
	sei();
    4ec6:	78 94       	sei
}
    4ec8:	08 95       	ret

00004eca <enable_ext_interrupts>:

/** 
 * Enables external interrupts INT0 and INT1 (PD0 and PD1)
 */
void enable_ext_interrupts(){
	playback = stopPlay = 0;
    4eca:	10 92 be 07 	sts	0x07BE, r1
    4ece:	10 92 bd 07 	sts	0x07BD, r1
    4ed2:	10 92 c0 07 	sts	0x07C0, r1
    4ed6:	10 92 bf 07 	sts	0x07BF, r1
	
	/* 
	 * disable INT0 and INT1 so an interrupt isn't triggered when we change the
	 * interrupt trigger to the rising edge
	 */ 
	EIMSK &= ~(1 << INT0) | ~(1 << INT1);
    4eda:	8d b3       	in	r24, 0x1d	; 29
    4edc:	8d bb       	out	0x1d, r24	; 29
	
	/* trigger the interrupt on the rising edge of the pin change for INT0 and INT1 */
	EICRA |= (1 << ISC00) | (1 << ISC01) | (1 << ISC11) | (1 << ISC10);
    4ede:	e9 e6       	ldi	r30, 0x69	; 105
    4ee0:	f0 e0       	ldi	r31, 0x00	; 0
    4ee2:	80 81       	ld	r24, Z
    4ee4:	8f 60       	ori	r24, 0x0F	; 15
    4ee6:	80 83       	st	Z, r24
	
	/* enable external interrupt 1 and interrupt 0 */
	EIMSK |= (1 << INT0) | (1 << INT1);
    4ee8:	8d b3       	in	r24, 0x1d	; 29
    4eea:	83 60       	ori	r24, 0x03	; 3
    4eec:	8d bb       	out	0x1d, r24	; 29
}
    4eee:	08 95       	ret

00004ef0 <__vector_1>:

/** 
 * External interrupt for PD0 that sets the playback flag, which begins
 * playback of the .wav file if it is not already playing
 */
SIGNAL(INT0_vect){
    4ef0:	1f 92       	push	r1
    4ef2:	0f 92       	push	r0
    4ef4:	0f b6       	in	r0, 0x3f	; 63
    4ef6:	0f 92       	push	r0
    4ef8:	11 24       	eor	r1, r1
    4efa:	2f 93       	push	r18
    4efc:	3f 93       	push	r19
    4efe:	4f 93       	push	r20
    4f00:	5f 93       	push	r21
    4f02:	6f 93       	push	r22
    4f04:	7f 93       	push	r23
    4f06:	8f 93       	push	r24
    4f08:	9f 93       	push	r25
    4f0a:	af 93       	push	r26
    4f0c:	bf 93       	push	r27
    4f0e:	ef 93       	push	r30
    4f10:	ff 93       	push	r31
	
	if(!playback){
    4f12:	80 91 bf 07 	lds	r24, 0x07BF
    4f16:	90 91 c0 07 	lds	r25, 0x07C0
    4f1a:	00 97       	sbiw	r24, 0x00	; 0
    4f1c:	51 f4       	brne	.+20     	; 0x4f32 <__vector_1+0x42>
		playback = 1;
    4f1e:	81 e0       	ldi	r24, 0x01	; 1
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	90 93 c0 07 	sts	0x07C0, r25
    4f26:	80 93 bf 07 	sts	0x07BF, r24
		
#ifdef DEBUG
		sendStringUART("Playback interrupt...\r\n");
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	95 e0       	ldi	r25, 0x05	; 5
    4f2e:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
#endif
	}
}
    4f32:	ff 91       	pop	r31
    4f34:	ef 91       	pop	r30
    4f36:	bf 91       	pop	r27
    4f38:	af 91       	pop	r26
    4f3a:	9f 91       	pop	r25
    4f3c:	8f 91       	pop	r24
    4f3e:	7f 91       	pop	r23
    4f40:	6f 91       	pop	r22
    4f42:	5f 91       	pop	r21
    4f44:	4f 91       	pop	r20
    4f46:	3f 91       	pop	r19
    4f48:	2f 91       	pop	r18
    4f4a:	0f 90       	pop	r0
    4f4c:	0f be       	out	0x3f, r0	; 63
    4f4e:	0f 90       	pop	r0
    4f50:	1f 90       	pop	r1
    4f52:	18 95       	reti

00004f54 <__vector_2>:
/** 
 * External interrupt for PD1 that sets the stopPlayback flag, which interrupts
 * the playback of the main .wav file and begins playback of the alarm .wav file
 * if it is not already playing.
 */
SIGNAL(INT1_vect){
    4f54:	1f 92       	push	r1
    4f56:	0f 92       	push	r0
    4f58:	0f b6       	in	r0, 0x3f	; 63
    4f5a:	0f 92       	push	r0
    4f5c:	11 24       	eor	r1, r1
    4f5e:	2f 93       	push	r18
    4f60:	3f 93       	push	r19
    4f62:	4f 93       	push	r20
    4f64:	5f 93       	push	r21
    4f66:	6f 93       	push	r22
    4f68:	7f 93       	push	r23
    4f6a:	8f 93       	push	r24
    4f6c:	9f 93       	push	r25
    4f6e:	af 93       	push	r26
    4f70:	bf 93       	push	r27
    4f72:	ef 93       	push	r30
    4f74:	ff 93       	push	r31
#ifdef DEBUG
	sendStringUART("Alarm interrupt...\r\n");
    4f76:	89 e1       	ldi	r24, 0x19	; 25
    4f78:	95 e0       	ldi	r25, 0x05	; 5
    4f7a:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
#endif

	if(playback)
    4f7e:	80 91 bf 07 	lds	r24, 0x07BF
    4f82:	90 91 c0 07 	lds	r25, 0x07C0
    4f86:	00 97       	sbiw	r24, 0x00	; 0
    4f88:	39 f0       	breq	.+14     	; 0x4f98 <__vector_2+0x44>
		stopPlay = 1;
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	90 93 be 07 	sts	0x07BE, r25
    4f92:	80 93 bd 07 	sts	0x07BD, r24
    4f96:	14 c0       	rjmp	.+40     	; 0x4fc0 <__vector_2+0x6c>
	else{
		playback = 1;
    4f98:	81 e0       	ldi	r24, 0x01	; 1
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	90 93 c0 07 	sts	0x07C0, r25
    4fa0:	80 93 bf 07 	sts	0x07BF, r24
		play_wav("/alarm.wav", 1);
    4fa4:	8e e2       	ldi	r24, 0x2E	; 46
    4fa6:	95 e0       	ldi	r25, 0x05	; 5
    4fa8:	61 e0       	ldi	r22, 0x01	; 1
    4faa:	70 e0       	ldi	r23, 0x00	; 0
    4fac:	0e 94 dd 26 	call	0x4dba	; 0x4dba <play_wav>
		
		stopPlay = playback = 0;
    4fb0:	10 92 c0 07 	sts	0x07C0, r1
    4fb4:	10 92 bf 07 	sts	0x07BF, r1
    4fb8:	10 92 be 07 	sts	0x07BE, r1
    4fbc:	10 92 bd 07 	sts	0x07BD, r1
	}		
}
    4fc0:	ff 91       	pop	r31
    4fc2:	ef 91       	pop	r30
    4fc4:	bf 91       	pop	r27
    4fc6:	af 91       	pop	r26
    4fc8:	9f 91       	pop	r25
    4fca:	8f 91       	pop	r24
    4fcc:	7f 91       	pop	r23
    4fce:	6f 91       	pop	r22
    4fd0:	5f 91       	pop	r21
    4fd2:	4f 91       	pop	r20
    4fd4:	3f 91       	pop	r19
    4fd6:	2f 91       	pop	r18
    4fd8:	0f 90       	pop	r0
    4fda:	0f be       	out	0x3f, r0	; 63
    4fdc:	0f 90       	pop	r0
    4fde:	1f 90       	pop	r1
    4fe0:	18 95       	reti

00004fe2 <__vector_21>:

/** 
 * Timer counter compare interrupt that has a frequency close to 8000 Hz that changes
 * the duty cycle of the PWM to match the corresponding sample and generate audio
 */
SIGNAL(TIMER0_COMPA_vect){
    4fe2:	1f 92       	push	r1
    4fe4:	0f 92       	push	r0
    4fe6:	0f b6       	in	r0, 0x3f	; 63
    4fe8:	0f 92       	push	r0
    4fea:	11 24       	eor	r1, r1
    4fec:	2f 93       	push	r18
    4fee:	3f 93       	push	r19
    4ff0:	8f 93       	push	r24
    4ff2:	9f 93       	push	r25
    4ff4:	ef 93       	push	r30
    4ff6:	ff 93       	push	r31
	/* reset the interrupt timer */
	TCNT0 = 0;	
    4ff8:	16 bc       	out	0x26, r1	; 38
	
	/* change the PWM to match the voltage of the next sample */
	OCR1A = sample[song_index];
    4ffa:	80 91 c3 07 	lds	r24, 0x07C3
    4ffe:	90 91 c4 07 	lds	r25, 0x07C4
    5002:	fc 01       	movw	r30, r24
    5004:	eb 51       	subi	r30, 0x1B	; 27
    5006:	f8 4f       	sbci	r31, 0xF8	; 248
    5008:	20 81       	ld	r18, Z
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	30 93 89 00 	sts	0x0089, r19
    5010:	20 93 88 00 	sts	0x0088, r18
	
	/* increment the sample index */
	song_index ++;
    5014:	01 96       	adiw	r24, 0x01	; 1
    5016:	90 93 c4 07 	sts	0x07C4, r25
    501a:	80 93 c3 07 	sts	0x07C3, r24
	return;
}
    501e:	ff 91       	pop	r31
    5020:	ef 91       	pop	r30
    5022:	9f 91       	pop	r25
    5024:	8f 91       	pop	r24
    5026:	3f 91       	pop	r19
    5028:	2f 91       	pop	r18
    502a:	0f 90       	pop	r0
    502c:	0f be       	out	0x3f, r0	; 63
    502e:	0f 90       	pop	r0
    5030:	1f 90       	pop	r1
    5032:	18 95       	reti

00005034 <main>:
/** 
 * Polls the playback flag and begins audio playback when the playback flag
 * is set
 */
int main(void) {	
	CPU_PRESCALE(0);
    5034:	e1 e6       	ldi	r30, 0x61	; 97
    5036:	f0 e0       	ldi	r31, 0x00	; 0
    5038:	80 e8       	ldi	r24, 0x80	; 128
    503a:	80 83       	st	Z, r24
    503c:	10 82       	st	Z, r1
	
	initialize();
    503e:	0e 94 57 27 	call	0x4eae	; 0x4eae <initialize>
	
#ifdef DEBUG
	initializeUART();
    5042:	0e 94 6b 00 	call	0xd6	; 0xd6 <initializeUART>
	sendStringUART("Mounting SD card and opening file...\r\n");
    5046:	89 e3       	ldi	r24, 0x39	; 57
    5048:	95 e0       	ldi	r25, 0x05	; 5
    504a:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
#endif

	/* mount the SD card and initialize the file system */
	FRESULT err;
	if((err = initializeFAT(&fat)) != ERR_NONE){
    504e:	8b e8       	ldi	r24, 0x8B	; 139
    5050:	95 e0       	ldi	r25, 0x05	; 5
    5052:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <initializeFAT>
    5056:	88 23       	and	r24, r24
    5058:	29 f0       	breq	.+10     	; 0x5064 <main+0x30>
#ifdef DEBUG
		sendMountError(err);
    505a:	0e 94 17 01 	call	0x22e	; 0x22e <sendMountError>
		
		_delay_ms(1);
	}
		
	return 1;
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	08 95       	ret
		sendMountError(err);
#endif
		return 1;
	}else{
#ifdef DEBUG
		sendStringUART("SD card mounted\r\n");
    5064:	80 e6       	ldi	r24, 0x60	; 96
    5066:	95 e0       	ldi	r25, 0x05	; 5
    5068:	0e 94 84 00 	call	0x108	; 0x108 <sendStringUART>
#endif
	}
			
	enable_ext_interrupts();
    506c:	0e 94 65 27 	call	0x4eca	; 0x4eca <enable_ext_interrupts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5070:	85 e0       	ldi	r24, 0x05	; 5
    5072:	99 ef       	ldi	r25, 0xF9	; 249
    5074:	01 97       	sbiw	r24, 0x01	; 1
    5076:	f1 f7       	brne	.-4      	; 0x5074 <main+0x40>
    5078:	00 c0       	rjmp	.+0      	; 0x507a <main+0x46>
    507a:	00 00       	nop
    507c:	85 e0       	ldi	r24, 0x05	; 5
    507e:	99 ef       	ldi	r25, 0xF9	; 249
    5080:	01 97       	sbiw	r24, 0x01	; 1
    5082:	f1 f7       	brne	.-4      	; 0x5080 <main+0x4c>
    5084:	00 c0       	rjmp	.+0      	; 0x5086 <main+0x52>
    5086:	00 00       	nop
    5088:	85 e0       	ldi	r24, 0x05	; 5
    508a:	99 ef       	ldi	r25, 0xF9	; 249
    508c:	01 97       	sbiw	r24, 0x01	; 1
    508e:	f1 f7       	brne	.-4      	; 0x508c <main+0x58>
    5090:	00 c0       	rjmp	.+0      	; 0x5092 <main+0x5e>
    5092:	00 00       	nop
    5094:	85 e0       	ldi	r24, 0x05	; 5
    5096:	99 ef       	ldi	r25, 0xF9	; 249
    5098:	01 97       	sbiw	r24, 0x01	; 1
    509a:	f1 f7       	brne	.-4      	; 0x5098 <main+0x64>
    509c:	00 c0       	rjmp	.+0      	; 0x509e <main+0x6a>
    509e:	00 00       	nop
    50a0:	85 e0       	ldi	r24, 0x05	; 5
    50a2:	99 ef       	ldi	r25, 0xF9	; 249
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <main+0x70>
    50a8:	00 c0       	rjmp	.+0      	; 0x50aa <main+0x76>
    50aa:	00 00       	nop
    50ac:	85 e0       	ldi	r24, 0x05	; 5
    50ae:	99 ef       	ldi	r25, 0xF9	; 249
    50b0:	01 97       	sbiw	r24, 0x01	; 1
    50b2:	f1 f7       	brne	.-4      	; 0x50b0 <main+0x7c>
    50b4:	00 c0       	rjmp	.+0      	; 0x50b6 <main+0x82>
    50b6:	00 00       	nop
    50b8:	85 e0       	ldi	r24, 0x05	; 5
    50ba:	99 ef       	ldi	r25, 0xF9	; 249
    50bc:	01 97       	sbiw	r24, 0x01	; 1
    50be:	f1 f7       	brne	.-4      	; 0x50bc <main+0x88>
    50c0:	00 c0       	rjmp	.+0      	; 0x50c2 <main+0x8e>
    50c2:	00 00       	nop
    50c4:	85 e0       	ldi	r24, 0x05	; 5
    50c6:	99 ef       	ldi	r25, 0xF9	; 249
    50c8:	01 97       	sbiw	r24, 0x01	; 1
    50ca:	f1 f7       	brne	.-4      	; 0x50c8 <main+0x94>
    50cc:	00 c0       	rjmp	.+0      	; 0x50ce <main+0x9a>
    50ce:	00 00       	nop
	playback = 0;
    while(1) {
		if(playback)
			play_wav("/message.wav", 0);
			
		playback = 0;
    50d0:	10 92 c0 07 	sts	0x07C0, r1
    50d4:	10 92 bf 07 	sts	0x07BF, r1
    50d8:	89 ef       	ldi	r24, 0xF9	; 249
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	01 97       	sbiw	r24, 0x01	; 1
    50de:	f1 f7       	brne	.-4      	; 0x50dc <main+0xa8>
    50e0:	00 c0       	rjmp	.+0      	; 0x50e2 <main+0xae>
    50e2:	00 00       	nop
    50e4:	f5 cf       	rjmp	.-22     	; 0x50d0 <main+0x9c>

000050e6 <__mulsi3>:
    50e6:	62 9f       	mul	r22, r18
    50e8:	d0 01       	movw	r26, r0
    50ea:	73 9f       	mul	r23, r19
    50ec:	f0 01       	movw	r30, r0
    50ee:	82 9f       	mul	r24, r18
    50f0:	e0 0d       	add	r30, r0
    50f2:	f1 1d       	adc	r31, r1
    50f4:	64 9f       	mul	r22, r20
    50f6:	e0 0d       	add	r30, r0
    50f8:	f1 1d       	adc	r31, r1
    50fa:	92 9f       	mul	r25, r18
    50fc:	f0 0d       	add	r31, r0
    50fe:	83 9f       	mul	r24, r19
    5100:	f0 0d       	add	r31, r0
    5102:	74 9f       	mul	r23, r20
    5104:	f0 0d       	add	r31, r0
    5106:	65 9f       	mul	r22, r21
    5108:	f0 0d       	add	r31, r0
    510a:	99 27       	eor	r25, r25
    510c:	72 9f       	mul	r23, r18
    510e:	b0 0d       	add	r27, r0
    5110:	e1 1d       	adc	r30, r1
    5112:	f9 1f       	adc	r31, r25
    5114:	63 9f       	mul	r22, r19
    5116:	b0 0d       	add	r27, r0
    5118:	e1 1d       	adc	r30, r1
    511a:	f9 1f       	adc	r31, r25
    511c:	bd 01       	movw	r22, r26
    511e:	cf 01       	movw	r24, r30
    5120:	11 24       	eor	r1, r1
    5122:	08 95       	ret

00005124 <__udivmodsi4>:
    5124:	a1 e2       	ldi	r26, 0x21	; 33
    5126:	1a 2e       	mov	r1, r26
    5128:	aa 1b       	sub	r26, r26
    512a:	bb 1b       	sub	r27, r27
    512c:	fd 01       	movw	r30, r26
    512e:	0d c0       	rjmp	.+26     	; 0x514a <__udivmodsi4_ep>

00005130 <__udivmodsi4_loop>:
    5130:	aa 1f       	adc	r26, r26
    5132:	bb 1f       	adc	r27, r27
    5134:	ee 1f       	adc	r30, r30
    5136:	ff 1f       	adc	r31, r31
    5138:	a2 17       	cp	r26, r18
    513a:	b3 07       	cpc	r27, r19
    513c:	e4 07       	cpc	r30, r20
    513e:	f5 07       	cpc	r31, r21
    5140:	20 f0       	brcs	.+8      	; 0x514a <__udivmodsi4_ep>
    5142:	a2 1b       	sub	r26, r18
    5144:	b3 0b       	sbc	r27, r19
    5146:	e4 0b       	sbc	r30, r20
    5148:	f5 0b       	sbc	r31, r21

0000514a <__udivmodsi4_ep>:
    514a:	66 1f       	adc	r22, r22
    514c:	77 1f       	adc	r23, r23
    514e:	88 1f       	adc	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	1a 94       	dec	r1
    5154:	69 f7       	brne	.-38     	; 0x5130 <__udivmodsi4_loop>
    5156:	60 95       	com	r22
    5158:	70 95       	com	r23
    515a:	80 95       	com	r24
    515c:	90 95       	com	r25
    515e:	9b 01       	movw	r18, r22
    5160:	ac 01       	movw	r20, r24
    5162:	bd 01       	movw	r22, r26
    5164:	cf 01       	movw	r24, r30
    5166:	08 95       	ret

00005168 <_exit>:
    5168:	f8 94       	cli

0000516a <__stop_program>:
    516a:	ff cf       	rjmp	.-2      	; 0x516a <__stop_program>
